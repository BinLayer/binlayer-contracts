{
  "address": "0x15A1c45b64083e0ddf48a77e7414246c7B8c8c9e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolController",
          "name": "_poolController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MaxPerDepositUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalDepositsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPauserRegistry",
          "name": "pauserRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPauserRegistry",
          "name": "newPauserRegistry",
          "type": "address"
        }
      ],
      "name": "PauserRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "explanation",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVLLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPerDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTotalDeposits",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_underlyingToken",
          "type": "address"
        },
        {
          "internalType": "contract IPauserRegistry",
          "name": "_pauserRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_underlyingToken",
          "type": "address"
        },
        {
          "internalType": "contract IPauserRegistry",
          "name": "_pauserRegistry",
          "type": "address"
        }
      ],
      "name": "initializeBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauserRegistry",
      "outputs": [
        {
          "internalType": "contract IPauserRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolController",
      "outputs": [
        {
          "internalType": "contract IPoolController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPauserRegistry",
          "name": "newPauserRegistry",
          "type": "address"
        }
      ],
      "name": "setPauserRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxPerDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newMaxTotalDeposits",
          "type": "uint256"
        }
      ],
      "name": "setTVLLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountShares",
          "type": "uint256"
        }
      ],
      "name": "sharesToUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountShares",
          "type": "uint256"
        }
      ],
      "name": "sharesToUnderlyingView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountUnderlying",
          "type": "uint256"
        }
      ],
      "name": "underlyingToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountUnderlying",
          "type": "uint256"
        }
      ],
      "name": "underlyingToSharesView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userUnderlyingView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountShares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ab0b822b934bd800a92694686795b8a6c5d161f83f796c2c4d9a2d36a1bee61",
  "receipt": {
    "to": null,
    "from": "0x1Ee532cf775be02E0B306571e3555321FC75988d",
    "contractAddress": "0x15A1c45b64083e0ddf48a77e7414246c7B8c8c9e",
    "transactionIndex": 2,
    "gasUsed": "1562472",
    "logsBloom": "0x
    "blockHash": "0xdff6fa2444da507e82edd1217a82ee359b26611cb0763bc37b0b7bc9ff2cea53",
    "transactionHash": "0x1ab0b822b934bd800a92694686795b8a6c5d161f83f796c2c4d9a2d36a1bee61",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 42158586,
        "transactionHash": "0x1ab0b822b934bd800a92694686795b8a6c5d161f83f796c2c4d9a2d36a1bee61",
        "address": "0x15A1c45b64083e0ddf48a77e7414246c7B8c8c9e",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 2,
        "blockHash": "0xdff6fa2444da507e82edd1217a82ee359b26611cb0763bc37b0b7bc9ff2cea53"
      }
    ],
    "blockNumber": 42158586,
    "cumulativeGasUsed": "1875814",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd914b20BcFcdBb396697a957fc28a77947593bE5"
  ],
  "numDeployments": 1,
  "solcInputHash": "ec9ec5098c5cbac6ea24657050d64207",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolController\",\"name\":\"_poolController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxPerDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxTotalDepositsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"explanation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVLLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract IPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract IPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"}],\"name\":\"initializeBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolController\",\"outputs\":[{\"internalType\":\"contract IPoolController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxPerDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxTotalDeposits\",\"type\":\"uint256\"}],\"name\":\"setTVLLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"sharesToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"sharesToUnderlyingView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"underlyingToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"underlyingToSharesView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userUnderlyingView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Note that this implementation still converts between any amount of shares or underlying tokens in its view functions; these functions purposefully do not take the TVL limit into account.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deposit(address,uint256)\":{\"details\":\"This function is only callable by the poolController contract. It is invoked inside of the poolController's `depositIntoPool` function, and individual share balances are recorded in the poolController as well.Note that the assumption is made that `amount` of `token` has already been transferred directly to this contract (as performed in the PoolController.sol's deposit functions). In particular, setting the `underlyingToken` of this contract to be a fee-on-transfer token will break the assumption that the amount this contract *received* of the token is equal to the amount that was input when the transfer was performed (i.e. the amount transferred 'out' of the depositor's balance).Note that any validation of `token` is done inside `_beforeDeposit`. This can be overridden if needed.\",\"params\":{\"amount\":\"is the amount of token being deposited\",\"token\":\"is the ERC20 token being deposited\"},\"returns\":{\"newShares\":\"is the number of new shares issued at the current exchange ratio.\"}},\"pause(uint256)\":{\"details\":\"This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"setTVLLimits(uint256,uint256)\":{\"details\":\"Callable only by the unpauser of this contractWe note that there is a potential race condition between a call to this function that lowers either or both of these limits and call(s) to `deposit`, that may result in some calls to `deposit` reverting.\",\"params\":{\"newMaxTotalDeposits\":\"The new maximum deposits\"}},\"sharesToUnderlying(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountShares\":\"is the amount of shares to calculate its conversion into the underlying token\"},\"returns\":{\"_0\":\"The amount of underlying tokens corresponding to the input `amountShares`\"}},\"sharesToUnderlyingView(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountShares\":\"is the amount of shares to calculate its conversion into the underlying token\"},\"returns\":{\"_0\":\"The amount of underlying tokens corresponding to the input `amountShares`\"}},\"underlyingToShares(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountUnderlying\":\"is the amount of `underlyingToken` to calculate its conversion into pool shares\"},\"returns\":{\"_0\":\"The amount of shares corresponding to the input `amountUnderlying`\"}},\"underlyingToSharesView(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountUnderlying\":\"is the amount of `underlyingToken` to calculate its conversion into pool shares\"},\"returns\":{\"_0\":\"The amount of shares corresponding to the input `amountUnderlying`\"}},\"unpause(uint256)\":{\"details\":\"This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"withdraw(address,address,uint256)\":{\"details\":\"This function is only callable by the poolController contract. It is invoked inside of the poolController's other functions, and individual share balances are recorded in the poolController as well.Note that any validation of `token` is done inside `_beforeWithdrawal`. This can be overridden if needed.\",\"params\":{\"amountShares\":\"is the amount of shares being withdrawn\",\"recipient\":\"is the address to receive the withdrawn funds\",\"token\":\"is the ERC20 token being transferred out\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"A Pool implementation inheriting from `PoolBase.sol` that limits the total amount of deposits it will accept.\",\"version\":1},\"userdoc\":{\"events\":{\"MaxPerDepositUpdated(uint256,uint256)\":{\"notice\":\"Emitted when `maxPerDeposit` value is updated from `previousValue` to `newValue`\"},\"MaxTotalDepositsUpdated(uint256,uint256)\":{\"notice\":\"Emitted when `maxTotalDeposits` value is updated from `previousValue` to `newValue`\"},\"Paused(address,uint256)\":{\"notice\":\"Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\"},\"PauserRegistrySet(address,address)\":{\"notice\":\"Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\"},\"Unpaused(address,uint256)\":{\"notice\":\"Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"solhint-disable-next-line no-empty-blocks\"},\"deposit(address,uint256)\":{\"notice\":\"Used to deposit tokens into this Pool\"},\"explanation()\":{\"notice\":\"Currently returns a brief string explaining the pool's goal & purpose, but for more complex strategies, may be a link to metadata that explains in more detail.\"},\"getTVLLimits()\":{\"notice\":\"Simple getter function that returns the current values of `maxPerDeposit` and `maxTotalDeposits`.\"},\"maxPerDeposit()\":{\"notice\":\"The maximum deposit (in underlyingToken) that this pool will accept per deposit\"},\"maxTotalDeposits()\":{\"notice\":\"The maximum deposits (in underlyingToken) that this pool will hold\"},\"pause(uint256)\":{\"notice\":\"This function is used to pause an BinLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\"},\"pauseAll()\":{\"notice\":\"Alias for `pause(type(uint256).max)`.\"},\"paused()\":{\"notice\":\"Returns the current paused status as a uint256.\"},\"paused(uint8)\":{\"notice\":\"Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\"},\"pauserRegistry()\":{\"notice\":\"Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\"},\"poolController()\":{\"notice\":\"BinLayer's PoolController.sol contract\"},\"setPauserRegistry(address)\":{\"notice\":\"Allows the unpauser to set a new pauser registry\"},\"setTVLLimits(uint256,uint256)\":{\"notice\":\"Sets the maximum deposits (in underlyingToken) that this pool will hold and accept per deposit\"},\"shares(address)\":{\"notice\":\"convenience function for fetching the current total shares of `user` in this pool, by querying the `poolController` contract\"},\"sharesToUnderlying(uint256)\":{\"notice\":\"Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\"},\"sharesToUnderlyingView(uint256)\":{\"notice\":\"Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.In contrast to `sharesToUnderlying`, this function guarantees no state modifications\"},\"totalShares()\":{\"notice\":\"The total number of extant shares in this Pool\"},\"underlyingToShares(uint256)\":{\"notice\":\"Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.In contrast to `underlyingToSharesView`, this function **may** make state modifications\"},\"underlyingToSharesView(uint256)\":{\"notice\":\"Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.In contrast to `underlyingToShares`, this function guarantees no state modifications\"},\"underlyingToken()\":{\"notice\":\"The underlying token for shares in this Pool\"},\"unpause(uint256)\":{\"notice\":\"This function is used to unpause an BinLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\"},\"userUnderlying(address)\":{\"notice\":\"convenience function for fetching the current underlying value of all of the `user`'s shares in this pool. In contrast to `userUnderlyingView`, this function **may** make state modifications\"},\"userUnderlyingView(address)\":{\"notice\":\"convenience function for fetching the current underlying value of all of the `user`'s shares in this pool. In contrast to `userUnderlying`, this function guarantees no state modifications\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Used to withdraw tokens from this Pool, to the `recipient`'s address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/PoolBaseTVLLimits.sol\":\"PoolBaseTVLLimits\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin-upgrades/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the BinLayer protocol\\n */\\nlibrary Errors {\\n  string public constant NOT_PAUSER = '1'; // 'msg.sender is not permissioned as pauser'\\n  string public constant NOT_UNPAUSER = '2'; // 'msg.sender is not permissioned as unpauser'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '3'; // 'zero address input'\\n  string public constant CONTRACT_PAUSED = '4'; // 'contract is paused'\\n  string public constant INDEX_PAUSED = '5'; // 'index is paused'\\n  string public constant INITIALIZE_ONCE = '6'; // '_initializePauser can only be called once'\\n  string public constant INVALID_UNPAUSE = '7'; // 'invalid attempt to unpause functionality'\\n  string public constant INVALID_PAUSE = '8'; // 'invalid attempt to pause functionality'\\n  string public constant NOT_POOL_WHITELISTER = '9'; // 'not the pool whitelister'\\n  string public constant POOL_NOT_WHITELISTED = '10'; // 'pool not whitelisted'\\n  string public constant NOT_DELEGATION_CONTROLLER = '11'; // 'not the DelegationController'\\n  string public constant THIRD_PARTY_TRANSFERS_DISABLED = '12'; // 'third transfers disabled'\\n  string public constant SIGNATURE_EXPIRED = '13'; // 'signature expired'\\n  string public constant ARRAY_LENGTH_MISMATCH = '14'; // 'array lengths do not match'\\n  string public constant ZERO_SHARES_NOT_VALID = '15'; // 'shares should not be zero!'\\n  string public constant DEPOSIT_EXCEEDS_MAX_LENGTH = '16'; // 'deposit would exceed MAX_STAKER_POOL_LIST_LENGTH'\\n  string public constant SHARE_AMOUNT_TOO_HIGH = '17'; // 'share amount too high'\\n  string public constant POOL_NOT_FOUND = '18'; // 'pool not found'\\n  string public constant ONLY_POOL_CONTROLLER = '19'; // 'caller must be PoolController'\\n  string public constant OPERATOR_ALREADY_REGISTERED = '20'; // 'operator has already registered'\\n  string public constant CALLER_NOT_OPERATOR = '21'; // 'caller must be an operator'\\n  string public constant STAKER_MUST_BE_DELEGATED = '22'; // 'staker must be delegated to undelegate'\\n  string public constant CANNOT_UNDELEGATE_OPERATOR = '23'; // 'operators cannot be undelegated'\\n  string public constant CALLER_CANNOT_UNDELEGATE = '24'; // 'caller cannot undelegate staker'\\n  string public constant INPUT_LENGTH_MISMATCH = '25'; // 'input length mismatch'\\n  string public constant WITHDRAWER_NOT_STAKER_OR_GATEWAY = '26'; // 'withdrawer must be staker or wrapped token gateway'\\n  string public constant OPT_OUT_WINDOW_EXCEEDS_MAX = '27'; // 'stakerOptOutWindow cannot be > MAX_STAKER_OPT_OUT_WINDOW'\\n  string public constant DECREASE_OPT_OUT_WINDOW = '28'; // 'stakerOptOutWindow cannot be decreased'\\n  string public constant ALREADY_DELEGATED = '29'; // 'staker is already actively delegated'\\n  string public constant NOT_REGISTERED_IN_BINLAYER = '30'; // 'operator is not registered in BinLayer'\\n  string public constant SALT_ALREADY_SPENT = '31'; // 'salt already spent'\\n  string public constant ACTION_NOT_IN_QUEUE = '32'; // 'action is not in queue'\\n  string public constant MIN_WITHDRAWAL_DELAY_NOT_PASSED = '33'; // 'minWithdrawalDelay period has not yet passed'\\n  string public constant ONLY_WITHDRAWER_CAN_COMPLETE = '34'; // 'only withdrawer can complete action'\\n  string public constant WITHDRAWAL_DELAY_NOT_PASSED = '35'; // 'withdrawalDelay period has not yet passed for this pool'\\n  string public constant POOLS_CANNOT_BE_EMPTY = '36'; // 'pools cannot be empty'\\n  string public constant THIRD_PARTY_TRANSFERS_FORBIDDEN = '37'; // 'withdrawer must be same address as staker if thirdPartyTransfersForbidden are set'\\n  string public constant MIN_WITHDRAWAL_DELAY_EXCEEDS_MAX = '38'; // '_minWithdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\\n  string public constant POOL_WITHDRAWAL_DELAY_EXCEEDS_MAX = '39'; // '_withdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\\n  string public constant WITHDRAWER_MUST_BE_STAKER = '40'; // 'withdrawer must be staker'\\n  string public constant ONLY_SUPPORT_WRAPPED_TOKEN_POOL = '41'; // 'only support wrapped token pool'\\n  string public constant WITHDRAW_AMOUNT_SHARES_TOO_HIGH = '42'; // 'amountShares must be less than or equal to totalShares'\\n  string public constant DEPOSIT_ONLY_UNDERLYING_TOKEN = '43'; // 'can only deposit underlying token'\\n  string public constant WITHDRAW_ONLY_UNDERLYING_TOKEN = '44'; // 'can only withdraw underlying token'\\n  string public constant MAX_DEPOSITS_EXCEEDED = '45'; // 'max deposits exceeded'\\n  string public constant MAX_PER_DEPOSIT_LIMIT_EXCEEDED = '46'; // 'max per deposit exceeded'\\n  string public constant MAX_PER_DEPOSIT_EXCEEDS_MAX_TOTAL = '47'; // 'maxPerDeposit exceeds maxTotalDeposits'\\n  string public constant CANNOT_CANCEL_SPENT_SALT = '48'; // 'cannot cancel spent salt'\\n  string public constant NOT_REWARDS_UPDATER = '49'; // 'caller is not the rewards updater'\\n  string public constant NOT_CREATE_REWARDS_FOR_ALL_SUBMITTER = '50'; // 'caller is not a valid create rewards for all submission submitter'\\n  string public constant NOT_CLAIMER = '51'; // 'caller is not valid claimer'\\n  string public constant CUMULATIVE_EARNINGS_MUST_BE_GREATER_THAN_CUMULATIVE_LAIMED = '52'; // 'cumulative earnings must be gt than cumulative claimed'\\n  string public constant NEW_ROOT_MUST_BE_NEWER_CALCULATED_PERIOD = '53'; // 'new root must be for newer calculated period'\\n  string public constant CANNOT_BE_IN_THE_FEATURE = '54'; // 'rewardsCalculationEndTimestamp cannot be in the future'\\n  string public constant INVALID_ROOT_INDEX = '55'; // 'invalid rootIndex'\\n  string public constant ROOT_ALREADY_DISABLED = '56'; // 'root already disabled'\\n  string public constant ROOT_ALREADY_ACTIVATED = '57'; // 'root already activated'\\n  string public constant NO_POOLS_SET = '58'; // 'no pools set'\\n  string public constant AMOUNT_CANNOT_BE_ZERO = '59'; // 'amount cannot be 0'\\n  string public constant AMOUNT_TOO_LARGE = '60'; // 'amount too large'\\n  string public constant DURATION_EXCEEDS_MAX_REWARDS_DURATION = '61'; // 'duration exceeds MAX_REWARDS_DURATION'\\n  string public constant DURATION_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS = '62'; // 'duration must be a multiple of CALCULATION_INTERVAL_SECONDS'\\n  string public constant STARTTIMESTAMP_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS = '63'; // 'startTimestamp must be a multiple of CALCULATION_INTERVAL_SECONDS'\\n  string public constant STARTTIMESTAMP_TOO_FAR_IN_THE_PAST = '64'; // 'startTimestamp too far in the past'\\n  string public constant STARTTIMESTAMP_TOO_FAR_IN_THE_FUTURE = '65'; // 'startTimestamp too far in the future'\\n  string public constant INVALID_POOL_CONSIDERED = '66'; // 'invalid pool considered'\\n  string public constant POOLS_MUST_BE_ASCENDING = '67'; // 'pools must be in ascending order to handle duplicates'\\n  string public constant ROOT_IS_DISABLED = '68'; // 'root is disabled'\\n  string public constant ROOT_NOT_ACTIVATED_YET = '69'; // 'root not activated yet'\\n  string public constant INVALID_TOKEN_LEAF_INDEX = '70'; // 'invalid token leaf index'\\n  string public constant INVALID_TOKEN_CLAIM_PROOF = '71'; // 'invalid token claim proof'\\n  string public constant INVALID_EARNER_LEAF_INDEX = '72'; // 'invalid earner leaf index'\\n  string public constant INVALID_EARNER_CLAIM_PROOF = '73'; // 'invalid earner claim proof'\\n  string public constant ROOT_NOT_FOUND = '74'; // 'root not found'\\n}\\n\",\"keccak256\":\"0xfea887ad75ed3527c319c8cec7c5de2cbfb7d10e5998eb3b860bb1b32cca8286\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IDelegationController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IPool.sol';\\nimport './ISignatureUtils.sol';\\nimport './IPoolController.sol';\\n\\n/**\\n * @title DelegationController\\n * @notice  This is the contract for delegation in BinLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in BinLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the PoolController.sol)\\n */\\ninterface IDelegationController is ISignatureUtils {\\n  // @notice Struct used for storing information about a single operator who has registered with BinLayer\\n  struct OperatorDetails {\\n    // @notice address to receive the rewards that the operator earns via serving applications built on BinLayer.\\n    address earningsReceiver;\\n    /**\\n     * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n     * @dev Signature verification follows these rules:\\n     * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n     * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n     * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n     */\\n    address delegationApprover;\\n    /**\\n     * @notice A minimum delay -- enforced between:\\n     * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n     * and\\n     * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n     * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n     * then they are only allowed to either increase this value or keep it the same.\\n     */\\n    uint32 stakerOptOutWindow;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n   * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n   */\\n  struct StakerDelegation {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the staker's nonce\\n    uint256 nonce;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n   * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n   */\\n  struct DelegationApproval {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the operator's provided salt\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * Struct type used to specify an withdraw. Rather than storing the entire struct, only a hash is stored.\\n   * In functions that operate on existing queued withdrawals -- e.g. withdraw`, the data is resubmitted and the hash of the submitted\\n   * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n   */\\n  struct Withdrawal {\\n    // The address that originated the Withdrawal\\n    address staker;\\n    // The address that the staker was delegated to at the time that the Withdrawal was created\\n    address delegatedTo;\\n    // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n    address withdrawer;\\n    // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n    uint256 nonce;\\n    // Block timestamp when the Withdrawal was created\\n    uint32 startTimestamp;\\n    // Array of pools that the Withdrawal contains\\n    IPool[] pools;\\n    // Array containing the amount of shares in each Pool in the `pools` array\\n    uint256[] shares;\\n  }\\n\\n  struct UnstakeParams {\\n    // Array of pools that the Unstake contains\\n    IPool[] pools;\\n    // Array containing the amount of shares in each Pool in the `pools` array\\n    uint256[] shares;\\n    // The address of the withdrawer\\n    address withdrawer;\\n  }\\n\\n  // @notice Emitted when a new operator registers in BinLayer and provides their OperatorDetails.\\n  event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\\n\\n  /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n  event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\\n\\n  /**\\n   * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n   */\\n  event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\\n\\n  /// @notice Emitted whenever an operator's shares are increased for a given pool. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesIncreased(address indexed operator, address staker, IPool pool, uint256 shares);\\n\\n  /// @notice Emitted whenever an operator's shares are decreased for a given pool. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesDecreased(address indexed operator, address staker, IPool pool, uint256 shares);\\n\\n  /// @notice Emitted when @param staker delegates to @param operator.\\n  event StakerDelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker undelegates from @param operator.\\n  event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n  event StakerForceUndelegated(address indexed staker, address indexed operator);\\n\\n  /**\\n   * @notice Emitted when a new withdrawal is queued.\\n   * @param withdrawalRoot Is the hash of the `withdrawal`.\\n   * @param withdrawal Is the withdrawal itself.\\n   */\\n  event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n  /// @notice Emitted when a queued withdrawal is completed\\n  event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n  /// @notice Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event MinWithdrawalDelaySet(uint256 previousValue, uint256 newValue);\\n\\n  /// @notice Emitted when the `poolWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event PoolWithdrawalDelaySet(IPool pool, uint256 previousValue, uint256 newValue);\\n\\n  event UpdateWrappedTokenGateway(address previousGateway, address currentGateway);\\n\\n  /**\\n   * @notice Registers the caller as an operator in BinLayer.\\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n   *\\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Updates an operator's stored `OperatorDetails`.\\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n   *\\n   * @dev The caller must have previously registered as an operator in BinLayer.\\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n   */\\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\\n\\n  /**\\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n   * @param metadataURI The URI for metadata associated with an operator\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Caller delegates their stake to an operator.\\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n   * @param approverSalt A unique single use value tied to an individual signature.\\n   * @dev The approverSignatureAndExpiry is used in the event that:\\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n   *                  AND\\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external;\\n\\n  /**\\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n   * @param staker The account delegating stake to an `operator` account\\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n   *\\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n   * is the `msg.sender`, then approval is assumed.\\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateToBySignature(\\n    address staker,\\n    address operator,\\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\\n    SignatureWithExpiry memory approverSignatureAndExpiry,\\n    bytes32 approverSalt\\n  ) external;\\n\\n  /**\\n   * @notice Undelegates the staker from the operator who they are delegated to.\\n   * @param staker The account to be undelegated.\\n   * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n   *\\n   * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n   * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n   * @dev Reverts if the `staker` is already undelegated.\\n   */\\n  function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\\n\\n  /**\\n   * Allows a staker to withdraw some shares. Withdrawn shares/pools are immediately removed\\n   * from the staker. If the staker is delegated, withdrawn shares/pools are also removed from\\n   * their operator.\\n   *\\n   * All withdrawn shares/pools are placed in a queue and can be fully withdrawn after a delay.\\n   */\\n  function unstakes(UnstakeParams[] calldata unstakeParams) external returns (bytes32[] memory);\\n\\n  /**\\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n   * @param withdrawal The Withdrawal to complete.\\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Pool in the `withdrawal.pools` array.\\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified pools themselves\\n   * and sent to the caller, through calls to `withdrawal.pools[i].withdraw`. If false, then the shares in the specified pools\\n   * will simply be transferred to the caller directly.\\n   * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n   * @dev beaconChainETHPool shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n   * any beaconChainETHPool shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n   * any other pools, which will be transferred to the withdrawer.\\n   */\\n  function withdraw(Withdrawal calldata withdrawal, IERC20[] calldata tokens, uint256 middlewareTimesIndex, bool receiveAsTokens) external;\\n\\n  /**\\n   * @notice Array-ified version of `withdraw`.\\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n   * @param withdrawals The Withdrawals to complete.\\n   * @param tokens Array of tokens for each Withdrawal. See `withdraw` for the usage of a single array.\\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `withdraw` for the usage of a single index.\\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `withdraw` for the usage of a single boolean.\\n   * @dev See `withdraw` for relevant dev tags\\n   */\\n  function withdraws(\\n    Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexes,\\n    bool[] calldata receiveAsTokens\\n  ) external;\\n\\n  /**\\n   * @notice Increases a staker's delegated share balance in a pool.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param pool The pool in which to increase the delegated shares.\\n   * @param shares The number of shares to increase.\\n   *\\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the PoolController.sol.\\n   */\\n  function increaseDelegatedShares(address staker, IPool pool, uint256 shares) external;\\n\\n  /**\\n   * @notice Decreases a staker's delegated share balance in a pool.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param pool The pool in which to decrease the delegated shares.\\n   * @param shares The number of shares to decrease.\\n   *\\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the PoolController.sol.\\n   */\\n  function decreaseDelegatedShares(address staker, IPool pool, uint256 shares) external;\\n\\n  /**\\n   * @notice returns the address of the operator that `staker` is delegated to.\\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n   */\\n  function delegatedTo(address staker) external view returns (address);\\n\\n  /**\\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\\n   */\\n  function operatorDetails(address operator) external view returns (OperatorDetails memory);\\n\\n  /*\\n   * @notice Returns the earnings receiver address for an operator\\n   */\\n  function earningsReceiver(address operator) external view returns (address);\\n\\n  /**\\n   * @notice Returns the delegationApprover account for an operator\\n   */\\n  function delegationApprover(address operator) external view returns (address);\\n\\n  /**\\n   * @notice Returns the stakerOptOutWindow for an operator\\n   */\\n  function stakerOptOutWindow(address operator) external view returns (uint256);\\n\\n  /**\\n   * @notice Given array of pools, returns array of shares for the operator\\n   */\\n  function getOperatorShares(address operator, IPool[] memory pools) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Given a list of pools, return the minimum cooldown that must pass to withdraw\\n   * from all the inputted pools. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\\n   * @param pools The pools to check withdrawal delays for\\n   */\\n  function getWithdrawalDelay(IPool[] calldata pools) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the total number of shares in `pool` that are delegated to `operator`.\\n   * @notice Mapping: operator => pool => total number of shares in the pool delegated to the operator.\\n   * @dev By design, the following invariant should hold for each Pool:\\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n   * = sum (delegateable shares of all stakers delegated to the operator)\\n   */\\n  function operatorShares(address operator, IPool pool) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n   */\\n  function isDelegated(address staker) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true is an operator has previously registered for delegation.\\n   */\\n  function isOperator(address operator) external view returns (bool);\\n\\n  /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n  function stakerNonce(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n   */\\n  function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   * Note that pools each have a separate withdrawal delay, which can be greater than this value. So the minimum cooldown that must pass\\n   * to withdraw a pool is MAX(minWithdrawalDelay, poolWithdrawalDelay[pool])\\n   */\\n  function minWithdrawalDelay() external view returns (uint256);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract per Pool for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   */\\n  function poolWithdrawalDelay(IPool pool) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n   * @param staker The signing staker\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n   * @param staker The signing staker\\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateStakerDelegationDigestHash(\\n    address staker,\\n    uint256 _stakerNonce,\\n    address operator,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n   * @param staker The account delegating their stake\\n   * @param operator The account receiving delegated stake\\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n   * @param approverSalt A unique and single use value associated with the approver signature.\\n   * @param expiry Time after which the approver's signature becomes invalid\\n   */\\n  function calculateDelegationApprovalDigestHash(\\n    address staker,\\n    address operator,\\n    address _delegationApprover,\\n    bytes32 approverSalt,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n  function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n  function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\\n   *\\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n   * for more detailed information please read EIP-712.\\n   */\\n  function domainSeparator() external view returns (bytes32);\\n\\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n  function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\\n\\n  /// @notice Returns the keccak256 hash of `withdrawal`.\\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5a86ac94cc7f8ca835da8f4e367cab6303c089da0f61cd685077dd55768b63d1\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '../interfaces/IPauserRegistry.sol';\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\n\\ninterface IPausable {\\n  /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\\n  event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\\n\\n  /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\\n  event Paused(address indexed account, uint256 newPausedStatus);\\n\\n  /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\\n  event Unpaused(address indexed account, uint256 newPausedStatus);\\n\\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n  function pauserRegistry() external view returns (IPauserRegistry);\\n\\n  /**\\n   * @notice This function is used to pause an BinLayer contract's functionality.\\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n   */\\n  function pause(uint256 newPausedStatus) external;\\n\\n  /**\\n   * @notice Alias for `pause(type(uint256).max)`.\\n   */\\n  function pauseAll() external;\\n\\n  /**\\n   * @notice This function is used to unpause an BinLayer contract's functionality.\\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n   */\\n  function unpause(uint256 newPausedStatus) external;\\n\\n  /// @notice Returns the current paused status as a uint256.\\n  function paused() external view returns (uint256);\\n\\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n  function paused(uint8 index) external view returns (bool);\\n\\n  /// @notice Allows the unpauser to set a new pauser registry\\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\\n}\\n\",\"keccak256\":\"0xf7d61224369ca117fb3601b8de530f800f1dc786ab91c678ab1ab41dc61b059a\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPauserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n */\\ninterface IPauserRegistry {\\n  event PauserStatusChanged(address pauser, bool canPause);\\n\\n  event UnpauserChanged(address previousUnpauser, address newUnpauser);\\n\\n  /// @notice Mapping of addresses to whether they hold the pauser role.\\n  function isPauser(address pauser) external view returns (bool);\\n\\n  /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n  function unpauser() external view returns (address);\\n}\\n\",\"keccak256\":\"0x55bbced6095c87669e298ee7818c4d1df93fb9988965009594fe8facb2065b46\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Minimal interface for an `Pool` contract.\\n * @notice Custom `Pool` implementations may expand extensively on this interface.\\n */\\ninterface IPool {\\n  /**\\n   * @notice Used to deposit tokens into this Pool\\n   * @param token is the ERC20 token being deposited\\n   * @param amount is the amount of token being deposited\\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\\n   * `depositIntoPool` function, and individual share balances are recorded in the poolController as well.\\n   * @return newShares is the number of new shares issued at the current exchange ratio.\\n   */\\n  function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @notice Used to withdraw tokens from this Pool, to the `recipient`'s address\\n   * @param recipient is the address to receive the withdrawn funds\\n   * @param token is the ERC20 token being transferred out\\n   * @param amountShares is the amount of shares being withdrawn\\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\\n   * other functions, and individual share balances are recorded in the poolController as well.\\n   */\\n  function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this pool. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n   */\\n  function userUnderlying(address user) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current total shares of `user` in this pool, by\\n   * querying the `poolController` contract\\n   */\\n  function shares(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this pool. In contrast to `userUnderlying`, this function guarantees no state modifications\\n   */\\n  function userUnderlyingView(address user) external view returns (uint256);\\n\\n  /// @notice The underlying token for shares in this Pool\\n  function underlyingToken() external view returns (IERC20);\\n\\n  /// @notice The total number of extant shares in this Pool\\n  function totalShares() external view returns (uint256);\\n\\n  /// @notice Returns either a brief string explaining the pool's goal & purpose, or a link to metadata that explains in more detail.\\n  function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9496d209cfff01787ee1a3f8a5b79638ff903d70ae121985185ac95c84bc1884\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPoolController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IPool.sol';\\nimport './ISlasher.sol';\\nimport './IDelegationController.sol';\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into BinLayer.\\n * @notice See the `PoolController` contract itself for implementation details.\\n */\\ninterface IPoolController {\\n  /**\\n   * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n   * @param staker Is the staker who is depositing funds into BinLayer.\\n   * @param pool Is the pool that `staker` has deposited into.\\n   * @param token Is the token that `staker` deposited.\\n   * @param shares Is the number of new shares `staker` has been granted in `pool`.\\n   */\\n  event Deposit(address staker, IERC20 token, IPool pool, uint256 shares);\\n\\n  /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a pool and value by the owner\\n  event UpdatedThirdPartyTransfersForbidden(IPool pool, bool value);\\n\\n  /// @notice Emitted when the `poolWhitelister` is changed\\n  event PoolWhitelisterChanged(address previousAddress, address newAddress);\\n\\n  /// @notice Emitted when a pool is added to the approved list of pools for deposit\\n  event PoolAddedToDepositWhitelist(IPool pool);\\n\\n  /// @notice Emitted when a pool is removed from the approved list of pools for deposit\\n  event PoolRemovedFromDepositWhitelist(IPool pool);\\n\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `msg.sender`\\n   * @param pool is the specified pool where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the pool by the staker\\n   * @return shares The amount of new shares in the `pool` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoPool(IPool pool, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `staker`\\n   * @param staker Staker address\\n   * @param pool is the specified pool where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the pool by the staker\\n   * @return shares The amount of new shares in the `pool` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoPoolWithStaker(address staker, IPool pool, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Used for depositing an asset into the specified pool with the resultant shares credited to `staker`,\\n   * who must sign off on the action.\\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n   * purely to help one address deposit 'for' another.\\n   * @param pool is the specified pool where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the pool by the staker\\n   * @param staker the staker that the deposited assets will be credited to\\n   * @param expiry the timestamp at which the signature expires\\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n   * following EIP-1271 if the `staker` is a contract\\n   * @return shares The amount of new shares in the `pool` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n   * targeting stakers who may be attempting to undelegate.\\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this pool\\n   *\\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy\\n   */\\n  function depositIntoPoolWithSignature(\\n    IPool pool,\\n    IERC20 token,\\n    uint256 amount,\\n    address staker,\\n    uint256 expiry,\\n    bytes memory signature\\n  ) external returns (uint256 shares);\\n\\n  /// @notice Used by the DelegationController.sol to remove a Staker's shares from a particular pool when entering the withdrawal queue\\n  function removeShares(address staker, IPool pool, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationController.sol to award a Staker some shares that have passed through the withdrawal queue\\n  function addShares(address staker, IERC20 token, IPool pool, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationController.sol to convert withdrawn shares to tokens and send them to a recipient\\n  function withdrawSharesAsTokens(address recipient, IPool pool, uint256 shares, IERC20 token) external;\\n\\n  /// @notice Returns the current shares of `user` in `pool`\\n  function stakerPoolShares(address user, IPool pool) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Get all details on the staker's deposits and corresponding shares\\n   * @return (staker's pools, shares in these pools)\\n   */\\n  function getDeposits(address staker) external view returns (IPool[] memory, uint256[] memory);\\n\\n  /// @notice Simple getter function that returns `stakerPoolList[staker].length`.\\n  function stakerPoolListLength(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Owner-only function that adds the provided Pools to the 'whitelist' of pools that stakers can deposit into\\n   * @param poolsToWhitelist Pools that will be added to the `poolIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each pool\\n   */\\n  function addPoolsToDepositWhitelist(IPool[] calldata poolsToWhitelist, bool[] calldata thirdPartyTransfersForbiddenValues) external;\\n\\n  /**\\n   * @notice Owner-only function that removes the provided Pools from the 'whitelist' of pools that stakers can deposit into\\n   * @param poolsToRemoveFromWhitelist Pools that will be removed to the `poolIsWhitelistedForDeposit` mapping (if they are in it)\\n   */\\n  function removePoolsFromDepositWhitelist(IPool[] calldata poolsToRemoveFromWhitelist) external;\\n\\n  /// @notice Returns the single, central Delegation contract of BinLayer\\n  function delegation() external view returns (IDelegationController);\\n\\n  /// @notice Returns the single, central Slasher contract of BinLayer\\n  function slasher() external view returns (ISlasher);\\n\\n  /// @notice Returns the address of the `poolWhitelister`\\n  function poolWhitelister() external view returns (address);\\n\\n  /// @notice Returns bool for whether or not `pool` is whitelisted for deposit\\n  function poolIsWhitelistedForDeposit(IPool pool) external view returns (bool);\\n\\n  /**\\n   * @notice Returns bool for whether or not `pool` enables credit transfers. i.e enabling\\n   * depositIntoPoolWithSignature calls or queueing withdrawals to a different address than the staker.\\n   */\\n  function thirdPartyTransfersForbidden(IPool pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2db650b42306ac72dc758828f01b962ff15c7b632b23dc7b60bd72806a01d206\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title The interface for common signature utilities.\\n */\\ninterface ISignatureUtils {\\n  // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithSaltAndExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the salt used to generate the signature\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n}\\n\",\"keccak256\":\"0xd2f901c14d08037588427527905fafbe1610b68a38d62c93925ea0f258f226a4\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISlasher.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IPoolController.sol';\\nimport './IDelegationController.sol';\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for BinLayer.\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n  // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n  struct MiddlewareTimes {\\n    // The update timestamp for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n    uint32 stalestUpdateTimestamp;\\n    // The latest 'serveUntilTimestamp' from all of the middleware that the operator is serving\\n    uint32 latestServeUntilTimestamp;\\n  }\\n\\n  // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n  struct MiddlewareDetails {\\n    // the timestamp at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n    uint32 registrationMayBeginAtTimestamp;\\n    // the timestamp before which the contract is allowed to slash the user\\n    uint32 contractCanSlashOperatorUntilTimestamp;\\n    // the timestamp at which the middleware's view of the operator's stake was most recently updated\\n    uint32 latestUpdateTimestamp;\\n  }\\n\\n  /// @notice Emitted when a middleware times is added to `operator`'s array.\\n  event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateTimestamp, uint32 latestServeUntilTimestamp);\\n\\n  /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n  event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n\\n  /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilTimestamp`.\\n  event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilTimestamp);\\n\\n  /**\\n   * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n   * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n   */\\n  event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\\n\\n  /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within BinLayer.\\n  event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n  /**\\n   * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n   * @dev Typically, this function must be called prior to registering for a middleware.\\n   */\\n  function optIntoSlashing(address contractAddress) external;\\n\\n  /**\\n   * @notice Used for 'slashing' a certain operator.\\n   * @param toBeFrozen The operator to be frozen.\\n   * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n   * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n   */\\n  function freezeOperator(address toBeFrozen) external;\\n\\n  /**\\n   * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n   * @dev Callable only by the contract owner (i.e. governance).\\n   */\\n  function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev adds the middleware's slashing contract to the operator's linked list\\n   */\\n  function recordFirstStakeUpdate(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n   *         to make sure the operator's stake at updateTimestamp is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param updateTimestamp the timestamp for which the stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at updateTimestamp is slashable\\n   * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n   * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n   *      but it is anticipated to be rare and not detrimental.\\n   */\\n  function recordStakeUpdate(address operator, uint32 updateTimestamp, uint32 serveUntilTimestamp, uint256 insertAfter) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n   * slash `operator` once `serveUntil` is reached\\n   */\\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /// @notice The PoolController.sol contract of BinLayer\\n  function poolController() external view returns (IPoolController);\\n\\n  /// @notice The DelegationController.sol contract of BinLayer\\n  function delegation() external view returns (IDelegationController);\\n\\n  /**\\n   * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n   * slashing of their funds, and cannot cannot deposit or withdraw from the poolController until the slashing process is completed\\n   * and the staker's status is reset (to 'unfrozen').\\n   * @param staker The staker of interest.\\n   * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n   * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n   */\\n  function isFrozen(address staker) external view returns (bool);\\n\\n  /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n  function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n  /// @notice Returns the timestamp until which `serviceContract` is allowed to slash the `operator`.\\n  function contractCanSlashOperatorUntilTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice Returns the timestamp at which the `serviceContract` last updated its view of the `operator`'s stake\\n  function latestUpdateTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n  function getCorrectValueForInsertAfter(address operator, uint32 updateTimestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartTimestamp`, with `middlewareTimesIndex` used\\n   * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n   * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n   * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartTimestamp`, *or* in the event\\n   * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n   * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n   * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartTimestamp`.\\n   * @param withdrawalStartTimestamp The timestamp at which the withdrawal was initiated.\\n   * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n   * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n   */\\n  function canWithdraw(address operator, uint32 withdrawalStartTimestamp, uint256 middlewareTimesIndex) external returns (bool);\\n\\n  /**\\n   * operator =>\\n   *  [\\n   *      (\\n   *          the least recent update timestamp of all of the middlewares it's serving/served,\\n   *          latest time that the stake bonded at that update needed to serve until\\n   *      )\\n   *  ]\\n   */\\n  function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) external view returns (MiddlewareTimes memory);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n  function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateTimestamp`.\\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n  function getMiddlewareTimesIndexServeUntilTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n  function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n  function operatorWhitelistedContractsLinkedListEntry(address operator, address node) external view returns (bool, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x09bceda8f8293b3bccc023a57f5c378c317e1b7c131a1dd48290848f53582f88\",\"license\":\"LGPL-3.0\"},\"contracts/permissions/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.20;\\n\\nimport '../interfaces/IPausable.sol';\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\ncontract Pausable is IPausable {\\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n  IPauserRegistry public pauserRegistry;\\n\\n  /// @dev whether or not the contract is currently paused\\n  uint256 private _paused;\\n\\n  uint256 internal constant UNPAUSE_ALL = 0;\\n  uint256 internal constant PAUSE_ALL = type(uint256).max;\\n\\n  /// @notice\\n  modifier onlyPauser() {\\n    require(pauserRegistry.isPauser(msg.sender), Errors.NOT_PAUSER);\\n    _;\\n  }\\n\\n  modifier onlyUnpauser() {\\n    require(msg.sender == pauserRegistry.unpauser(), Errors.NOT_UNPAUSER);\\n    _;\\n  }\\n\\n  /// @notice Throws if the contract is paused, i.e. if any of the bits in `_paused` is flipped to 1.\\n  modifier whenNotPaused() {\\n    require(_paused == 0, Errors.CONTRACT_PAUSED);\\n    _;\\n  }\\n\\n  /// @notice Throws if the `indexed`th bit of `_paused` is 1, i.e. if the `index`th pause switch is flipped.\\n  modifier onlyWhenNotPaused(uint8 index) {\\n    require(!paused(index), Errors.INDEX_PAUSED);\\n    _;\\n  }\\n\\n  /// @notice One-time function for setting the `pauserRegistry` and initializing the value of `_paused`.\\n  function _initializePauser(IPauserRegistry _pauserRegistry, uint256 initPausedStatus) internal {\\n    require(address(pauserRegistry) == address(0) && address(_pauserRegistry) != address(0), Errors.INITIALIZE_ONCE);\\n    _paused = initPausedStatus;\\n    emit Paused(msg.sender, initPausedStatus);\\n    _setPauserRegistry(_pauserRegistry);\\n  }\\n\\n  /**\\n   * @notice This function is used to pause an BinLayer contract's functionality.\\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n   */\\n  function pause(uint256 newPausedStatus) external onlyPauser {\\n    // verify that the `newPausedStatus` does not *unflip* any bits (i.e. doesn't unpause anything, all 1 bits remain)\\n    require((_paused & newPausedStatus) == _paused, Errors.INVALID_UNPAUSE);\\n    _paused = newPausedStatus;\\n    emit Paused(msg.sender, newPausedStatus);\\n  }\\n\\n  /**\\n   * @notice Alias for `pause(type(uint256).max)`.\\n   */\\n  function pauseAll() external onlyPauser {\\n    _paused = type(uint256).max;\\n    emit Paused(msg.sender, type(uint256).max);\\n  }\\n\\n  /**\\n   * @notice This function is used to unpause an BinLayer contract's functionality.\\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n   */\\n  function unpause(uint256 newPausedStatus) external onlyUnpauser {\\n    // verify that the `newPausedStatus` does not *flip* any bits (i.e. doesn't pause anything, all 0 bits remain)\\n    require(((~_paused) & (~newPausedStatus)) == (~_paused), Errors.INVALID_PAUSE);\\n    _paused = newPausedStatus;\\n    emit Unpaused(msg.sender, newPausedStatus);\\n  }\\n\\n  /// @notice Returns the current paused status as a uint256.\\n  function paused() public view virtual returns (uint256) {\\n    return _paused;\\n  }\\n\\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n  function paused(uint8 index) public view virtual returns (bool) {\\n    uint256 mask = 1 << index;\\n    return ((_paused & mask) == mask);\\n  }\\n\\n  /// @notice Allows the unpauser to set a new pauser registry\\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external onlyUnpauser {\\n    _setPauserRegistry(newPauserRegistry);\\n  }\\n\\n  /// internal function for setting pauser registry\\n  function _setPauserRegistry(IPauserRegistry newPauserRegistry) internal {\\n    require(address(newPauserRegistry) != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    emit PauserRegistrySet(pauserRegistry, newPauserRegistry);\\n    pauserRegistry = newPauserRegistry;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x810c626bb1906522ba88c8d745068024925029e141a21ca6701aec96384fcce2\",\"license\":\"LGPL-3.0\"},\"contracts/pools/PoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '../interfaces/IPoolController.sol';\\nimport '../permissions/Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\\n\\n/**\\n * @title Base implementation of `IPool` interface, designed to be inherited from by more complex strategies.\\n * @notice Simple, basic, \\\"do-nothing\\\" Pool that holds a single underlying token and returns it on withdrawals.\\n * Implements minimal versions of the IPool functions, this contract is designed to be inherited by\\n * more complex strategies, which can then override its functions as necessary.\\n * @dev Note that some functions have their mutability restricted; developers inheriting from this contract cannot broaden\\n * the mutability without modifying this contract itself.\\n * @dev This contract is expressly *not* intended for use with 'fee-on-transfer'-type tokens.\\n * Setting the `underlyingToken` to be a fee-on-transfer token may result in improper accounting.\\n * @notice This contract functions similarly to an ERC4626 vault, only without issuing a token.\\n * To mitigate against the common \\\"inflation attack\\\" vector, we have chosen to use the 'virtual shares' mitigation route,\\n * similar to [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC4626.sol).\\n * We acknowledge that this mitigation has the known downside of the virtual shares causing some losses to users, which are pronounced\\n * particularly in the case of the share exchange rate changing signficantly, either positively or negatively.\\n * For a fairly thorough discussion of this issue and our chosen mitigation pool, we recommend reading through\\n * [this thread](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706) on the OpenZeppelin repo.\\n * We specifically use a share offset of `SHARES_OFFSET` and a balance offset of `BALANCE_OFFSET`.\\n */\\ncontract PoolBase is Initializable, Pausable, IPool {\\n  using SafeERC20 for IERC20;\\n\\n  uint8 internal constant PAUSED_DEPOSITS = 0;\\n  uint8 internal constant PAUSED_WITHDRAWALS = 1;\\n\\n  /**\\n   * @notice virtual shares used as part of the mitigation of the common 'share inflation' attack vector.\\n   * Constant value chosen to reasonably reduce attempted share inflation by the first depositor, while still\\n   * incurring reasonably small losses to depositors\\n   */\\n  uint256 internal constant SHARES_OFFSET = 1e3;\\n  /**\\n   * @notice virtual balance used as part of the mitigation of the common 'share inflation' attack vector\\n   * Constant value chosen to reasonably reduce attempted share inflation by the first depositor, while still\\n   * incurring reasonably small losses to depositors\\n   */\\n  uint256 internal constant BALANCE_OFFSET = 1e3;\\n\\n  /// @notice BinLayer's PoolController.sol contract\\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n  IPoolController public immutable poolController;\\n\\n  /// @notice The underlying token for shares in this Pool\\n  IERC20 public underlyingToken;\\n\\n  /// @notice The total number of extant shares in this Pool\\n  uint256 public totalShares;\\n\\n  /// @notice Simply checks that the `msg.sender` is the `poolController`, which is an address stored immutably at construction.\\n  modifier onlyPoolController() {\\n    require(msg.sender == address(poolController), Errors.ONLY_POOL_CONTROLLER);\\n    _;\\n  }\\n\\n  /// @notice Since this contract is designed to be initializable, the constructor simply sets `poolController`, the only immutable variable.\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor(IPoolController _poolController) {\\n    poolController = _poolController;\\n    _disableInitializers();\\n  }\\n\\n  function initializeBase(IERC20 _underlyingToken, IPauserRegistry _pauserRegistry) public virtual initializer {\\n    _initializePoolBase(_underlyingToken, _pauserRegistry);\\n  }\\n\\n  /// @notice Sets the `underlyingToken` and `pauserRegistry` for the pool.\\n  function _initializePoolBase(IERC20 _underlyingToken, IPauserRegistry _pauserRegistry) internal onlyInitializing {\\n    underlyingToken = _underlyingToken;\\n    _initializePauser(_pauserRegistry, UNPAUSE_ALL);\\n  }\\n\\n  /**\\n   * @notice Used to deposit tokens into this Pool\\n   * @param token is the ERC20 token being deposited\\n   * @param amount is the amount of token being deposited\\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\\n   * `depositIntoPool` function, and individual share balances are recorded in the poolController as well.\\n   * @dev Note that the assumption is made that `amount` of `token` has already been transferred directly to this contract\\n   * (as performed in the PoolController.sol's deposit functions). In particular, setting the `underlyingToken` of this contract\\n   * to be a fee-on-transfer token will break the assumption that the amount this contract *received* of the token is equal to\\n   * the amount that was input when the transfer was performed (i.e. the amount transferred 'out' of the depositor's balance).\\n   * @dev Note that any validation of `token` is done inside `_beforeDeposit`. This can be overridden if needed.\\n   * @return newShares is the number of new shares issued at the current exchange ratio.\\n   */\\n  function deposit(\\n    IERC20 token,\\n    uint256 amount\\n  ) external virtual override onlyWhenNotPaused(PAUSED_DEPOSITS) onlyPoolController returns (uint256 newShares) {\\n    // call hook to allow for any pre-deposit logic\\n    _beforeDeposit(token, amount);\\n\\n    // copy `totalShares` value to memory, prior to any change\\n    uint256 priorTotalShares = totalShares;\\n\\n    /**\\n     * @notice calculation of newShares *mirrors* `underlyingToShares(amount)`, but is different since the balance of `underlyingToken`\\n     * has already been increased due to the `poolController` transferring tokens to this pool prior to calling this function\\n     */\\n    // account for virtual shares and balance\\n    uint256 virtualShareAmount = priorTotalShares + SHARES_OFFSET;\\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\\n    // calculate the prior virtual balance to account for the tokens that were already transferred to this contract\\n    uint256 virtualPriorTokenBalance = virtualTokenBalance - amount;\\n    newShares = (amount * virtualShareAmount) / virtualPriorTokenBalance;\\n\\n    // extra check for correctness / against edge case where share rate can be massively inflated as a 'griefing' sort of attack\\n    require(newShares != 0, Errors.ZERO_SHARES_NOT_VALID);\\n\\n    // update total share amount to account for deposit\\n    totalShares = (priorTotalShares + newShares);\\n    return newShares;\\n  }\\n\\n  /**\\n   * @notice Used to withdraw tokens from this Pool, to the `recipient`'s address\\n   * @param recipient is the address to receive the withdrawn funds\\n   * @param token is the ERC20 token being transferred out\\n   * @param amountShares is the amount of shares being withdrawn\\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\\n   * other functions, and individual share balances are recorded in the poolController as well.\\n   * @dev Note that any validation of `token` is done inside `_beforeWithdrawal`. This can be overridden if needed.\\n   */\\n  function withdraw(\\n    address recipient,\\n    IERC20 token,\\n    uint256 amountShares\\n  ) external virtual override onlyWhenNotPaused(PAUSED_WITHDRAWALS) onlyPoolController {\\n    // call hook to allow for any pre-withdrawal logic\\n    _beforeWithdrawal(recipient, token, amountShares);\\n\\n    // copy `totalShares` value to memory, prior to any change\\n    uint256 priorTotalShares = totalShares;\\n\\n    require(amountShares <= priorTotalShares, Errors.WITHDRAW_AMOUNT_SHARES_TOO_HIGH);\\n\\n    // account for virtual shares and balance\\n    uint256 virtualPriorTotalShares = priorTotalShares + SHARES_OFFSET;\\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\\n    uint256 amountToSend = (virtualTokenBalance * amountShares) / virtualPriorTotalShares;\\n\\n    // Decrease the `totalShares` value to reflect the withdrawal\\n    totalShares = priorTotalShares - amountShares;\\n\\n    _afterWithdrawal(recipient, token, amountToSend);\\n  }\\n\\n  /**\\n   * @notice Called in the external `deposit` function, before any logic is executed. Expected to be overridden if strategies want such logic.\\n   * @param token The token being deposited\\n   * @param amount The amount of `token` being deposited\\n   */\\n  function _beforeDeposit(IERC20 token, uint256 amount) internal virtual {\\n    require(token == underlyingToken, Errors.DEPOSIT_ONLY_UNDERLYING_TOKEN);\\n  }\\n\\n  /**\\n   * @notice Called in the external `withdraw` function, before any logic is executed.  Expected to be overridden if strategies want such logic.\\n   * @param recipient The address that will receive the withdrawn tokens\\n   * @param token The token being withdrawn\\n   * @param amountShares The amount of shares being withdrawn\\n   */\\n  function _beforeWithdrawal(address recipient, IERC20 token, uint256 amountShares) internal virtual {\\n    require(token == underlyingToken, Errors.WITHDRAW_ONLY_UNDERLYING_TOKEN);\\n  }\\n\\n  /**\\n   * @notice Transfers tokens to the recipient after a withdrawal is processed\\n   * @dev Called in the external `withdraw` function after all logic is executed\\n   * @param recipient The destination of the tokens\\n   * @param token The ERC20 being transferred\\n   * @param amountToSend The amount of `token` to transfer\\n   */\\n  function _afterWithdrawal(address recipient, IERC20 token, uint256 amountToSend) internal virtual {\\n    token.safeTransfer(recipient, amountToSend);\\n  }\\n\\n  /**\\n   * @notice Currently returns a brief string explaining the pool's goal & purpose, but for more complex\\n   * strategies, may be a link to metadata that explains in more detail.\\n   */\\n  function explanation() external pure virtual override returns (string memory) {\\n    return 'Base Pool implementation to inherit from for more complex implementations';\\n  }\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlyingView(uint256 amountShares) public view virtual override returns (uint256) {\\n    // account for virtual shares and balance\\n    uint256 virtualTotalShares = totalShares + SHARES_OFFSET;\\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\\n    return (virtualTokenBalance * amountShares) / virtualTotalShares;\\n  }\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlying(uint256 amountShares) public view virtual override returns (uint256) {\\n    return sharesToUnderlyingView(amountShares);\\n  }\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToSharesView(uint256 amountUnderlying) public view virtual returns (uint256) {\\n    // account for virtual shares and balance\\n    uint256 virtualTotalShares = totalShares + SHARES_OFFSET;\\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\\n    return (amountUnderlying * virtualTotalShares) / virtualTokenBalance;\\n  }\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToShares(uint256 amountUnderlying) external view virtual returns (uint256) {\\n    return underlyingToSharesView(amountUnderlying);\\n  }\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this pool. In contrast to `userUnderlying`, this function guarantees no state modifications\\n   */\\n  function userUnderlyingView(address user) external view virtual returns (uint256) {\\n    return sharesToUnderlyingView(shares(user));\\n  }\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this pool. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n   */\\n  function userUnderlying(address user) external virtual returns (uint256) {\\n    return sharesToUnderlying(shares(user));\\n  }\\n\\n  /**\\n   * @notice convenience function for fetching the current total shares of `user` in this pool, by\\n   * querying the `poolController` contract\\n   */\\n  function shares(address user) public view virtual returns (uint256) {\\n    return poolController.stakerPoolShares(user, IPool(address(this)));\\n  }\\n\\n  /// @notice Internal function used to fetch this contract's current balance of `underlyingToken`.\\n  // slither-disable-next-line dead-code\\n  function _tokenBalance() internal view virtual returns (uint256) {\\n    return underlyingToken.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xadf4a4c878840b340629d810bd9b42c20bd64339273b08b5451bd0645a3d2b03\",\"license\":\"LGPL-3.0\"},\"contracts/pools/PoolBaseTVLLimits.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './PoolBase.sol';\\n\\n/**\\n * @title A Pool implementation inheriting from `PoolBase.sol` that limits the total amount of deposits it will accept.\\n * @dev Note that this implementation still converts between any amount of shares or underlying tokens in its view functions;\\n * these functions purposefully do not take the TVL limit into account.\\n */\\ncontract PoolBaseTVLLimits is PoolBase {\\n  /// The maximum deposit (in underlyingToken) that this pool will accept per deposit\\n  uint256 public maxPerDeposit;\\n\\n  /// The maximum deposits (in underlyingToken) that this pool will hold\\n  uint256 public maxTotalDeposits;\\n\\n  /// @notice Emitted when `maxPerDeposit` value is updated from `previousValue` to `newValue`\\n  event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue);\\n\\n  /// @notice Emitted when `maxTotalDeposits` value is updated from `previousValue` to `newValue`\\n  event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue);\\n\\n  /// solhint-disable-next-line no-empty-blocks\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor(IPoolController _poolController) PoolBase(_poolController) {}\\n\\n  function initialize(\\n    uint256 _maxPerDeposit,\\n    uint256 _maxTotalDeposits,\\n    IERC20 _underlyingToken,\\n    IPauserRegistry _pauserRegistry\\n  ) public virtual initializer {\\n    _setTVLLimits(_maxPerDeposit, _maxTotalDeposits);\\n    _initializePoolBase(_underlyingToken, _pauserRegistry);\\n  }\\n\\n  /**\\n   * @notice Sets the maximum deposits (in underlyingToken) that this pool will hold and accept per deposit\\n   * @param newMaxTotalDeposits The new maximum deposits\\n   * @dev Callable only by the unpauser of this contract\\n   * @dev We note that there is a potential race condition between a call to this function that lowers either or both of these limits and call(s)\\n   * to `deposit`, that may result in some calls to `deposit` reverting.\\n   */\\n  function setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) external onlyUnpauser {\\n    _setTVLLimits(newMaxPerDeposit, newMaxTotalDeposits);\\n  }\\n\\n  /// @notice Simple getter function that returns the current values of `maxPerDeposit` and `maxTotalDeposits`.\\n  function getTVLLimits() external view returns (uint256, uint256) {\\n    return (maxPerDeposit, maxTotalDeposits);\\n  }\\n\\n  /// @notice Internal setter for TVL limits\\n  function _setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) internal {\\n    emit MaxPerDepositUpdated(maxPerDeposit, newMaxPerDeposit);\\n    emit MaxTotalDepositsUpdated(maxTotalDeposits, newMaxTotalDeposits);\\n    require(newMaxPerDeposit <= newMaxTotalDeposits, Errors.MAX_PER_DEPOSIT_EXCEEDS_MAX_TOTAL);\\n    maxPerDeposit = newMaxPerDeposit;\\n    maxTotalDeposits = newMaxTotalDeposits;\\n  }\\n\\n  /**\\n   * @notice Called in the external `deposit` function, before any logic is executed. Makes sure that deposits don't exceed configured maximum.\\n   * @dev Unused token param is the token being deposited. This is already checked in the `deposit` function.\\n   * @dev Note that the `maxTotalDeposits` is purely checked against the current `_tokenBalance()`, since by this point in the deposit flow, the\\n   * tokens should have already been transferred to this Pool by the PoolController.sol\\n   * @dev We note as well that this makes it possible for various race conditions to occur:\\n   * a) multiple simultaneous calls to `deposit` may result in some of these calls reverting due to `maxTotalDeposits` being reached.\\n   * b) transferring funds directly to this Pool (although not generally in someone's economic self interest) in order to reach `maxTotalDeposits`\\n   * is a route by which someone can cause calls to `deposit` to revert.\\n   * c) increases in the token balance of this contract through other effects \\u2013 including token rebasing \\u2013 may cause similar issues to (a) and (b).\\n   * @param amount The amount of `token` being deposited\\n   */\\n  function _beforeDeposit(IERC20 token, uint256 amount) internal virtual override {\\n    require(amount <= maxPerDeposit, Errors.MAX_PER_DEPOSIT_LIMIT_EXCEEDED);\\n    require(_tokenBalance() <= maxTotalDeposits, Errors.MAX_DEPOSITS_EXCEEDED);\\n\\n    super._beforeDeposit(token, amount);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8c2ae3763a35c5123b8560835642ec27f56a825f3606d8a11ab2c7f5109d24cc\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001c5f38038062001c5f833981016040819052620000349162000115565b6001600160a01b038116608052806200004c62000054565b505062000147565b600054610100900460ff1615620000c15760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000113576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012857600080fd5b81516001600160a01b03811681146200014057600080fd5b9392505050565b608051611ae762000178600039600081816102690152818161085701528181610c430152610d180152611ae76000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806361b01b5d116100ee578063c4e01fa411610097578063df6fadc111610071578063df6fadc114610386578063e3dae51c146103a1578063f3e73875146103b4578063fabc1cbc146103c757600080fd5b8063c4e01fa41461034d578063ce7c2ac214610360578063d9caed121461037357600080fd5b80638c871019116100c85780638c871019146103125780638f6a624014610325578063ab5921e11461033857600080fd5b806361b01b5d146102dd5780637a8b2637146102e6578063886f1195146102f957600080fd5b806343fe08b01161015b578063553ca5f811610135578063553ca5f81461028b578063595c6a671461029e5780635ac86ab7146102a65780635c975abb146102d557600080fd5b806343fe08b01461024857806347e7ef24146102515780634aa9d5851461026457600080fd5b8063136439dd1161018c578063136439dd146101ee5780632495a599146102015780633a98ef391461023157600080fd5b8063019e2729146101b357806310d67a2f146101c857806311c70c9d146101db575b600080fd5b6101c66101c13660046117b6565b6103da565b005b6101c66101d6366004611800565b61050f565b6101c66101e9366004611824565b6105df565b6101c66101fc366004611846565b6106b1565b603354610214906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61023a60345481565b604051908152602001610228565b61023a60665481565b61023a61025f36600461185f565b6107f2565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b61023a610299366004611800565b61095d565b6101c6610971565b6102c56102b436600461188b565b6001805460ff9092161b9081161490565b6040519015158152602001610228565b60015461023a565b61023a60675481565b61023a6102f4366004611846565b610a5a565b600054610214906201000090046001600160a01b031681565b61023a610320366004611846565b610aa5565b61023a610333366004611800565b610ab0565b610340610abe565b60405161022891906118d2565b6101c661035b366004611905565b610ade565b61023a61036e366004611800565b610c02565b6101c661038136600461193e565b610cb0565b60665460675460408051928352602083019190915201610228565b61023a6103af366004611846565b610e1f565b61023a6103c2366004611846565b610e58565b6101c66103d5366004611846565b610e63565b600054610100900460ff16158080156103fa5750600054600160ff909116105b806104145750303b158015610414575060005460ff166001145b61048b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156104ae576000805461ff0019166101001790555b6104b88585610fbf565b6104c28383611098565b8015610508576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610586919061197f565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b815250906105d25760405162461bcd60e51b815260040161048291906118d2565b506105dc81611153565b50565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610656919061197f565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b815250906106a25760405162461bcd60e51b815260040161048291906118d2565b506106ad8282610fbf565b5050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610722919061199c565b604051806040016040528060018152602001603160f81b8152509061075a5760405162461bcd60e51b815260040161048291906118d2565b5060018054604080518082019091529182527f37000000000000000000000000000000000000000000000000000000000000006020830152828116146107b35760405162461bcd60e51b815260040161048291906118d2565b50600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b6001805460408051808201909152828152603560f81b602082015260009283928116036108325760405162461bcd60e51b815260040161048291906118d2565b50604080518082019091526002815261313960f01b6020820152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108955760405162461bcd60e51b815260040161048291906118d2565b506108a0848461123c565b60345460006108b16103e8836119d4565b905060006103e86108c0611303565b6108ca91906119d4565b905060006108d887836119e7565b9050806108e584896119fa565b6108ef9190611a11565b60408051808201909152600281527f31350000000000000000000000000000000000000000000000000000000000006020820152909650866109445760405162461bcd60e51b815260040161048291906118d2565b5061094f86856119d4565b603455505050505092915050565b600061096b6102f483610c02565b92915050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa1580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e2919061199c565b604051806040016040528060018152602001603160f81b81525090610a1a5760405162461bcd60e51b815260040161048291906118d2565b50600019600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6000806103e8603454610a6d91906119d4565b905060006103e8610a7c611303565b610a8691906119d4565b905081610a9385836119fa565b610a9d9190611a11565b949350505050565b600061096b82610e1f565b600061096b6103c283610c02565b6060604051806080016040528060498152602001611a6960499139905090565b600054610100900460ff1615808015610afe5750600054600160ff909116105b80610b185750303b158015610b18575060005460ff166001145b610b8a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610482565b6000805460ff191660011790558015610bad576000805461ff0019166101001790555b610bb78383611098565b8015610bfd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6040517fb6230d5f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b6230d5f90604401602060405180830381865afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190611a33565b6001805460029081161415604051806040016040528060018152602001603560f81b81525090610cf35760405162461bcd60e51b815260040161048291906118d2565b50604080518082019091526002815261313960f01b6020820152336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d565760405162461bcd60e51b815260040161048291906118d2565b50610d6284848461138e565b60345460408051808201909152600281527f3432000000000000000000000000000000000000000000000000000000000000602082015281841115610dba5760405162461bcd60e51b815260040161048291906118d2565b506000610dc96103e8836119d4565b905060006103e8610dd8611303565b610de291906119d4565b9050600082610df187846119fa565b610dfb9190611a11565b9050610e0786856119e7565b603455610e158888836113f7565b5050505050505050565b6000806103e8603454610e3291906119d4565b905060006103e8610e41611303565b610e4b91906119d4565b905080610a9383866119fa565b600061096b82610a5a565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda919061197f565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b81525090610f265760405162461bcd60e51b815260040161048291906118d2565b506001541981196001541916146040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525090610f875760405162461bcd60e51b815260040161048291906118d2565b50600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c906020016107e7565b60665460408051918252602082018490527ff97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5910160405180910390a160675460408051918252602082018390527f6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452910160405180910390a160408051808201909152600281527f343700000000000000000000000000000000000000000000000000000000000060208201528183111561108c5760405162461bcd60e51b815260040161048291906118d2565b50606691909155606755565b600054610100900460ff166111155760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610482565b603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556106ad81600061140b565b60408051808201909152600181527f330000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b0382166111ae5760405162461bcd60e51b815260040161048291906118d2565b50600054604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6066548111156040518060400160405280600281526020017f3436000000000000000000000000000000000000000000000000000000000000815250906112965760405162461bcd60e51b815260040161048291906118d2565b506067546112a2611303565b11156040518060400160405280600281526020017f3435000000000000000000000000000000000000000000000000000000000000815250906112f85760405162461bcd60e51b815260040161048291906118d2565b506106ad82826114ca565b6033546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113899190611a33565b905090565b60335460408051808201909152600281527f34340000000000000000000000000000000000000000000000000000000000006020820152906001600160a01b038481169116146113f15760405162461bcd60e51b815260040161048291906118d2565b50505050565b610bfd6001600160a01b038316848361152d565b6000546201000090046001600160a01b031615801561143257506001600160a01b03821615155b6040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250906114865760405162461bcd60e51b815260040161048291906118d2565b50600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a26106ad82611153565b60335460408051808201909152600281527f34330000000000000000000000000000000000000000000000000000000000006020820152906001600160a01b03848116911614610bfd5760405162461bcd60e51b815260040161048291906118d2565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610bfd928692916000916115eb91851690849061167e565b905080516000148061160c57508080602001905181019061160c919061199c565b610bfd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610482565b6060610a9d848460008585600080866001600160a01b031685876040516116a59190611a4c565b60006040518083038185875af1925050503d80600081146116e2576040519150601f19603f3d011682016040523d82523d6000602084013e6116e7565b606091505b50915091506116f887838387611703565b979650505050505050565b6060831561177257825160000361176b576001600160a01b0385163b61176b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610482565b5081610a9d565b610a9d83838151156117875781518083602001fd5b8060405162461bcd60e51b815260040161048291906118d2565b6001600160a01b03811681146105dc57600080fd5b600080600080608085870312156117cc57600080fd5b843593506020850135925060408501356117e5816117a1565b915060608501356117f5816117a1565b939692955090935050565b60006020828403121561181257600080fd5b813561181d816117a1565b9392505050565b6000806040838503121561183757600080fd5b50508035926020909101359150565b60006020828403121561185857600080fd5b5035919050565b6000806040838503121561187257600080fd5b823561187d816117a1565b946020939093013593505050565b60006020828403121561189d57600080fd5b813560ff8116811461181d57600080fd5b60005b838110156118c95781810151838201526020016118b1565b50506000910152565b60208152600082518060208401526118f18160408501602087016118ae565b601f01601f19169190910160400192915050565b6000806040838503121561191857600080fd5b8235611923816117a1565b91506020830135611933816117a1565b809150509250929050565b60008060006060848603121561195357600080fd5b833561195e816117a1565b9250602084013561196e816117a1565b929592945050506040919091013590565b60006020828403121561199157600080fd5b815161181d816117a1565b6000602082840312156119ae57600080fd5b8151801515811461181d57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561096b5761096b6119be565b8181038181111561096b5761096b6119be565b808202811582820484141761096b5761096b6119be565b600082611a2e57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611a4557600080fd5b5051919050565b60008251611a5e8184602087016118ae565b919091019291505056fe4261736520506f6f6c20696d706c656d656e746174696f6e20746f20696e68657269742066726f6d20666f72206d6f726520636f6d706c657820696d706c656d656e746174696f6e73a2646970667358221220147a65d09624cfca43eff813e8130a9d47ffef563e0d37fabbd277997989e6a364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806361b01b5d116100ee578063c4e01fa411610097578063df6fadc111610071578063df6fadc114610386578063e3dae51c146103a1578063f3e73875146103b4578063fabc1cbc146103c757600080fd5b8063c4e01fa41461034d578063ce7c2ac214610360578063d9caed121461037357600080fd5b80638c871019116100c85780638c871019146103125780638f6a624014610325578063ab5921e11461033857600080fd5b806361b01b5d146102dd5780637a8b2637146102e6578063886f1195146102f957600080fd5b806343fe08b01161015b578063553ca5f811610135578063553ca5f81461028b578063595c6a671461029e5780635ac86ab7146102a65780635c975abb146102d557600080fd5b806343fe08b01461024857806347e7ef24146102515780634aa9d5851461026457600080fd5b8063136439dd1161018c578063136439dd146101ee5780632495a599146102015780633a98ef391461023157600080fd5b8063019e2729146101b357806310d67a2f146101c857806311c70c9d146101db575b600080fd5b6101c66101c13660046117b6565b6103da565b005b6101c66101d6366004611800565b61050f565b6101c66101e9366004611824565b6105df565b6101c66101fc366004611846565b6106b1565b603354610214906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61023a60345481565b604051908152602001610228565b61023a60665481565b61023a61025f36600461185f565b6107f2565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b61023a610299366004611800565b61095d565b6101c6610971565b6102c56102b436600461188b565b6001805460ff9092161b9081161490565b6040519015158152602001610228565b60015461023a565b61023a60675481565b61023a6102f4366004611846565b610a5a565b600054610214906201000090046001600160a01b031681565b61023a610320366004611846565b610aa5565b61023a610333366004611800565b610ab0565b610340610abe565b60405161022891906118d2565b6101c661035b366004611905565b610ade565b61023a61036e366004611800565b610c02565b6101c661038136600461193e565b610cb0565b60665460675460408051928352602083019190915201610228565b61023a6103af366004611846565b610e1f565b61023a6103c2366004611846565b610e58565b6101c66103d5366004611846565b610e63565b600054610100900460ff16158080156103fa5750600054600160ff909116105b806104145750303b158015610414575060005460ff166001145b61048b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156104ae576000805461ff0019166101001790555b6104b88585610fbf565b6104c28383611098565b8015610508576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610586919061197f565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b815250906105d25760405162461bcd60e51b815260040161048291906118d2565b506105dc81611153565b50565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610656919061197f565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b815250906106a25760405162461bcd60e51b815260040161048291906118d2565b506106ad8282610fbf565b5050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610722919061199c565b604051806040016040528060018152602001603160f81b8152509061075a5760405162461bcd60e51b815260040161048291906118d2565b5060018054604080518082019091529182527f37000000000000000000000000000000000000000000000000000000000000006020830152828116146107b35760405162461bcd60e51b815260040161048291906118d2565b50600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b6001805460408051808201909152828152603560f81b602082015260009283928116036108325760405162461bcd60e51b815260040161048291906118d2565b50604080518082019091526002815261313960f01b6020820152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108955760405162461bcd60e51b815260040161048291906118d2565b506108a0848461123c565b60345460006108b16103e8836119d4565b905060006103e86108c0611303565b6108ca91906119d4565b905060006108d887836119e7565b9050806108e584896119fa565b6108ef9190611a11565b60408051808201909152600281527f31350000000000000000000000000000000000000000000000000000000000006020820152909650866109445760405162461bcd60e51b815260040161048291906118d2565b5061094f86856119d4565b603455505050505092915050565b600061096b6102f483610c02565b92915050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa1580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e2919061199c565b604051806040016040528060018152602001603160f81b81525090610a1a5760405162461bcd60e51b815260040161048291906118d2565b50600019600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6000806103e8603454610a6d91906119d4565b905060006103e8610a7c611303565b610a8691906119d4565b905081610a9385836119fa565b610a9d9190611a11565b949350505050565b600061096b82610e1f565b600061096b6103c283610c02565b6060604051806080016040528060498152602001611a6960499139905090565b600054610100900460ff1615808015610afe5750600054600160ff909116105b80610b185750303b158015610b18575060005460ff166001145b610b8a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610482565b6000805460ff191660011790558015610bad576000805461ff0019166101001790555b610bb78383611098565b8015610bfd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6040517fb6230d5f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b6230d5f90604401602060405180830381865afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190611a33565b6001805460029081161415604051806040016040528060018152602001603560f81b81525090610cf35760405162461bcd60e51b815260040161048291906118d2565b50604080518082019091526002815261313960f01b6020820152336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d565760405162461bcd60e51b815260040161048291906118d2565b50610d6284848461138e565b60345460408051808201909152600281527f3432000000000000000000000000000000000000000000000000000000000000602082015281841115610dba5760405162461bcd60e51b815260040161048291906118d2565b506000610dc96103e8836119d4565b905060006103e8610dd8611303565b610de291906119d4565b9050600082610df187846119fa565b610dfb9190611a11565b9050610e0786856119e7565b603455610e158888836113f7565b5050505050505050565b6000806103e8603454610e3291906119d4565b905060006103e8610e41611303565b610e4b91906119d4565b905080610a9383866119fa565b600061096b82610a5a565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda919061197f565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b81525090610f265760405162461bcd60e51b815260040161048291906118d2565b506001541981196001541916146040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525090610f875760405162461bcd60e51b815260040161048291906118d2565b50600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c906020016107e7565b60665460408051918252602082018490527ff97ed4e083acac67830025ecbc756d8fe847cdbdca4cee3fe1e128e98b54ecb5910160405180910390a160675460408051918252602082018390527f6ab181e0440bfbf4bacdf2e99674735ce6638005490688c5f994f5399353e452910160405180910390a160408051808201909152600281527f343700000000000000000000000000000000000000000000000000000000000060208201528183111561108c5760405162461bcd60e51b815260040161048291906118d2565b50606691909155606755565b600054610100900460ff166111155760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610482565b603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556106ad81600061140b565b60408051808201909152600181527f330000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b0382166111ae5760405162461bcd60e51b815260040161048291906118d2565b50600054604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6066548111156040518060400160405280600281526020017f3436000000000000000000000000000000000000000000000000000000000000815250906112965760405162461bcd60e51b815260040161048291906118d2565b506067546112a2611303565b11156040518060400160405280600281526020017f3435000000000000000000000000000000000000000000000000000000000000815250906112f85760405162461bcd60e51b815260040161048291906118d2565b506106ad82826114ca565b6033546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113899190611a33565b905090565b60335460408051808201909152600281527f34340000000000000000000000000000000000000000000000000000000000006020820152906001600160a01b038481169116146113f15760405162461bcd60e51b815260040161048291906118d2565b50505050565b610bfd6001600160a01b038316848361152d565b6000546201000090046001600160a01b031615801561143257506001600160a01b03821615155b6040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250906114865760405162461bcd60e51b815260040161048291906118d2565b50600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a26106ad82611153565b60335460408051808201909152600281527f34330000000000000000000000000000000000000000000000000000000000006020820152906001600160a01b03848116911614610bfd5760405162461bcd60e51b815260040161048291906118d2565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610bfd928692916000916115eb91851690849061167e565b905080516000148061160c57508080602001905181019061160c919061199c565b610bfd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610482565b6060610a9d848460008585600080866001600160a01b031685876040516116a59190611a4c565b60006040518083038185875af1925050503d80600081146116e2576040519150601f19603f3d011682016040523d82523d6000602084013e6116e7565b606091505b50915091506116f887838387611703565b979650505050505050565b6060831561177257825160000361176b576001600160a01b0385163b61176b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610482565b5081610a9d565b610a9d83838151156117875781518083602001fd5b8060405162461bcd60e51b815260040161048291906118d2565b6001600160a01b03811681146105dc57600080fd5b600080600080608085870312156117cc57600080fd5b843593506020850135925060408501356117e5816117a1565b915060608501356117f5816117a1565b939692955090935050565b60006020828403121561181257600080fd5b813561181d816117a1565b9392505050565b6000806040838503121561183757600080fd5b50508035926020909101359150565b60006020828403121561185857600080fd5b5035919050565b6000806040838503121561187257600080fd5b823561187d816117a1565b946020939093013593505050565b60006020828403121561189d57600080fd5b813560ff8116811461181d57600080fd5b60005b838110156118c95781810151838201526020016118b1565b50506000910152565b60208152600082518060208401526118f18160408501602087016118ae565b601f01601f19169190910160400192915050565b6000806040838503121561191857600080fd5b8235611923816117a1565b91506020830135611933816117a1565b809150509250929050565b60008060006060848603121561195357600080fd5b833561195e816117a1565b9250602084013561196e816117a1565b929592945050506040919091013590565b60006020828403121561199157600080fd5b815161181d816117a1565b6000602082840312156119ae57600080fd5b8151801515811461181d57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561096b5761096b6119be565b8181038181111561096b5761096b6119be565b808202811582820484141761096b5761096b6119be565b600082611a2e57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611a4557600080fd5b5051919050565b60008251611a5e8184602087016118ae565b919091019291505056fe4261736520506f6f6c20696d706c656d656e746174696f6e20746f20696e68657269742066726f6d20666f72206d6f726520636f6d706c657820696d706c656d656e746174696f6e73a2646970667358221220147a65d09624cfca43eff813e8130a9d47ffef563e0d37fabbd277997989e6a364736f6c63430008140033",
  "devdoc": {
    "details": "Note that this implementation still converts between any amount of shares or underlying tokens in its view functions; these functions purposefully do not take the TVL limit into account.",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deposit(address,uint256)": {
        "details": "This function is only callable by the poolController contract. It is invoked inside of the poolController's `depositIntoPool` function, and individual share balances are recorded in the poolController as well.Note that the assumption is made that `amount` of `token` has already been transferred directly to this contract (as performed in the PoolController.sol's deposit functions). In particular, setting the `underlyingToken` of this contract to be a fee-on-transfer token will break the assumption that the amount this contract *received* of the token is equal to the amount that was input when the transfer was performed (i.e. the amount transferred 'out' of the depositor's balance).Note that any validation of `token` is done inside `_beforeDeposit`. This can be overridden if needed.",
        "params": {
          "amount": "is the amount of token being deposited",
          "token": "is the ERC20 token being deposited"
        },
        "returns": {
          "newShares": "is the number of new shares issued at the current exchange ratio."
        }
      },
      "pause(uint256)": {
        "details": "This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.",
        "params": {
          "newPausedStatus": "represents the new value for `_paused` to take, which means it may flip several bits at once."
        }
      },
      "setTVLLimits(uint256,uint256)": {
        "details": "Callable only by the unpauser of this contractWe note that there is a potential race condition between a call to this function that lowers either or both of these limits and call(s) to `deposit`, that may result in some calls to `deposit` reverting.",
        "params": {
          "newMaxTotalDeposits": "The new maximum deposits"
        }
      },
      "sharesToUnderlying(uint256)": {
        "details": "Implementation for these functions in particular may vary significantly for different strategies",
        "params": {
          "amountShares": "is the amount of shares to calculate its conversion into the underlying token"
        },
        "returns": {
          "_0": "The amount of underlying tokens corresponding to the input `amountShares`"
        }
      },
      "sharesToUnderlyingView(uint256)": {
        "details": "Implementation for these functions in particular may vary significantly for different strategies",
        "params": {
          "amountShares": "is the amount of shares to calculate its conversion into the underlying token"
        },
        "returns": {
          "_0": "The amount of underlying tokens corresponding to the input `amountShares`"
        }
      },
      "underlyingToShares(uint256)": {
        "details": "Implementation for these functions in particular may vary significantly for different strategies",
        "params": {
          "amountUnderlying": "is the amount of `underlyingToken` to calculate its conversion into pool shares"
        },
        "returns": {
          "_0": "The amount of shares corresponding to the input `amountUnderlying`"
        }
      },
      "underlyingToSharesView(uint256)": {
        "details": "Implementation for these functions in particular may vary significantly for different strategies",
        "params": {
          "amountUnderlying": "is the amount of `underlyingToken` to calculate its conversion into pool shares"
        },
        "returns": {
          "_0": "The amount of shares corresponding to the input `amountUnderlying`"
        }
      },
      "unpause(uint256)": {
        "details": "This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.",
        "params": {
          "newPausedStatus": "represents the new value for `_paused` to take, which means it may flip several bits at once."
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "This function is only callable by the poolController contract. It is invoked inside of the poolController's other functions, and individual share balances are recorded in the poolController as well.Note that any validation of `token` is done inside `_beforeWithdrawal`. This can be overridden if needed.",
        "params": {
          "amountShares": "is the amount of shares being withdrawn",
          "recipient": "is the address to receive the withdrawn funds",
          "token": "is the ERC20 token being transferred out"
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "title": "A Pool implementation inheriting from `PoolBase.sol` that limits the total amount of deposits it will accept.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MaxPerDepositUpdated(uint256,uint256)": {
        "notice": "Emitted when `maxPerDeposit` value is updated from `previousValue` to `newValue`"
      },
      "MaxTotalDepositsUpdated(uint256,uint256)": {
        "notice": "Emitted when `maxTotalDeposits` value is updated from `previousValue` to `newValue`"
      },
      "Paused(address,uint256)": {
        "notice": "Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`."
      },
      "PauserRegistrySet(address,address)": {
        "notice": "Emitted when the `pauserRegistry` is set to `newPauserRegistry`."
      },
      "Unpaused(address,uint256)": {
        "notice": "Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "solhint-disable-next-line no-empty-blocks"
      },
      "deposit(address,uint256)": {
        "notice": "Used to deposit tokens into this Pool"
      },
      "explanation()": {
        "notice": "Currently returns a brief string explaining the pool's goal & purpose, but for more complex strategies, may be a link to metadata that explains in more detail."
      },
      "getTVLLimits()": {
        "notice": "Simple getter function that returns the current values of `maxPerDeposit` and `maxTotalDeposits`."
      },
      "maxPerDeposit()": {
        "notice": "The maximum deposit (in underlyingToken) that this pool will accept per deposit"
      },
      "maxTotalDeposits()": {
        "notice": "The maximum deposits (in underlyingToken) that this pool will hold"
      },
      "pause(uint256)": {
        "notice": "This function is used to pause an BinLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig."
      },
      "pauseAll()": {
        "notice": "Alias for `pause(type(uint256).max)`."
      },
      "paused()": {
        "notice": "Returns the current paused status as a uint256."
      },
      "paused(uint8)": {
        "notice": "Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise"
      },
      "pauserRegistry()": {
        "notice": "Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing)."
      },
      "poolController()": {
        "notice": "BinLayer's PoolController.sol contract"
      },
      "setPauserRegistry(address)": {
        "notice": "Allows the unpauser to set a new pauser registry"
      },
      "setTVLLimits(uint256,uint256)": {
        "notice": "Sets the maximum deposits (in underlyingToken) that this pool will hold and accept per deposit"
      },
      "shares(address)": {
        "notice": "convenience function for fetching the current total shares of `user` in this pool, by querying the `poolController` contract"
      },
      "sharesToUnderlying(uint256)": {
        "notice": "Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.In contrast to `sharesToUnderlyingView`, this function **may** make state modifications"
      },
      "sharesToUnderlyingView(uint256)": {
        "notice": "Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.In contrast to `sharesToUnderlying`, this function guarantees no state modifications"
      },
      "totalShares()": {
        "notice": "The total number of extant shares in this Pool"
      },
      "underlyingToShares(uint256)": {
        "notice": "Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.In contrast to `underlyingToSharesView`, this function **may** make state modifications"
      },
      "underlyingToSharesView(uint256)": {
        "notice": "Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.In contrast to `underlyingToShares`, this function guarantees no state modifications"
      },
      "underlyingToken()": {
        "notice": "The underlying token for shares in this Pool"
      },
      "unpause(uint256)": {
        "notice": "This function is used to unpause an BinLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract."
      },
      "userUnderlying(address)": {
        "notice": "convenience function for fetching the current underlying value of all of the `user`'s shares in this pool. In contrast to `userUnderlyingView`, this function **may** make state modifications"
      },
      "userUnderlyingView(address)": {
        "notice": "convenience function for fetching the current underlying value of all of the `user`'s shares in this pool. In contrast to `userUnderlying`, this function guarantees no state modifications"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Used to withdraw tokens from this Pool, to the `recipient`'s address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13271,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "pauserRegistry",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IPauserRegistry)10193"
      },
      {
        "astId": 13274,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13564,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13752,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "underlyingToken",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IERC20)1559"
      },
      {
        "astId": 13755,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "totalShares",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 14192,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14202,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "maxPerDeposit",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 14205,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "maxTotalDeposits",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 14360,
        "contract": "contracts/pools/PoolBaseTVLLimits.sol:PoolBaseTVLLimits",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1559": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPauserRegistry)10193": {
        "encoding": "inplace",
        "label": "contract IPauserRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}