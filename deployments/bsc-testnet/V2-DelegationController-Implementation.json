{
  "address": "0xAA7281C7365d2788A019dF36a254Dc51aE968Cb8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolController",
          "name": "_poolController",
          "type": "address"
        },
        {
          "internalType": "contract ISlasher",
          "name": "_slasher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MinWithdrawalDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "__deprecated_earningsReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationApprover",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "stakerOptOutWindow",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IDelegationController.OperatorDetails",
          "name": "newOperatorDetails",
          "type": "tuple"
        }
      ],
      "name": "OperatorDetailsModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "OperatorMetadataURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "__deprecated_earningsReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationApprover",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "stakerOptOutWindow",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IDelegationController.OperatorDetails",
          "name": "operatorDetails",
          "type": "tuple"
        }
      ],
      "name": "OperatorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "OperatorSharesDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "OperatorSharesIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPauserRegistry",
          "name": "pauserRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPauserRegistry",
          "name": "newPauserRegistry",
          "type": "address"
        }
      ],
      "name": "PauserRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "PoolWithdrawalDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "StakerDelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "StakerForceUndelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "StakerUndelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousGateway",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentGateway",
          "type": "address"
        }
      ],
      "name": "UpdateWrappedTokenGateway",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawalRoot",
          "type": "bytes32"
        }
      ],
      "name": "WithdrawalCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawalRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegatedTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IPool[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDelegationController.Withdrawal",
          "name": "withdrawal",
          "type": "tuple"
        }
      ],
      "name": "WithdrawalQueued",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_APPROVAL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_STAKER_OPT_OUT_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAWAL_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKER_DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "calculateCurrentStakerDelegationDigestHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegationApprover",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "approverSalt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "calculateDelegationApprovalDigestHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakerNonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "calculateStakerDelegationDigestHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegatedTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IPool[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDelegationController.Withdrawal",
          "name": "withdrawal",
          "type": "tuple"
        }
      ],
      "name": "calculateWithdrawalRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeWithdrawalsQueued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "decreaseDelegatedShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureUtils.SignatureWithExpiry",
          "name": "approverSignatureAndExpiry",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "approverSalt",
          "type": "bytes32"
        }
      ],
      "name": "delegateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureUtils.SignatureWithExpiry",
          "name": "stakerSignatureAndExpiry",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureUtils.SignatureWithExpiry",
          "name": "approverSignatureAndExpiry",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "approverSalt",
          "type": "bytes32"
        }
      ],
      "name": "delegateToBySignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegatedTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "delegationApprover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "delegationApproverSaltIsSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getDelegatableShares",
      "outputs": [
        {
          "internalType": "contract IPool[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "contract IPool[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "getOperatorShares",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "getWithdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "increaseDelegatedShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "contract IPauserRegistry",
          "name": "_pauserRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialPausedStatus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minWithdrawalDelay",
          "type": "uint256"
        },
        {
          "internalType": "contract IPool[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_withdrawalDelay",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "isDelegated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWithdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "__deprecated_earningsReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationApprover",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "stakerOptOutWindow",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDelegationController.OperatorDetails",
          "name": "newOperatorDetails",
          "type": "tuple"
        }
      ],
      "name": "modifyOperatorDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "operatorDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "__deprecated_earningsReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationApprover",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "stakerOptOutWindow",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDelegationController.OperatorDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operatorShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauserRegistry",
      "outputs": [
        {
          "internalType": "contract IPauserRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pendingWithdrawals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolController",
      "outputs": [
        {
          "internalType": "contract IPoolController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolWithdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "__deprecated_earningsReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationApprover",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "stakerOptOutWindow",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDelegationController.OperatorDetails",
          "name": "registeringOperatorDetails",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "registerAsOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinWithdrawalDelay",
          "type": "uint256"
        }
      ],
      "name": "setMinWithdrawalDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPauserRegistry",
          "name": "newPauserRegistry",
          "type": "address"
        }
      ],
      "name": "setPauserRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "withdrawalDelay",
          "type": "uint256[]"
        }
      ],
      "name": "setPoolWithdrawalDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slasher",
      "outputs": [
        {
          "internalType": "contract ISlasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakerNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "stakerOptOutWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "undelegate",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "withdrawalRoots",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPausedStatus",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IPool[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationController.UnstakeParams[]",
          "name": "unstakeParams",
          "type": "tuple[]"
        }
      ],
      "name": "unstakes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "updateOperatorMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWrappedTokenGateway",
          "type": "address"
        }
      ],
      "name": "updateWrappedTokenGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegatedTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IPool[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDelegationController.Withdrawal",
          "name": "withdrawal",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "middlewareTimesIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "receiveAsTokens",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegatedTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IPool[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDelegationController.Withdrawal[]",
          "name": "withdrawals",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[][]",
          "name": "tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "middlewareTimesIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "receiveAsTokens",
          "type": "bool[]"
        }
      ],
      "name": "withdraws",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedTokenGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x24db11ebb8c2ce688b4cbd67799af84b5f6a1b61507b5fb78f2c28d554f4bd01",
  "receipt": {
    "to": null,
    "from": "0x1Ee532cf775be02E0B306571e3555321FC75988d",
    "contractAddress": "0xAA7281C7365d2788A019dF36a254Dc51aE968Cb8",
    "transactionIndex": 5,
    "gasUsed": "4426630",
    "logsBloom": "0x
    "blockHash": "0xc1157959f6d6eee1b8cf312dcc317c5085eba0e48d6f19e13d571440c506ec94",
    "transactionHash": "0x24db11ebb8c2ce688b4cbd67799af84b5f6a1b61507b5fb78f2c28d554f4bd01",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 42161211,
        "transactionHash": "0x24db11ebb8c2ce688b4cbd67799af84b5f6a1b61507b5fb78f2c28d554f4bd01",
        "address": "0xAA7281C7365d2788A019dF36a254Dc51aE968Cb8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0xc1157959f6d6eee1b8cf312dcc317c5085eba0e48d6f19e13d571440c506ec94"
      }
    ],
    "blockNumber": 42161211,
    "cumulativeGasUsed": "4613534",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd914b20BcFcdBb396697a957fc28a77947593bE5",
    "0x9Cf182755a5F974B896590e1DaD99219217C2Da8"
  ],
  "numDeployments": 2,
  "solcInputHash": "1fc6261cb3ad84ab8707ef74ea464afa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolController\",\"name\":\"_poolController\",\"type\":\"address\"},{\"internalType\":\"contract ISlasher\",\"name\":\"_slasher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinWithdrawalDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindow\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IDelegationController.OperatorDetails\",\"name\":\"newOperatorDetails\",\"type\":\"tuple\"}],\"name\":\"OperatorDetailsModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"OperatorMetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindow\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IDelegationController.OperatorDetails\",\"name\":\"operatorDetails\",\"type\":\"tuple\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"OperatorSharesDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"OperatorSharesIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PoolWithdrawalDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerForceUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousGateway\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentGateway\",\"type\":\"address\"}],\"name\":\"UpdateWrappedTokenGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct IDelegationController.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"WithdrawalQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_APPROVAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKER_OPT_OUT_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKER_DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentStakerDelegationDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationApprover\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateDelegationApprovalDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakerNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateStakerDelegationDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationController.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"calculateWithdrawalRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeWithdrawalsQueued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"decreaseDelegatedShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"delegateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"stakerSignatureAndExpiry\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"delegateToBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"delegationApprover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"delegationApproverSaltIsSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDelegatableShares\",\"outputs\":[{\"internalType\":\"contract IPool[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"getOperatorShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"getWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"increaseDelegatedShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPausedStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minWithdrawalDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IPool[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_withdrawalDelay\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isDelegated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct IDelegationController.OperatorDetails\",\"name\":\"newOperatorDetails\",\"type\":\"tuple\"}],\"name\":\"modifyOperatorDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"operatorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct IDelegationController.OperatorDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operatorShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolController\",\"outputs\":[{\"internalType\":\"contract IPoolController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct IDelegationController.OperatorDetails\",\"name\":\"registeringOperatorDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"registerAsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinWithdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"setMinWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawalDelay\",\"type\":\"uint256[]\"}],\"name\":\"setPoolWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contract ISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"stakerOptOutWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"undelegate\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"withdrawalRoots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationController.UnstakeParams[]\",\"name\":\"unstakeParams\",\"type\":\"tuple[]\"}],\"name\":\"unstakes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"updateOperatorMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWrappedTokenGateway\",\"type\":\"address\"}],\"name\":\"updateWrappedTokenGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationController.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"middlewareTimesIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAsTokens\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IPool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationController.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"middlewareTimesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"receiveAsTokens\",\"type\":\"bool[]\"}],\"name\":\"withdraws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedTokenGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OperatorMetadataURIUpdated(address,string)\":{\"details\":\"Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\"},\"WithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]))\":{\"params\":{\"withdrawal\":\"Is the withdrawal itself.\",\"withdrawalRoot\":\"Is the hash of the `withdrawal`.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateCurrentStakerDelegationDigestHash(address,address,uint256)\":{\"params\":{\"expiry\":\"The desired expiry time of the staker's signature\",\"operator\":\"The operator who is being delegated to\",\"staker\":\"The signing staker\"}},\"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)\":{\"params\":{\"_delegationApprover\":\"the operator's `delegationApprover` who will be signing the delegationHash (in general)\",\"approverSalt\":\"A unique and single use value associated with the approver signature.\",\"expiry\":\"Time after which the approver's signature becomes invalid\",\"operator\":\"The account receiving delegated stake\",\"staker\":\"The account delegating their stake\"}},\"calculateStakerDelegationDigestHash(address,uint256,address,uint256)\":{\"params\":{\"_stakerNonce\":\"The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\",\"expiry\":\"The desired expiry time of the staker's signature\",\"operator\":\"The operator who is being delegated to\",\"staker\":\"The signing staker\"}},\"constructor\":{\"details\":\"Initializes the immutable addresses of the pool mananger and slasher.\"},\"decreaseDelegatedShares(address,address,uint256)\":{\"details\":\"*If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.Callable only by the PoolController.sol.\",\"params\":{\"pool\":\"The pool in which to decrease the delegated shares.\",\"shares\":\"The number of shares to decrease.\",\"staker\":\"The address to increase the delegated shares for their operator.\"}},\"delegateTo(address,(bytes,uint256),bytes32)\":{\"details\":\"The approverSignatureAndExpiry is used in the event that:          1) the operator's `delegationApprover` address is set to a non-zero value.                  AND          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator             or their delegationApprover is the `msg.sender`, then approval is assumed.In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input in this case to save on complexity + gas costs\",\"params\":{\"approverSalt\":\"A unique single use value tied to an individual signature.\",\"approverSignatureAndExpiry\":\"Verifies the operator approves of this delegation\",\"operator\":\"The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer.\"}},\"delegateToBySignature(address,address,(bytes,uint256),(bytes,uint256),bytes32)\":{\"details\":\"If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.the operator's `delegationApprover` address is set to a non-zero value.neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover is the `msg.sender`, then approval is assumed.This function will revert if the current `block.timestamp` is equal to or exceeds the expiryIn the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input in this case to save on complexity + gas costs\",\"params\":{\"approverSalt\":\"Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\",\"approverSignatureAndExpiry\":\"is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\",\"operator\":\"The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.\",\"staker\":\"The account delegating stake to an `operator` account\",\"stakerSignatureAndExpiry\":\"Signed data from the staker authorizing delegating stake to an operator\"}},\"domainSeparator()\":{\"details\":\"The domain separator will change in the event of a fork that changes the ChainID.By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision. for more detailed information please read EIP-712.\"},\"getDelegatableShares(address)\":{\"details\":\"Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\"},\"getWithdrawalDelay(address[])\":{\"params\":{\"pools\":\"The pools to check withdrawal delays for\"}},\"increaseDelegatedShares(address,address,uint256)\":{\"details\":\"*If the staker is actively delegated*, then increases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.Callable only by the PoolController.sol.\",\"params\":{\"pool\":\"The pool in which to increase the delegated shares.\",\"shares\":\"The number of shares to increase.\",\"staker\":\"The address to increase the delegated shares for their operator.\"}},\"initialize(address,address,uint256,uint256,address[],uint256[])\":{\"details\":\"Initializes the addresses of the initial owner, pauser registry, and paused status. minWithdrawalDelay is set only once here\"},\"modifyOperatorDetails((address,address,uint32))\":{\"details\":\"The caller must have previously registered as an operator in BinLayer.\",\"params\":{\"newOperatorDetails\":\"is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause(uint256)\":{\"details\":\"This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"registerAsOperator((address,address,uint32),string)\":{\"details\":\"Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".This function will revert if the caller is already delegated to an operator.Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\",\"params\":{\"metadataURI\":\"is a URI for the operator's metadata, i.e. a link providing more details on the operator.\",\"registeringOperatorDetails\":\"is the `OperatorDetails` for the operator.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setMinWithdrawalDelay(uint256)\":{\"params\":{\"newMinWithdrawalDelay\":\"new value of `minWithdrawalDelay`.\"}},\"setPoolWithdrawalDelay(address[],uint256[])\":{\"params\":{\"pools\":\"The pools to set the minimum withdrawal delay for\",\"withdrawalDelay\":\"The minimum withdrawal delay to set for each pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause(uint256)\":{\"details\":\"This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"updateOperatorMetadataURI(string)\":{\"params\":{\"metadataURI\":\"The URI for metadata associated with an operator\"}},\"updateWrappedTokenGateway(address)\":{\"params\":{\"_newWrappedTokenGateway\":\"New wrapped token gateway address\"}},\"withdraw((address,address,address,uint256,uint32,address[],uint256[]),address[],uint256,bool)\":{\"details\":\"middlewareTimesIndex is unused, but will be used in the Slasher eventuallybeaconChainETHPool shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that any beaconChainETHPool shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in any other pools, which will be transferred to the withdrawer.\",\"params\":{\"middlewareTimesIndex\":\"is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\",\"receiveAsTokens\":\"If true, the shares specified in the withdrawal will be withdrawn from the specified pools themselves and sent to the caller, through calls to `withdrawal.pools[i].withdraw`. If false, then the shares in the specified pools will simply be transferred to the caller directly.\",\"tokens\":\"Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Pool in the `withdrawal.pools` array. This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\",\"withdrawal\":\"The Withdrawal to complete.\"}},\"withdraws((address,address,address,uint256,uint32,address[],uint256[])[],address[][],uint256[],bool[])\":{\"details\":\"See `withdraw` for relevant dev tags\",\"params\":{\"middlewareTimesIndexes\":\"One index to reference per Withdrawal. See `withdraw` for the usage of a single index.\",\"receiveAsTokens\":\"Whether or not to complete each withdrawal as tokens. See `withdraw` for the usage of a single boolean.\",\"tokens\":\"Array of tokens for each Withdrawal. See `withdraw` for the usage of a single array.\",\"withdrawals\":\"The Withdrawals to complete.\"}}},\"title\":\"DelegationController.sol\",\"version\":1},\"userdoc\":{\"events\":{\"MinWithdrawalDelaySet(uint256,uint256)\":{\"notice\":\"Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\"},\"OperatorDetailsModified(address,(address,address,uint32))\":{\"notice\":\"Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\"},\"OperatorMetadataURIUpdated(address,string)\":{\"notice\":\"Emitted when @param operator indicates that they are updating their MetadataURI string\"},\"OperatorSharesDecreased(address,address,address,uint256)\":{\"notice\":\"Emitted whenever an operator's shares are decreased for a given pool. Note that shares is the delta in the operator's shares.\"},\"OperatorSharesIncreased(address,address,address,uint256)\":{\"notice\":\"Emitted whenever an operator's shares are increased for a given pool. Note that shares is the delta in the operator's shares.\"},\"Paused(address,uint256)\":{\"notice\":\"Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\"},\"PauserRegistrySet(address,address)\":{\"notice\":\"Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\"},\"PoolWithdrawalDelaySet(address,uint256,uint256)\":{\"notice\":\"Emitted when the `poolWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\"},\"StakerDelegated(address,address)\":{\"notice\":\"Emitted when @param staker delegates to @param operator.\"},\"StakerForceUndelegated(address,address)\":{\"notice\":\"Emitted when @param staker is undelegated via a call not originating from the staker themself\"},\"StakerUndelegated(address,address)\":{\"notice\":\"Emitted when @param staker undelegates from @param operator.\"},\"Unpaused(address,uint256)\":{\"notice\":\"Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\"},\"WithdrawalCompleted(bytes32)\":{\"notice\":\"Emitted when a queued withdrawal is completed\"},\"WithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]))\":{\"notice\":\"Emitted when a new withdrawal is queued.\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_APPROVAL_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the `DelegationApproval` struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"STAKER_DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the `StakerDelegation` struct used by the contract\"},\"calculateCurrentStakerDelegationDigestHash(address,address,uint256)\":{\"notice\":\"Calculates the digestHash for a `staker` to sign to delegate to an `operator`\"},\"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)\":{\"notice\":\"Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\"},\"calculateStakerDelegationDigestHash(address,uint256,address,uint256)\":{\"notice\":\"Calculates the digest hash to be signed and used in the `delegateToBySignature` function\"},\"calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))\":{\"notice\":\"Returns the keccak256 hash of `withdrawal`.\"},\"cumulativeWithdrawalsQueued(address)\":{\"notice\":\"Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\"},\"decreaseDelegatedShares(address,address,uint256)\":{\"notice\":\"Decreases a staker's delegated share balance in a pool.\"},\"delegateTo(address,(bytes,uint256),bytes32)\":{\"notice\":\"Caller delegates their stake to an operator.\"},\"delegateToBySignature(address,address,(bytes,uint256),(bytes,uint256),bytes32)\":{\"notice\":\"Caller delegates a staker's stake to an operator with valid signatures from both parties.\"},\"delegatedTo(address)\":{\"notice\":\"Mapping: staker => operator whom the staker is currently delegated to.\"},\"delegationApprover(address)\":{\"notice\":\"Returns the delegationApprover account for an operator\"},\"delegationApproverSaltIsSpent(address,bytes32)\":{\"notice\":\"Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\"},\"domainSeparator()\":{\"notice\":\"Getter function for the current EIP-712 domain separator for this contract.\"},\"getDelegatableShares(address)\":{\"notice\":\"Returns the number of actively-delegatable shares a staker has across all pools.\"},\"getOperatorShares(address,address[])\":{\"notice\":\"Given array of pools, returns array of shares for the operator\"},\"getWithdrawalDelay(address[])\":{\"notice\":\"Given a list of pools, return the minimum cooldown that must pass to withdraw from all the inputted pools. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\"},\"increaseDelegatedShares(address,address,uint256)\":{\"notice\":\"Increases a staker's delegated share balance in a pool.\"},\"isDelegated(address)\":{\"notice\":\"Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\"},\"isOperator(address)\":{\"notice\":\"Returns true is an operator has previously registered for delegation.\"},\"minWithdrawalDelay()\":{\"notice\":\"Global minimum withdrawal delay for all pool withdrawals. In a prior Goerli release, we only had a global min withdrawal delay across all strategies. In addition, we now also configure withdrawal delays on a per-pool basis. To withdraw from a pool, max(minWithdrawalDelay, poolWithdrawalDelay[pool]) number of timestamp must have passed. See mapping poolWithdrawalDelay below for per-pool withdrawal delays.\"},\"modifyOperatorDetails((address,address,uint32))\":{\"notice\":\"Updates an operator's stored `OperatorDetails`.\"},\"operatorDetails(address)\":{\"notice\":\"Returns the OperatorDetails struct associated with an `operator`.\"},\"operatorShares(address,address)\":{\"notice\":\"returns the total number of shares in `pool` that are delegated to `operator`.Mapping: operator => pool => total number of shares in the pool delegated to the operator.\"},\"pause(uint256)\":{\"notice\":\"This function is used to pause an BinLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\"},\"pauseAll()\":{\"notice\":\"Alias for `pause(type(uint256).max)`.\"},\"paused()\":{\"notice\":\"Returns the current paused status as a uint256.\"},\"paused(uint8)\":{\"notice\":\"Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\"},\"pauserRegistry()\":{\"notice\":\"Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\"},\"pendingWithdrawals(bytes32)\":{\"notice\":\"Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending\"},\"poolController()\":{\"notice\":\"The PoolController.sol contract for BinLayer\"},\"poolWithdrawalDelay(address)\":{\"notice\":\"Minimum delay enforced by this contract per Pool for completing queued withdrawals. Measured in timestamp, and adjustable by this contract's owner, up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\"},\"registerAsOperator((address,address,uint32),string)\":{\"notice\":\"Registers the caller as an operator in BinLayer.\"},\"setMinWithdrawalDelay(uint256)\":{\"notice\":\"Owner-only function for modifying the value of the `minWithdrawalDelay` variable.\"},\"setPauserRegistry(address)\":{\"notice\":\"Allows the unpauser to set a new pauser registry\"},\"setPoolWithdrawalDelay(address[],uint256[])\":{\"notice\":\"Called by owner to set the minimum withdrawal delay for each passed in pool Note that the min cooldown to complete a withdrawal of a pool is MAX(minWithdrawalDelay, poolWithdrawalDelay[pool])\"},\"slasher()\":{\"notice\":\"The Slasher contract for BinLayer\"},\"stakerNonce(address)\":{\"notice\":\"Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked.\"},\"stakerOptOutWindow(address)\":{\"notice\":\"Returns the stakerOptOutWindow for an operator\"},\"undelegate(address)\":{\"notice\":\"Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate a staker from their operator. Undelegation immediately removes ALL active shares/pools from both the staker and operator, and places the shares and pools in the unstake\"},\"unpause(uint256)\":{\"notice\":\"This function is used to unpause an BinLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\"},\"unstakes((address[],uint256[],address)[])\":{\"notice\":\"Enables a staker to withdraw a portion of shares. Withdrawn shares/pools are promptly removed. from the staker. If the staker is delegated, withdrawn shares/pools are also removed from their operator. All withdrawn shares/pools are placed in a queue and can be fully withdrawn after a delay.\"},\"updateOperatorMetadataURI(string)\":{\"notice\":\"Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\"},\"updateWrappedTokenGateway(address)\":{\"notice\":\"Called by owner to update the wrapped token gateway\"},\"withdraw((address,address,address,uint256,uint32,address[],uint256[]),address[],uint256,bool)\":{\"notice\":\"Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\"},\"withdraws((address,address,address,uint256,uint32,address[],uint256[])[],address[][],uint256[],bool[])\":{\"notice\":\"Array-ified version of `withdraw`. Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\"},\"wrappedTokenGateway()\":{\"notice\":\"Wrapped token gateway\"}},\"notice\":\"this is the delegation contract for BinLayer. The primary functions of this contract are: - allowing anyone to register as an operator in BinLayer - enabling operators to set parameters for stakers who delegate to them - allowing any staker to delegate their stake to the operator of their choice (each staker can only delegate to one operator at a time) - allowing a staker to undelegate their assets from the operator they are delegated to (done as part of the withdrawal process, initiated through the PoolController)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/DelegationController.sol\":\"DelegationController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin-upgrades/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin-upgrades/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/DelegationController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\\nimport '@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol';\\nimport '../permissions/Pausable.sol';\\nimport '../libraries/EIP1271SignatureUtils.sol';\\nimport './DelegationControllerStorage.sol';\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title DelegationController.sol\\n * @notice  this is the delegation contract for BinLayer. The primary functions of this contract are:\\n * - allowing anyone to register as an operator in BinLayer\\n * - enabling operators to set parameters for stakers who delegate to them\\n * - allowing any staker to delegate their stake to the operator of their choice (each staker can only delegate to one operator at a time)\\n * - allowing a staker to undelegate their assets from the operator they are delegated to (done as part of the withdrawal process, initiated through the PoolController)\\n */\\ncontract DelegationController is Initializable, OwnableUpgradeable, Pausable, DelegationControllerStorage, ReentrancyGuardUpgradeable {\\n  // @dev Flag index that, when set, pauses new delegations\\n  uint8 internal constant PAUSED_NEW_DELEGATION = 0;\\n\\n  // @dev Index for flag that pauses unstake when set.\\n  uint8 internal constant PAUSED_UNSTAKE = 1;\\n\\n  // @dev Index for flag that pauses withdraw when set.\\n  uint8 internal constant PAUSED_WITHDRAW = 2;\\n\\n  // @dev Chain ID at the time of contract deployment\\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\\n\\n  // @dev Maximum Value for `stakerOptOutWindow`. Approximately equivalent to 6 months.\\n  uint256 public constant MAX_STAKER_OPT_OUT_WINDOW = 180 days;\\n\\n  // @notice Simple permission for functions that are only callable by the PoolController.sol contract\\n  modifier onlyPoolController() {\\n    require(msg.sender == address(poolController), Errors.ONLY_POOL_CONTROLLER);\\n    _;\\n  }\\n\\n  /*******************************************************************************\\n                            INITIALIZING FUNCTIONS\\n    *******************************************************************************/\\n\\n  /**\\n   * @dev Initializes the immutable addresses of the pool mananger and slasher.\\n   */\\n  constructor(IPoolController _poolController, ISlasher _slasher) DelegationControllerStorage(_poolController, _slasher) {\\n    _disableInitializers();\\n    ORIGINAL_CHAIN_ID = block.chainid;\\n  }\\n\\n  /**\\n   * @dev Initializes the addresses of the initial owner, pauser registry, and paused status.\\n   * minWithdrawalDelay is set only once here\\n   */\\n  function initialize(\\n    address initialOwner,\\n    IPauserRegistry _pauserRegistry,\\n    uint256 initialPausedStatus,\\n    uint256 _minWithdrawalDelay,\\n    IPool[] calldata _pools,\\n    uint256[] calldata _withdrawalDelay\\n  ) external initializer {\\n    _initializePauser(_pauserRegistry, initialPausedStatus);\\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\\n    __ReentrancyGuard_init();\\n    _transferOwnership(initialOwner);\\n    _setMinWithdrawalDelay(_minWithdrawalDelay);\\n    _setPoolWithdrawalDelay(_pools, _withdrawalDelay);\\n  }\\n\\n  /*******************************************************************************\\n                            EXTERNAL FUNCTIONS \\n    *******************************************************************************/\\n\\n  /**\\n   * @notice Registers the caller as an operator in BinLayer.\\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n   *\\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n   * @dev This function will revert if the caller is already delegated to an operator.\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external {\\n    require(!isDelegated(msg.sender), Errors.OPERATOR_ALREADY_REGISTERED);\\n    _setOperatorDetails(msg.sender, registeringOperatorDetails);\\n    SignatureWithExpiry memory emptySignatureAndExpiry;\\n    // delegate from the operator to themselves\\n    _delegate(msg.sender, msg.sender, emptySignatureAndExpiry, bytes32(0));\\n    // emit events\\n    emit OperatorRegistered(msg.sender, registeringOperatorDetails);\\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\\n  }\\n\\n  /**\\n   * @notice Updates an operator's stored `OperatorDetails`.\\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n   *\\n   * @dev The caller must have previously registered as an operator in BinLayer.\\n   */\\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external {\\n    require(isOperator(msg.sender), Errors.CALLER_NOT_OPERATOR);\\n    _setOperatorDetails(msg.sender, newOperatorDetails);\\n  }\\n\\n  /**\\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n   * @param metadataURI The URI for metadata associated with an operator\\n   */\\n  function updateOperatorMetadataURI(string calldata metadataURI) external {\\n    require(isOperator(msg.sender), Errors.CALLER_NOT_OPERATOR);\\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\\n  }\\n\\n  /**\\n   * @notice Caller delegates their stake to an operator.\\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n   * @param approverSalt A unique single use value tied to an individual signature.\\n   * @dev The approverSignatureAndExpiry is used in the event that:\\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n   *                  AND\\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external {\\n    require(!isDelegated(msg.sender), Errors.ALREADY_DELEGATED);\\n    require(isOperator(operator), Errors.NOT_REGISTERED_IN_BINLAYER);\\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\\n    _delegate(msg.sender, operator, approverSignatureAndExpiry, approverSalt);\\n  }\\n\\n  /**\\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n   * @param staker The account delegating stake to an `operator` account\\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n   *\\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n   * is the `msg.sender`, then approval is assumed.\\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateToBySignature(\\n    address staker,\\n    address operator,\\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\\n    SignatureWithExpiry memory approverSignatureAndExpiry,\\n    bytes32 approverSalt\\n  ) external {\\n    // check the signature expiry\\n    require(stakerSignatureAndExpiry.expiry >= block.timestamp, Errors.SIGNATURE_EXPIRED);\\n\\n    require(!isDelegated(staker), Errors.ALREADY_DELEGATED);\\n    require(isOperator(operator), Errors.NOT_REGISTERED_IN_BINLAYER);\\n\\n    // calculate the digest hash, then increment `staker`'s nonce\\n    uint256 currentStakerNonce = stakerNonce[staker];\\n    bytes32 stakerDigestHash = calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, stakerSignatureAndExpiry.expiry);\\n    unchecked {\\n      stakerNonce[staker] = currentStakerNonce + 1;\\n    }\\n\\n    // actually check that the signature is valid\\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, stakerDigestHash, stakerSignatureAndExpiry.signature);\\n\\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\\n    _delegate(staker, operator, approverSignatureAndExpiry, approverSalt);\\n  }\\n\\n  /**\\n   * Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate\\n   * a staker from their operator. Undelegation immediately removes ALL active shares/pools from\\n   * both the staker and operator, and places the shares and pools in the unstake\\n   */\\n  function undelegate(address staker) external onlyWhenNotPaused(PAUSED_UNSTAKE) returns (bytes32[] memory withdrawalRoots) {\\n    require(isDelegated(staker), Errors.STAKER_MUST_BE_DELEGATED);\\n    require(!isOperator(staker), Errors.CANNOT_UNDELEGATE_OPERATOR);\\n    require(staker != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    address operator = delegatedTo[staker];\\n    require(\\n      msg.sender == staker || msg.sender == operator || msg.sender == _operatorDetails[operator].delegationApprover,\\n      Errors.CALLER_CANNOT_UNDELEGATE\\n    );\\n\\n    // Gather pools and shares to remove from staker/operator during undelegation\\n    // Undelegation removes ALL currently-active pools and shares\\n    (IPool[] memory pools, uint256[] memory shares) = getDelegatableShares(staker);\\n\\n    // emit an event if this action was not initiated by the staker themselves\\n    if (msg.sender != staker) {\\n      emit StakerForceUndelegated(staker, operator);\\n    }\\n\\n    // undelegate the staker\\n    emit StakerUndelegated(staker, operator);\\n    delegatedTo[staker] = address(0);\\n\\n    // if no delegatable shares, return an empty array, and don't unstake\\n    if (pools.length == 0) {\\n      withdrawalRoots = new bytes32[](0);\\n    } else {\\n      withdrawalRoots = new bytes32[](pools.length);\\n      for (uint256 i = 0; i < pools.length; i++) {\\n        IPool[] memory singlePool = new IPool[](1);\\n        uint256[] memory singleShare = new uint256[](1);\\n        singlePool[0] = pools[i];\\n        singleShare[0] = shares[i];\\n\\n        withdrawalRoots[i] = _removeSharesAndUnstake({\\n          staker: staker,\\n          operator: operator,\\n          withdrawer: staker,\\n          pools: singlePool,\\n          shares: singleShare\\n        });\\n      }\\n    }\\n\\n    return withdrawalRoots;\\n  }\\n\\n  /**\\n   * Enables a staker to withdraw a portion of shares. Withdrawn shares/pools are promptly removed.\\n   * from the staker. If the staker is delegated, withdrawn shares/pools are also removed from\\n   * their operator.\\n   *\\n   * All withdrawn shares/pools are placed in a queue and can be fully withdrawn after a delay.\\n   */\\n  function unstakes(UnstakeParams[] calldata unstakeParams) external onlyWhenNotPaused(PAUSED_UNSTAKE) returns (bytes32[] memory) {\\n    bytes32[] memory withdrawalRoots = new bytes32[](unstakeParams.length);\\n    address operator = delegatedTo[msg.sender];\\n\\n    for (uint256 i = 0; i < unstakeParams.length; i++) {\\n      require(unstakeParams[i].pools.length == unstakeParams[i].shares.length, Errors.INPUT_LENGTH_MISMATCH);\\n      require(\\n        unstakeParams[i].withdrawer == msg.sender || unstakeParams[i].withdrawer == wrappedTokenGateway,\\n        Errors.WITHDRAWER_NOT_STAKER_OR_GATEWAY\\n      );\\n\\n      // Remove shares from staker's pools and place pools/shares in unstake.\\n      // If the staker is delegated to an operator, the operator's delegated shares are also reduced\\n      // NOTE: This will fail if the staker doesn't have the shares implied by the input parameters\\n      withdrawalRoots[i] = _removeSharesAndUnstake({\\n        staker: msg.sender,\\n        operator: operator,\\n        withdrawer: unstakeParams[i].withdrawer,\\n        pools: unstakeParams[i].pools,\\n        shares: unstakeParams[i].shares\\n      });\\n    }\\n    return withdrawalRoots;\\n  }\\n\\n  /**\\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n   * @param withdrawal The Withdrawal to complete.\\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Pool in the `withdrawal.pools` array.\\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified pools themselves\\n   * and sent to the caller, through calls to `withdrawal.pools[i].withdraw`. If false, then the shares in the specified pools\\n   * will simply be transferred to the caller directly.\\n   * @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\\n   * @dev beaconChainETHPool shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n   * any beaconChainETHPool shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n   * any other pools, which will be transferred to the withdrawer.\\n   */\\n  function withdraw(\\n    Withdrawal calldata withdrawal,\\n    IERC20[] calldata tokens,\\n    uint256 middlewareTimesIndex,\\n    bool receiveAsTokens\\n  ) external onlyWhenNotPaused(PAUSED_WITHDRAW) nonReentrant {\\n    _withdraw(withdrawal, tokens, middlewareTimesIndex, receiveAsTokens);\\n  }\\n\\n  /**\\n   * @notice Array-ified version of `withdraw`.\\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n   * @param withdrawals The Withdrawals to complete.\\n   * @param tokens Array of tokens for each Withdrawal. See `withdraw` for the usage of a single array.\\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `withdraw` for the usage of a single index.\\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `withdraw` for the usage of a single boolean.\\n   * @dev See `withdraw` for relevant dev tags\\n   */\\n  function withdraws(\\n    Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexes,\\n    bool[] calldata receiveAsTokens\\n  ) external onlyWhenNotPaused(PAUSED_WITHDRAW) nonReentrant {\\n    for (uint256 i = 0; i < withdrawals.length; ++i) {\\n      _withdraw(withdrawals[i], tokens[i], middlewareTimesIndexes[i], receiveAsTokens[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Increases a staker's delegated share balance in a pool.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param pool The pool in which to increase the delegated shares.\\n   * @param shares The number of shares to increase.\\n   *\\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the PoolController.sol.\\n   */\\n  function increaseDelegatedShares(address staker, IPool pool, uint256 shares) external onlyPoolController {\\n    // if the staker is delegated to an operator\\n    if (isDelegated(staker)) {\\n      address operator = delegatedTo[staker];\\n\\n      // add pool shares to delegate's shares\\n      _increaseOperatorShares({operator: operator, staker: staker, pool: pool, shares: shares});\\n    }\\n  }\\n\\n  /**\\n   * @notice Decreases a staker's delegated share balance in a pool.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param pool The pool in which to decrease the delegated shares.\\n   * @param shares The number of shares to decrease.\\n   *\\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the PoolController.sol.\\n   */\\n  function decreaseDelegatedShares(address staker, IPool pool, uint256 shares) external onlyPoolController {\\n    // if the staker is delegated to an operator\\n    if (isDelegated(staker)) {\\n      address operator = delegatedTo[staker];\\n\\n      // subtract pool shares from delegate's shares\\n      _decreaseOperatorShares({operator: operator, staker: staker, pool: pool, shares: shares});\\n    }\\n  }\\n\\n  /**\\n   * @notice Owner-only function for modifying the value of the `minWithdrawalDelay` variable.\\n   * @param newMinWithdrawalDelay new value of `minWithdrawalDelay`.\\n   */\\n  function setMinWithdrawalDelay(uint256 newMinWithdrawalDelay) external onlyOwner {\\n    _setMinWithdrawalDelay(newMinWithdrawalDelay);\\n  }\\n\\n  /**\\n   * @notice Called by owner to set the minimum withdrawal delay for each passed in pool\\n   * Note that the min cooldown to complete a withdrawal of a pool is\\n   * MAX(minWithdrawalDelay, poolWithdrawalDelay[pool])\\n   * @param pools The pools to set the minimum withdrawal delay for\\n   * @param withdrawalDelay The minimum withdrawal delay to set for each pool\\n   */\\n  function setPoolWithdrawalDelay(IPool[] calldata pools, uint256[] calldata withdrawalDelay) external onlyOwner {\\n    _setPoolWithdrawalDelay(pools, withdrawalDelay);\\n  }\\n\\n  /**\\n   * @notice Called by owner to update the wrapped token gateway\\n   * @param _newWrappedTokenGateway New wrapped token gateway address\\n   */\\n  function updateWrappedTokenGateway(address _newWrappedTokenGateway) external onlyOwner {\\n    emit UpdateWrappedTokenGateway(wrappedTokenGateway, _newWrappedTokenGateway);\\n    wrappedTokenGateway = _newWrappedTokenGateway;\\n  }\\n\\n  /*******************************************************************************\\n                            INTERNAL FUNCTIONS\\n    *******************************************************************************/\\n\\n  /**\\n   * @notice Sets operator parameters in the `_operatorDetails` mapping.\\n   * @param operator The account registered as an operator updating their operatorDetails\\n   * @param newOperatorDetails The new parameters for the operator\\n   */\\n  function _setOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) internal {\\n    require(newOperatorDetails.stakerOptOutWindow <= MAX_STAKER_OPT_OUT_WINDOW, Errors.OPT_OUT_WINDOW_EXCEEDS_MAX);\\n    require(newOperatorDetails.stakerOptOutWindow >= _operatorDetails[operator].stakerOptOutWindow, Errors.DECREASE_OPT_OUT_WINDOW);\\n    _operatorDetails[operator] = newOperatorDetails;\\n    emit OperatorDetailsModified(msg.sender, newOperatorDetails);\\n  }\\n\\n  /**\\n   * @notice Delegates *from* a `staker` *to* an `operator`.\\n   * @param staker The address to delegate *from* -- this address is delegating control of its own assets.\\n   * @param operator The address to delegate *to* -- this address is being given power to place the `staker`'s assets at risk on services\\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n   * @dev Ensures that:\\n   *          1) the `staker` is not already delegated to an operator\\n   *          2) the `operator` has indeed registered as an operator in BinLayer\\n   *          3) if applicable, that the approver signature is valid and non-expired\\n   */\\n  function _delegate(\\n    address staker,\\n    address operator,\\n    SignatureWithExpiry memory approverSignatureAndExpiry,\\n    bytes32 approverSalt\\n  ) internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION) {\\n    // fetch the operator's `delegationApprover` address and store it in memory in case we need to use it multiple times\\n    address _delegationApprover = _operatorDetails[operator].delegationApprover;\\n    /**\\n     * Check the `_delegationApprover`'s signature, if applicable.\\n     * If the `_delegationApprover` is the zero address, then the operator allows all stakers to delegate to them and this verification is skipped.\\n     * If the `_delegationApprover` or the `operator` themselves is the caller, then approval is assumed and signature verification is skipped as well.\\n     */\\n    if (_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator) {\\n      // check the signature expiry\\n      require(approverSignatureAndExpiry.expiry >= block.timestamp, Errors.SIGNATURE_EXPIRED);\\n      // check that the salt hasn't been used previously, then mark the salt as spent\\n      require(!delegationApproverSaltIsSpent[_delegationApprover][approverSalt], Errors.SALT_ALREADY_SPENT);\\n      delegationApproverSaltIsSpent[_delegationApprover][approverSalt] = true;\\n\\n      // calculate the digest hash\\n      bytes32 approverDigestHash = calculateDelegationApprovalDigestHash(\\n        staker,\\n        operator,\\n        _delegationApprover,\\n        approverSalt,\\n        approverSignatureAndExpiry.expiry\\n      );\\n\\n      // actually check that the signature is valid\\n      EIP1271SignatureUtils.checkSignature_EIP1271(_delegationApprover, approverDigestHash, approverSignatureAndExpiry.signature);\\n    }\\n\\n    // record the delegation relation between the staker and operator, and emit an event\\n    delegatedTo[staker] = operator;\\n    emit StakerDelegated(staker, operator);\\n\\n    (IPool[] memory pools, uint256[] memory shares) = getDelegatableShares(staker);\\n\\n    for (uint256 i = 0; i < pools.length; ) {\\n      _increaseOperatorShares({operator: operator, staker: staker, pool: pools[i], shares: shares[i]});\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev commented-out param (middlewareTimesIndex) is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n   * This param is intended to be passed on to the Slasher contract.\\n   */\\n  function _withdraw(\\n    Withdrawal calldata withdrawal,\\n    IERC20[] calldata tokens,\\n    uint256 /*middlewareTimesIndex*/,\\n    bool receiveAsTokens\\n  ) internal {\\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\\n\\n    require(pendingWithdrawals[withdrawalRoot], Errors.ACTION_NOT_IN_QUEUE);\\n\\n    require(withdrawal.startTimestamp + minWithdrawalDelay <= block.timestamp, Errors.MIN_WITHDRAWAL_DELAY_NOT_PASSED);\\n\\n    require(msg.sender == withdrawal.withdrawer, Errors.ONLY_WITHDRAWER_CAN_COMPLETE);\\n\\n    if (receiveAsTokens) {\\n      require(tokens.length == withdrawal.pools.length, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    // Remove `withdrawalRoot` from pending roots\\n    delete pendingWithdrawals[withdrawalRoot];\\n\\n    // Finalize action by converting shares to tokens for each pool, or\\n    // by re-awarding shares in each pool.\\n    if (receiveAsTokens) {\\n      for (uint256 i = 0; i < withdrawal.pools.length; ) {\\n        require(\\n          withdrawal.startTimestamp + poolWithdrawalDelay[withdrawal.pools[i]] <= block.timestamp,\\n          Errors.WITHDRAWAL_DELAY_NOT_PASSED\\n        );\\n\\n        _withdrawSharesAsTokens({\\n          staker: withdrawal.staker,\\n          withdrawer: msg.sender,\\n          pool: withdrawal.pools[i],\\n          shares: withdrawal.shares[i],\\n          token: tokens[i]\\n        });\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n      // Award shares back in PoolController.sol. If withdrawer is delegated, increase the shares delegated to the operator\\n    } else {\\n      address currentOperator = delegatedTo[msg.sender];\\n      for (uint256 i = 0; i < withdrawal.pools.length; ) {\\n        require(\\n          withdrawal.startTimestamp + poolWithdrawalDelay[withdrawal.pools[i]] <= block.timestamp,\\n          Errors.WITHDRAWAL_DELAY_NOT_PASSED\\n        );\\n\\n        poolController.addShares(msg.sender, tokens[i], withdrawal.pools[i], withdrawal.shares[i]);\\n        // Similar to `isDelegated` logic\\n        if (currentOperator != address(0)) {\\n          _increaseOperatorShares({\\n            operator: currentOperator,\\n            // the 'staker' here is the address receiving new shares\\n            staker: msg.sender,\\n            pool: withdrawal.pools[i],\\n            shares: withdrawal.shares[i]\\n          });\\n        }\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    }\\n\\n    emit WithdrawalCompleted(withdrawalRoot);\\n  }\\n\\n  // @notice Increases `operator`s delegated shares in `pool` by `shares` and emits an `OperatorSharesIncreased` event\\n  function _increaseOperatorShares(address operator, address staker, IPool pool, uint256 shares) internal {\\n    operatorShares[operator][pool] += shares;\\n    emit OperatorSharesIncreased(operator, staker, pool, shares);\\n  }\\n\\n  // @notice Decreases `operator`s delegated shares in `pool` by `shares` and emits an `OperatorSharesDecreased` event\\n  function _decreaseOperatorShares(address operator, address staker, IPool pool, uint256 shares) internal {\\n    // This will revert on underflow, so no check needed\\n    operatorShares[operator][pool] -= shares;\\n    emit OperatorSharesDecreased(operator, staker, pool, shares);\\n  }\\n\\n  /**\\n   * @notice Removes `shares` in `pools` from `staker` who is currently delegated to `operator` and unstake to the `withdrawer`.\\n   * @dev If the `operator` is indeed an operator, then the operator's delegated shares in the `pools` are also decreased appropriately.\\n   * @dev If `withdrawer` is not the same address as `staker`, then thirdPartyTransfersForbidden[pool] must be set to false in the PoolController.sol.\\n   */\\n  function _removeSharesAndUnstake(\\n    address staker,\\n    address operator,\\n    address withdrawer,\\n    IPool[] memory pools,\\n    uint256[] memory shares\\n  ) internal returns (bytes32) {\\n    require(staker != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    require(pools.length != 0, Errors.POOLS_CANNOT_BE_EMPTY);\\n\\n    // Remove shares from staker and operator\\n    // Each of these operations fail if we attempt to remove more shares than exist\\n    for (uint256 i = 0; i < pools.length; ) {\\n      // Similar to `isDelegated` logic\\n      if (operator != address(0)) {\\n        _decreaseOperatorShares({operator: operator, staker: staker, pool: pools[i], shares: shares[i]});\\n      }\\n\\n      require(staker == withdrawer || !poolController.thirdPartyTransfersForbidden(pools[i]), Errors.THIRD_PARTY_TRANSFERS_FORBIDDEN);\\n      // this call will revert if `shares[i]` exceeds the Staker's current shares in `pools[i]`\\n      poolController.removeShares(staker, pools[i], shares[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Create queue entry and increment withdrawal nonce\\n    uint256 nonce = cumulativeWithdrawalsQueued[staker];\\n    cumulativeWithdrawalsQueued[staker]++;\\n\\n    Withdrawal memory withdrawal = Withdrawal({\\n      staker: staker,\\n      delegatedTo: operator,\\n      withdrawer: withdrawer,\\n      nonce: nonce,\\n      startTimestamp: uint32(block.timestamp),\\n      pools: pools,\\n      shares: shares\\n    });\\n\\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\\n\\n    // Place withdrawal in queue\\n    pendingWithdrawals[withdrawalRoot] = true;\\n\\n    emit WithdrawalQueued(withdrawalRoot, withdrawal);\\n    return withdrawalRoot;\\n  }\\n\\n  /**\\n   * @notice Withdraws `shares` in `pool` to `withdrawer`. Call is ultimately forwarded to the `pool` with info on the `token`.\\n   */\\n  function _withdrawSharesAsTokens(address staker, address withdrawer, IPool pool, uint256 shares, IERC20 token) internal {\\n    poolController.withdrawSharesAsTokens(withdrawer, pool, shares, token);\\n  }\\n\\n  function _setMinWithdrawalDelay(uint256 _minWithdrawalDelay) internal {\\n    require(_minWithdrawalDelay <= MAX_WITHDRAWAL_DELAY, Errors.MIN_WITHDRAWAL_DELAY_EXCEEDS_MAX);\\n    emit MinWithdrawalDelaySet(minWithdrawalDelay, _minWithdrawalDelay);\\n    minWithdrawalDelay = _minWithdrawalDelay;\\n  }\\n\\n  /**\\n   * @notice Sets the withdrawal delay for each pool in `_pools` to `_withdrawalDelay`.\\n   * gets called when initializing contract or by calling `setPoolWithdrawalDelay`\\n   */\\n  function _setPoolWithdrawalDelay(IPool[] calldata _pools, uint256[] calldata _withdrawalDelay) internal {\\n    require(_pools.length == _withdrawalDelay.length, Errors.INPUT_LENGTH_MISMATCH);\\n    uint256 numStrats = _pools.length;\\n    for (uint256 i = 0; i < numStrats; ++i) {\\n      IPool pool = _pools[i];\\n      uint256 prevPoolWithdrawalDelay = poolWithdrawalDelay[pool];\\n      uint256 newPoolWithdrawalDelay = _withdrawalDelay[i];\\n      require(newPoolWithdrawalDelay <= MAX_WITHDRAWAL_DELAY, Errors.POOL_WITHDRAWAL_DELAY_EXCEEDS_MAX);\\n\\n      // set the new withdrawal delay\\n      poolWithdrawalDelay[pool] = newPoolWithdrawalDelay;\\n      emit PoolWithdrawalDelaySet(pool, prevPoolWithdrawalDelay, newPoolWithdrawalDelay);\\n    }\\n  }\\n\\n  /*******************************************************************************\\n                            VIEW FUNCTIONS\\n    *******************************************************************************/\\n\\n  /**\\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\\n   *\\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n   * for more detailed information please read EIP-712.\\n   */\\n  function domainSeparator() public view returns (bytes32) {\\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\\n      return _DOMAIN_SEPARATOR;\\n    } else {\\n      return _calculateDomainSeparator();\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n   */\\n  function isDelegated(address staker) public view returns (bool) {\\n    return (delegatedTo[staker] != address(0));\\n  }\\n\\n  /**\\n   * @notice Returns true is an operator has previously registered for delegation.\\n   */\\n  function isOperator(address operator) public view returns (bool) {\\n    return delegatedTo[operator] == operator;\\n  }\\n\\n  /**\\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\\n   */\\n  function operatorDetails(address operator) external view returns (OperatorDetails memory) {\\n    return _operatorDetails[operator];\\n  }\\n\\n  /**\\n   * @notice Returns the delegationApprover account for an operator\\n   */\\n  function delegationApprover(address operator) external view returns (address) {\\n    return _operatorDetails[operator].delegationApprover;\\n  }\\n\\n  /**\\n   * @notice Returns the stakerOptOutWindow for an operator\\n   */\\n  function stakerOptOutWindow(address operator) external view returns (uint256) {\\n    return _operatorDetails[operator].stakerOptOutWindow;\\n  }\\n\\n  /// @notice Given array of pools, returns array of shares for the operator\\n  function getOperatorShares(address operator, IPool[] memory pools) public view returns (uint256[] memory) {\\n    uint256[] memory shares = new uint256[](pools.length);\\n    for (uint256 i = 0; i < pools.length; ++i) {\\n      shares[i] = operatorShares[operator][pools[i]];\\n    }\\n    return shares;\\n  }\\n\\n  /**\\n   * @notice Returns the number of actively-delegatable shares a staker has across all pools.\\n   * @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\\n   */\\n  function getDelegatableShares(address staker) public view returns (IPool[] memory, uint256[] memory) {\\n    // Get currently active shares and pools for `staker`\\n    (IPool[] memory poolControllerStrats, uint256[] memory poolControllerShares) = poolController.getDeposits(staker);\\n    return (poolControllerStrats, poolControllerShares);\\n  }\\n\\n  /**\\n   * @notice Given a list of pools, return the minimum cooldown that must pass to withdraw\\n   * from all the inputted pools. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\\n   * @param pools The pools to check withdrawal delays for\\n   */\\n  function getWithdrawalDelay(IPool[] calldata pools) public view returns (uint256) {\\n    uint256 withdrawalDelay = minWithdrawalDelay;\\n    for (uint256 i = 0; i < pools.length; ++i) {\\n      uint256 currWithdrawalDelay = poolWithdrawalDelay[pools[i]];\\n      if (currWithdrawalDelay > withdrawalDelay) {\\n        withdrawalDelay = currWithdrawalDelay;\\n      }\\n    }\\n    return withdrawalDelay;\\n  }\\n\\n  /// @notice Returns the keccak256 hash of `withdrawal`.\\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) public pure returns (bytes32) {\\n    return keccak256(abi.encode(withdrawal));\\n  }\\n\\n  /**\\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n   * @param staker The signing staker\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32) {\\n    // fetch the staker's current nonce\\n    uint256 currentStakerNonce = stakerNonce[staker];\\n    // calculate the digest hash\\n    return calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, expiry);\\n  }\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n   * @param staker The signing staker\\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateStakerDelegationDigestHash(\\n    address staker,\\n    uint256 _stakerNonce,\\n    address operator,\\n    uint256 expiry\\n  ) public view returns (bytes32) {\\n    // calculate the struct hash\\n    bytes32 stakerStructHash = keccak256(abi.encode(STAKER_DELEGATION_TYPEHASH, staker, operator, _stakerNonce, expiry));\\n    // calculate the digest hash\\n    bytes32 stakerDigestHash = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator(), stakerStructHash));\\n    return stakerDigestHash;\\n  }\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n   * @param staker The account delegating their stake\\n   * @param operator The account receiving delegated stake\\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n   * @param approverSalt A unique and single use value associated with the approver signature.\\n   * @param expiry Time after which the approver's signature becomes invalid\\n   */\\n  function calculateDelegationApprovalDigestHash(\\n    address staker,\\n    address operator,\\n    address _delegationApprover,\\n    bytes32 approverSalt,\\n    uint256 expiry\\n  ) public view returns (bytes32) {\\n    // calculate the struct hash\\n    bytes32 approverStructHash = keccak256(\\n      abi.encode(DELEGATION_APPROVAL_TYPEHASH, _delegationApprover, staker, operator, approverSalt, expiry)\\n    );\\n    // calculate the digest hash\\n    bytes32 approverDigestHash = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator(), approverStructHash));\\n    return approverDigestHash;\\n  }\\n\\n  /**\\n   * @dev Recalculates the domain separator when the chainid changes due to a fork.\\n   */\\n  function _calculateDomainSeparator() internal view returns (bytes32) {\\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('BinLayer')), block.chainid, address(this)));\\n  }\\n}\\n\",\"keccak256\":\"0xb70e4c4de24f65209413526653accd6f3888a17f5eb3ad5c12bb26bb02a00ee8\",\"license\":\"LGPL-3.0\"},\"contracts/core/DelegationControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '../interfaces/IPoolController.sol';\\nimport '../interfaces/IDelegationController.sol';\\nimport '../interfaces/ISlasher.sol';\\n\\n/**\\n * @title Storage variables for the `DelegationController.sol` contract.\\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\\n */\\nabstract contract DelegationControllerStorage is IDelegationController {\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\\n\\n  /// @notice The EIP-712 typehash for the `StakerDelegation` struct used by the contract\\n  bytes32 public constant STAKER_DELEGATION_TYPEHASH =\\n    keccak256('StakerDelegation(address staker,address operator,uint256 nonce,uint256 expiry)');\\n\\n  /// @notice The EIP-712 typehash for the `DelegationApproval` struct used by the contract\\n  bytes32 public constant DELEGATION_APPROVAL_TYPEHASH =\\n    keccak256('DelegationApproval(address delegationApprover,address staker,address operator,bytes32 salt,uint256 expiry)');\\n\\n  /**\\n   * @notice Original EIP-712 Domain separator for this contract.\\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\\n   */\\n  bytes32 internal _DOMAIN_SEPARATOR;\\n\\n  /// @notice The PoolController.sol contract for BinLayer\\n  IPoolController public immutable poolController;\\n\\n  /// @notice The Slasher contract for BinLayer\\n  ISlasher public immutable slasher;\\n\\n  // 30 days (60 * 60 * 24 * 30 = 2,592,000)\\n  uint256 public constant MAX_WITHDRAWAL_DELAY = 2592000;\\n\\n  /**\\n   * @notice returns the total number of shares in `pool` that are delegated to `operator`.\\n   * @notice Mapping: operator => pool => total number of shares in the pool delegated to the operator.\\n   * @dev By design, the following invariant should hold for each Pool:\\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n   * = sum (delegateable shares of all stakers delegated to the operator)\\n   */\\n  mapping(address => mapping(IPool => uint256)) public operatorShares;\\n\\n  /**\\n   * @notice Mapping: operator => OperatorDetails struct\\n   * @dev This struct is internal with an external getter so we can return an `OperatorDetails memory` object\\n   */\\n  mapping(address => OperatorDetails) internal _operatorDetails;\\n\\n  /**\\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n   */\\n  mapping(address => address) public delegatedTo;\\n\\n  /// @notice Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked.\\n  mapping(address => uint256) public stakerNonce;\\n\\n  /**\\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n   */\\n  mapping(address => mapping(bytes32 => bool)) public delegationApproverSaltIsSpent;\\n\\n  /**\\n   * @notice Global minimum withdrawal delay for all pool withdrawals.\\n   * In a prior Goerli release, we only had a global min withdrawal delay across all strategies.\\n   * In addition, we now also configure withdrawal delays on a per-pool basis.\\n   * To withdraw from a pool, max(minWithdrawalDelay, poolWithdrawalDelay[pool]) number of timestamp must have passed.\\n   * See mapping poolWithdrawalDelay below for per-pool withdrawal delays.\\n   */\\n  uint256 public minWithdrawalDelay;\\n\\n  /// @notice Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending\\n  mapping(bytes32 => bool) public pendingWithdrawals;\\n\\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n  mapping(address => uint256) public cumulativeWithdrawalsQueued;\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract per Pool for completing queued withdrawals. Measured in timestamp, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   */\\n  mapping(IPool => uint256) public poolWithdrawalDelay;\\n\\n  /// @notice Wrapped token gateway\\n  address public wrappedTokenGateway;\\n\\n  constructor(IPoolController _poolController, ISlasher _slasher) {\\n    poolController = _poolController;\\n    slasher = _slasher;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa5e614811158476f0d6a466ab425d2b802caba5700bd7bab52cb5fd65125923f\",\"license\":\"LGPL-3.0\"},\"contracts/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the BinLayer protocol\\n */\\nlibrary Errors {\\n  string public constant NOT_PAUSER = '1'; // 'msg.sender is not permissioned as pauser'\\n  string public constant NOT_UNPAUSER = '2'; // 'msg.sender is not permissioned as unpauser'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '3'; // 'zero address input'\\n  string public constant CONTRACT_PAUSED = '4'; // 'contract is paused'\\n  string public constant INDEX_PAUSED = '5'; // 'index is paused'\\n  string public constant INITIALIZE_ONCE = '6'; // '_initializePauser can only be called once'\\n  string public constant INVALID_UNPAUSE = '7'; // 'invalid attempt to unpause functionality'\\n  string public constant INVALID_PAUSE = '8'; // 'invalid attempt to pause functionality'\\n  string public constant NOT_POOL_WHITELISTER = '9'; // 'not the pool whitelister'\\n  string public constant POOL_NOT_WHITELISTED = '10'; // 'pool not whitelisted'\\n  string public constant NOT_DELEGATION_CONTROLLER = '11'; // 'not the DelegationController'\\n  string public constant THIRD_PARTY_TRANSFERS_DISABLED = '12'; // 'third transfers disabled'\\n  string public constant SIGNATURE_EXPIRED = '13'; // 'signature expired'\\n  string public constant ARRAY_LENGTH_MISMATCH = '14'; // 'array lengths do not match'\\n  string public constant ZERO_SHARES_NOT_VALID = '15'; // 'shares should not be zero!'\\n  string public constant DEPOSIT_EXCEEDS_MAX_LENGTH = '16'; // 'deposit would exceed MAX_STAKER_POOL_LIST_LENGTH'\\n  string public constant SHARE_AMOUNT_TOO_HIGH = '17'; // 'share amount too high'\\n  string public constant POOL_NOT_FOUND = '18'; // 'pool not found'\\n  string public constant ONLY_POOL_CONTROLLER = '19'; // 'caller must be PoolController'\\n  string public constant OPERATOR_ALREADY_REGISTERED = '20'; // 'operator has already registered'\\n  string public constant CALLER_NOT_OPERATOR = '21'; // 'caller must be an operator'\\n  string public constant STAKER_MUST_BE_DELEGATED = '22'; // 'staker must be delegated to undelegate'\\n  string public constant CANNOT_UNDELEGATE_OPERATOR = '23'; // 'operators cannot be undelegated'\\n  string public constant CALLER_CANNOT_UNDELEGATE = '24'; // 'caller cannot undelegate staker'\\n  string public constant INPUT_LENGTH_MISMATCH = '25'; // 'input length mismatch'\\n  string public constant WITHDRAWER_NOT_STAKER_OR_GATEWAY = '26'; // 'withdrawer must be staker or wrapped token gateway'\\n  string public constant OPT_OUT_WINDOW_EXCEEDS_MAX = '27'; // 'stakerOptOutWindow cannot be > MAX_STAKER_OPT_OUT_WINDOW'\\n  string public constant DECREASE_OPT_OUT_WINDOW = '28'; // 'stakerOptOutWindow cannot be decreased'\\n  string public constant ALREADY_DELEGATED = '29'; // 'staker is already actively delegated'\\n  string public constant NOT_REGISTERED_IN_BINLAYER = '30'; // 'operator is not registered in BinLayer'\\n  string public constant SALT_ALREADY_SPENT = '31'; // 'salt already spent'\\n  string public constant ACTION_NOT_IN_QUEUE = '32'; // 'action is not in queue'\\n  string public constant MIN_WITHDRAWAL_DELAY_NOT_PASSED = '33'; // 'minWithdrawalDelay period has not yet passed'\\n  string public constant ONLY_WITHDRAWER_CAN_COMPLETE = '34'; // 'only withdrawer can complete action'\\n  string public constant WITHDRAWAL_DELAY_NOT_PASSED = '35'; // 'withdrawalDelay period has not yet passed for this pool'\\n  string public constant POOLS_CANNOT_BE_EMPTY = '36'; // 'pools cannot be empty'\\n  string public constant THIRD_PARTY_TRANSFERS_FORBIDDEN = '37'; // 'withdrawer must be same address as staker if thirdPartyTransfersForbidden are set'\\n  string public constant MIN_WITHDRAWAL_DELAY_EXCEEDS_MAX = '38'; // '_minWithdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\\n  string public constant POOL_WITHDRAWAL_DELAY_EXCEEDS_MAX = '39'; // '_withdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\\n  string public constant WITHDRAWER_MUST_BE_STAKER = '40'; // 'withdrawer must be staker'\\n  string public constant ONLY_SUPPORT_WRAPPED_TOKEN_POOL = '41'; // 'only support wrapped token pool'\\n  string public constant WITHDRAW_AMOUNT_SHARES_TOO_HIGH = '42'; // 'amountShares must be less than or equal to totalShares'\\n  string public constant DEPOSIT_ONLY_UNDERLYING_TOKEN = '43'; // 'can only deposit underlying token'\\n  string public constant WITHDRAW_ONLY_UNDERLYING_TOKEN = '44'; // 'can only withdraw underlying token'\\n  string public constant MAX_DEPOSITS_EXCEEDED = '45'; // 'max deposits exceeded'\\n  string public constant MAX_PER_DEPOSIT_LIMIT_EXCEEDED = '46'; // 'max per deposit exceeded'\\n  string public constant MAX_PER_DEPOSIT_EXCEEDS_MAX_TOTAL = '47'; // 'maxPerDeposit exceeds maxTotalDeposits'\\n  string public constant CANNOT_CANCEL_SPENT_SALT = '48'; // 'cannot cancel spent salt'\\n  string public constant NOT_REWARDS_UPDATER = '49'; // 'caller is not the rewards updater'\\n  string public constant NOT_CREATE_REWARDS_FOR_ALL_SUBMITTER = '50'; // 'caller is not a valid create rewards for all submission submitter'\\n  string public constant NOT_CLAIMER = '51'; // 'caller is not valid claimer'\\n  string public constant CUMULATIVE_EARNINGS_MUST_BE_GREATER_THAN_CUMULATIVE_LAIMED = '52'; // 'cumulative earnings must be gt than cumulative claimed'\\n  string public constant NEW_ROOT_MUST_BE_NEWER_CALCULATED_PERIOD = '53'; // 'new root must be for newer calculated period'\\n  string public constant CANNOT_BE_IN_THE_FEATURE = '54'; // 'rewardsCalculationEndTimestamp cannot be in the future'\\n  string public constant INVALID_ROOT_INDEX = '55'; // 'invalid rootIndex'\\n  string public constant ROOT_ALREADY_DISABLED = '56'; // 'root already disabled'\\n  string public constant ROOT_ALREADY_ACTIVATED = '57'; // 'root already activated'\\n  string public constant NO_POOLS_SET = '58'; // 'no pools set'\\n  string public constant AMOUNT_CANNOT_BE_ZERO = '59'; // 'amount cannot be 0'\\n  string public constant AMOUNT_TOO_LARGE = '60'; // 'amount too large'\\n  string public constant DURATION_EXCEEDS_MAX_REWARDS_DURATION = '61'; // 'duration exceeds MAX_REWARDS_DURATION'\\n  string public constant DURATION_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS = '62'; // 'duration must be a multiple of CALCULATION_INTERVAL_SECONDS'\\n  string public constant STARTTIMESTAMP_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS = '63'; // 'startTimestamp must be a multiple of CALCULATION_INTERVAL_SECONDS'\\n  string public constant STARTTIMESTAMP_TOO_FAR_IN_THE_PAST = '64'; // 'startTimestamp too far in the past'\\n  string public constant STARTTIMESTAMP_TOO_FAR_IN_THE_FUTURE = '65'; // 'startTimestamp too far in the future'\\n  string public constant INVALID_POOL_CONSIDERED = '66'; // 'invalid pool considered'\\n  string public constant POOLS_MUST_BE_ASCENDING = '67'; // 'pools must be in ascending order to handle duplicates'\\n  string public constant ROOT_IS_DISABLED = '68'; // 'root is disabled'\\n  string public constant ROOT_NOT_ACTIVATED_YET = '69'; // 'root not activated yet'\\n  string public constant INVALID_TOKEN_LEAF_INDEX = '70'; // 'invalid token leaf index'\\n  string public constant INVALID_TOKEN_CLAIM_PROOF = '71'; // 'invalid token claim proof'\\n  string public constant INVALID_EARNER_LEAF_INDEX = '72'; // 'invalid earner leaf index'\\n  string public constant INVALID_EARNER_CLAIM_PROOF = '73'; // 'invalid earner claim proof'\\n  string public constant ROOT_NOT_FOUND = '74'; // 'root not found'\\n}\\n\",\"keccak256\":\"0xfea887ad75ed3527c319c8cec7c5de2cbfb7d10e5998eb3b860bb1b32cca8286\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IDelegationController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IPool.sol';\\nimport './ISignatureUtils.sol';\\nimport './IPoolController.sol';\\n\\n/**\\n * @title DelegationController\\n * @notice  This is the contract for delegation in BinLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in BinLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the PoolController.sol)\\n */\\ninterface IDelegationController is ISignatureUtils {\\n  // @notice Struct used for storing information about a single operator who has registered with BinLayer\\n  struct OperatorDetails {\\n    // @notice DEPRECATED -- this field is no longer used, rewards are handled in RewardsCoordinator.sol\\n    address __deprecated_earningsReceiver;\\n    /**\\n     * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n     * @dev Signature verification follows these rules:\\n     * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n     * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n     * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n     */\\n    address delegationApprover;\\n    /**\\n     * @notice A minimum delay -- enforced between:\\n     * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n     * and\\n     * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n     * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n     * then they are only allowed to either increase this value or keep it the same.\\n     */\\n    uint32 stakerOptOutWindow;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n   * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n   */\\n  struct StakerDelegation {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the staker's nonce\\n    uint256 nonce;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n   * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n   */\\n  struct DelegationApproval {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the operator's provided salt\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * Struct type used to specify an withdraw. Rather than storing the entire struct, only a hash is stored.\\n   * In functions that operate on existing queued withdrawals -- e.g. withdraw`, the data is resubmitted and the hash of the submitted\\n   * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n   */\\n  struct Withdrawal {\\n    // The address that originated the Withdrawal\\n    address staker;\\n    // The address that the staker was delegated to at the time that the Withdrawal was created\\n    address delegatedTo;\\n    // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n    address withdrawer;\\n    // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n    uint256 nonce;\\n    // Block timestamp when the Withdrawal was created\\n    uint32 startTimestamp;\\n    // Array of pools that the Withdrawal contains\\n    IPool[] pools;\\n    // Array containing the amount of shares in each Pool in the `pools` array\\n    uint256[] shares;\\n  }\\n\\n  struct UnstakeParams {\\n    // Array of pools that the Unstake contains\\n    IPool[] pools;\\n    // Array containing the amount of shares in each Pool in the `pools` array\\n    uint256[] shares;\\n    // The address of the withdrawer\\n    address withdrawer;\\n  }\\n\\n  // @notice Emitted when a new operator registers in BinLayer and provides their OperatorDetails.\\n  event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\\n\\n  /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n  event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\\n\\n  /**\\n   * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n   */\\n  event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\\n\\n  /// @notice Emitted whenever an operator's shares are increased for a given pool. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesIncreased(address indexed operator, address staker, IPool pool, uint256 shares);\\n\\n  /// @notice Emitted whenever an operator's shares are decreased for a given pool. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesDecreased(address indexed operator, address staker, IPool pool, uint256 shares);\\n\\n  /// @notice Emitted when @param staker delegates to @param operator.\\n  event StakerDelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker undelegates from @param operator.\\n  event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n  event StakerForceUndelegated(address indexed staker, address indexed operator);\\n\\n  /**\\n   * @notice Emitted when a new withdrawal is queued.\\n   * @param withdrawalRoot Is the hash of the `withdrawal`.\\n   * @param withdrawal Is the withdrawal itself.\\n   */\\n  event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n  /// @notice Emitted when a queued withdrawal is completed\\n  event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n  /// @notice Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event MinWithdrawalDelaySet(uint256 previousValue, uint256 newValue);\\n\\n  /// @notice Emitted when the `poolWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event PoolWithdrawalDelaySet(IPool pool, uint256 previousValue, uint256 newValue);\\n\\n  event UpdateWrappedTokenGateway(address previousGateway, address currentGateway);\\n\\n  /**\\n   * @notice Registers the caller as an operator in BinLayer.\\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n   *\\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Updates an operator's stored `OperatorDetails`.\\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n   *\\n   * @dev The caller must have previously registered as an operator in BinLayer.\\n   */\\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\\n\\n  /**\\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n   * @param metadataURI The URI for metadata associated with an operator\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Caller delegates their stake to an operator.\\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n   * @param approverSalt A unique single use value tied to an individual signature.\\n   * @dev The approverSignatureAndExpiry is used in the event that:\\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n   *                  AND\\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external;\\n\\n  /**\\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n   * @param staker The account delegating stake to an `operator` account\\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n   *\\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n   * is the `msg.sender`, then approval is assumed.\\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateToBySignature(\\n    address staker,\\n    address operator,\\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\\n    SignatureWithExpiry memory approverSignatureAndExpiry,\\n    bytes32 approverSalt\\n  ) external;\\n\\n  /**\\n   * @notice Undelegates the staker from the operator who they are delegated to.\\n   * @param staker The account to be undelegated.\\n   * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n   *\\n   * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n   * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n   * @dev Reverts if the `staker` is already undelegated.\\n   */\\n  function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\\n\\n  /**\\n   * Allows a staker to withdraw some shares. Withdrawn shares/pools are immediately removed\\n   * from the staker. If the staker is delegated, withdrawn shares/pools are also removed from\\n   * their operator.\\n   *\\n   * All withdrawn shares/pools are placed in a queue and can be fully withdrawn after a delay.\\n   */\\n  function unstakes(UnstakeParams[] calldata unstakeParams) external returns (bytes32[] memory);\\n\\n  /**\\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n   * @param withdrawal The Withdrawal to complete.\\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Pool in the `withdrawal.pools` array.\\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified pools themselves\\n   * and sent to the caller, through calls to `withdrawal.pools[i].withdraw`. If false, then the shares in the specified pools\\n   * will simply be transferred to the caller directly.\\n   * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n   * @dev beaconChainETHPool shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n   * any beaconChainETHPool shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n   * any other pools, which will be transferred to the withdrawer.\\n   */\\n  function withdraw(Withdrawal calldata withdrawal, IERC20[] calldata tokens, uint256 middlewareTimesIndex, bool receiveAsTokens) external;\\n\\n  /**\\n   * @notice Array-ified version of `withdraw`.\\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n   * @param withdrawals The Withdrawals to complete.\\n   * @param tokens Array of tokens for each Withdrawal. See `withdraw` for the usage of a single array.\\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `withdraw` for the usage of a single index.\\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `withdraw` for the usage of a single boolean.\\n   * @dev See `withdraw` for relevant dev tags\\n   */\\n  function withdraws(\\n    Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexes,\\n    bool[] calldata receiveAsTokens\\n  ) external;\\n\\n  /**\\n   * @notice Increases a staker's delegated share balance in a pool.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param pool The pool in which to increase the delegated shares.\\n   * @param shares The number of shares to increase.\\n   *\\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the PoolController.sol.\\n   */\\n  function increaseDelegatedShares(address staker, IPool pool, uint256 shares) external;\\n\\n  /**\\n   * @notice Decreases a staker's delegated share balance in a pool.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param pool The pool in which to decrease the delegated shares.\\n   * @param shares The number of shares to decrease.\\n   *\\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the PoolController.sol.\\n   */\\n  function decreaseDelegatedShares(address staker, IPool pool, uint256 shares) external;\\n\\n  /**\\n   * @notice returns the address of the operator that `staker` is delegated to.\\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n   */\\n  function delegatedTo(address staker) external view returns (address);\\n\\n  /**\\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\\n   */\\n  function operatorDetails(address operator) external view returns (OperatorDetails memory);\\n\\n  /**\\n   * @notice Returns the delegationApprover account for an operator\\n   */\\n  function delegationApprover(address operator) external view returns (address);\\n\\n  /**\\n   * @notice Returns the stakerOptOutWindow for an operator\\n   */\\n  function stakerOptOutWindow(address operator) external view returns (uint256);\\n\\n  /**\\n   * @notice Given array of pools, returns array of shares for the operator\\n   */\\n  function getOperatorShares(address operator, IPool[] memory pools) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Given a list of pools, return the minimum cooldown that must pass to withdraw\\n   * from all the inputted pools. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\\n   * @param pools The pools to check withdrawal delays for\\n   */\\n  function getWithdrawalDelay(IPool[] calldata pools) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the total number of shares in `pool` that are delegated to `operator`.\\n   * @notice Mapping: operator => pool => total number of shares in the pool delegated to the operator.\\n   * @dev By design, the following invariant should hold for each Pool:\\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n   * = sum (delegateable shares of all stakers delegated to the operator)\\n   */\\n  function operatorShares(address operator, IPool pool) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n   */\\n  function isDelegated(address staker) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true is an operator has previously registered for delegation.\\n   */\\n  function isOperator(address operator) external view returns (bool);\\n\\n  /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n  function stakerNonce(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n   */\\n  function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   * Note that pools each have a separate withdrawal delay, which can be greater than this value. So the minimum cooldown that must pass\\n   * to withdraw a pool is MAX(minWithdrawalDelay, poolWithdrawalDelay[pool])\\n   */\\n  function minWithdrawalDelay() external view returns (uint256);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract per Pool for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   */\\n  function poolWithdrawalDelay(IPool pool) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n   * @param staker The signing staker\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n   * @param staker The signing staker\\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateStakerDelegationDigestHash(\\n    address staker,\\n    uint256 _stakerNonce,\\n    address operator,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n   * @param staker The account delegating their stake\\n   * @param operator The account receiving delegated stake\\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n   * @param approverSalt A unique and single use value associated with the approver signature.\\n   * @param expiry Time after which the approver's signature becomes invalid\\n   */\\n  function calculateDelegationApprovalDigestHash(\\n    address staker,\\n    address operator,\\n    address _delegationApprover,\\n    bytes32 approverSalt,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n  function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n  function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\\n   *\\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n   * for more detailed information please read EIP-712.\\n   */\\n  function domainSeparator() external view returns (bytes32);\\n\\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n  function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\\n\\n  /// @notice Returns the keccak256 hash of `withdrawal`.\\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x169f9a5a1583cf26d37e642ddaeb0bda2a588ca9a52add26914977a5641f56bf\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '../interfaces/IPauserRegistry.sol';\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\n\\ninterface IPausable {\\n  /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\\n  event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\\n\\n  /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\\n  event Paused(address indexed account, uint256 newPausedStatus);\\n\\n  /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\\n  event Unpaused(address indexed account, uint256 newPausedStatus);\\n\\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n  function pauserRegistry() external view returns (IPauserRegistry);\\n\\n  /**\\n   * @notice This function is used to pause an BinLayer contract's functionality.\\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n   */\\n  function pause(uint256 newPausedStatus) external;\\n\\n  /**\\n   * @notice Alias for `pause(type(uint256).max)`.\\n   */\\n  function pauseAll() external;\\n\\n  /**\\n   * @notice This function is used to unpause an BinLayer contract's functionality.\\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n   */\\n  function unpause(uint256 newPausedStatus) external;\\n\\n  /// @notice Returns the current paused status as a uint256.\\n  function paused() external view returns (uint256);\\n\\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n  function paused(uint8 index) external view returns (bool);\\n\\n  /// @notice Allows the unpauser to set a new pauser registry\\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\\n}\\n\",\"keccak256\":\"0xf7d61224369ca117fb3601b8de530f800f1dc786ab91c678ab1ab41dc61b059a\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPauserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n */\\ninterface IPauserRegistry {\\n  event PauserStatusChanged(address pauser, bool canPause);\\n\\n  event UnpauserChanged(address previousUnpauser, address newUnpauser);\\n\\n  /// @notice Mapping of addresses to whether they hold the pauser role.\\n  function isPauser(address pauser) external view returns (bool);\\n\\n  /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n  function unpauser() external view returns (address);\\n}\\n\",\"keccak256\":\"0x55bbced6095c87669e298ee7818c4d1df93fb9988965009594fe8facb2065b46\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Minimal interface for an `Pool` contract.\\n * @notice Custom `Pool` implementations may expand extensively on this interface.\\n */\\ninterface IPool {\\n  /**\\n   * @notice Used to deposit tokens into this Pool\\n   * @param token is the ERC20 token being deposited\\n   * @param amount is the amount of token being deposited\\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\\n   * `depositIntoPool` function, and individual share balances are recorded in the poolController as well.\\n   * @return newShares is the number of new shares issued at the current exchange ratio.\\n   */\\n  function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @notice Used to withdraw tokens from this Pool, to the `recipient`'s address\\n   * @param recipient is the address to receive the withdrawn funds\\n   * @param token is the ERC20 token being transferred out\\n   * @param amountShares is the amount of shares being withdrawn\\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\\n   * other functions, and individual share balances are recorded in the poolController as well.\\n   */\\n  function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this pool. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n   */\\n  function userUnderlying(address user) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current total shares of `user` in this pool, by\\n   * querying the `poolController` contract\\n   */\\n  function shares(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this pool. In contrast to `userUnderlying`, this function guarantees no state modifications\\n   */\\n  function userUnderlyingView(address user) external view returns (uint256);\\n\\n  /// @notice The underlying token for shares in this Pool\\n  function underlyingToken() external view returns (IERC20);\\n\\n  /// @notice The total number of extant shares in this Pool\\n  function totalShares() external view returns (uint256);\\n\\n  /// @notice Returns either a brief string explaining the pool's goal & purpose, or a link to metadata that explains in more detail.\\n  function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9496d209cfff01787ee1a3f8a5b79638ff903d70ae121985185ac95c84bc1884\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPoolController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IPool.sol';\\nimport './ISlasher.sol';\\nimport './IDelegationController.sol';\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into BinLayer.\\n * @notice See the `PoolController` contract itself for implementation details.\\n */\\ninterface IPoolController {\\n  /**\\n   * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n   * @param staker Is the staker who is depositing funds into BinLayer.\\n   * @param pool Is the pool that `staker` has deposited into.\\n   * @param token Is the token that `staker` deposited.\\n   * @param shares Is the number of new shares `staker` has been granted in `pool`.\\n   */\\n  event Deposit(address staker, IERC20 token, IPool pool, uint256 shares);\\n\\n  /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a pool and value by the owner\\n  event UpdatedThirdPartyTransfersForbidden(IPool pool, bool value);\\n\\n  /// @notice Emitted when the `poolWhitelister` is changed\\n  event PoolWhitelisterChanged(address previousAddress, address newAddress);\\n\\n  /// @notice Emitted when a pool is added to the approved list of pools for deposit\\n  event PoolAddedToDepositWhitelist(IPool pool);\\n\\n  /// @notice Emitted when a pool is removed from the approved list of pools for deposit\\n  event PoolRemovedFromDepositWhitelist(IPool pool);\\n\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `msg.sender`\\n   * @param pool is the specified pool where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the pool by the staker\\n   * @return shares The amount of new shares in the `pool` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoPool(IPool pool, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `staker`\\n   * @param staker Staker address\\n   * @param pool is the specified pool where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the pool by the staker\\n   * @return shares The amount of new shares in the `pool` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoPoolWithStaker(address staker, IPool pool, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Used for depositing an asset into the specified pool with the resultant shares credited to `staker`,\\n   * who must sign off on the action.\\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n   * purely to help one address deposit 'for' another.\\n   * @param pool is the specified pool where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the pool by the staker\\n   * @param staker the staker that the deposited assets will be credited to\\n   * @param expiry the timestamp at which the signature expires\\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n   * following EIP-1271 if the `staker` is a contract\\n   * @return shares The amount of new shares in the `pool` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n   * targeting stakers who may be attempting to undelegate.\\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this pool\\n   *\\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy\\n   */\\n  function depositIntoPoolWithSignature(\\n    IPool pool,\\n    IERC20 token,\\n    uint256 amount,\\n    address staker,\\n    uint256 expiry,\\n    bytes memory signature\\n  ) external returns (uint256 shares);\\n\\n  /// @notice Used by the DelegationController.sol to remove a Staker's shares from a particular pool when entering the withdrawal queue\\n  function removeShares(address staker, IPool pool, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationController.sol to award a Staker some shares that have passed through the withdrawal queue\\n  function addShares(address staker, IERC20 token, IPool pool, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationController.sol to convert withdrawn shares to tokens and send them to a recipient\\n  function withdrawSharesAsTokens(address recipient, IPool pool, uint256 shares, IERC20 token) external;\\n\\n  /// @notice Returns the current shares of `user` in `pool`\\n  function stakerPoolShares(address user, IPool pool) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Get all details on the staker's deposits and corresponding shares\\n   * @return (staker's pools, shares in these pools)\\n   */\\n  function getDeposits(address staker) external view returns (IPool[] memory, uint256[] memory);\\n\\n  /// @notice Simple getter function that returns `stakerPoolList[staker].length`.\\n  function stakerPoolListLength(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Owner-only function that adds the provided Pools to the 'whitelist' of pools that stakers can deposit into\\n   * @param poolsToWhitelist Pools that will be added to the `poolIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each pool\\n   */\\n  function addPoolsToDepositWhitelist(IPool[] calldata poolsToWhitelist, bool[] calldata thirdPartyTransfersForbiddenValues) external;\\n\\n  /**\\n   * @notice Owner-only function that removes the provided Pools from the 'whitelist' of pools that stakers can deposit into\\n   * @param poolsToRemoveFromWhitelist Pools that will be removed to the `poolIsWhitelistedForDeposit` mapping (if they are in it)\\n   */\\n  function removePoolsFromDepositWhitelist(IPool[] calldata poolsToRemoveFromWhitelist) external;\\n\\n  /// @notice Returns the single, central Delegation contract of BinLayer\\n  function delegation() external view returns (IDelegationController);\\n\\n  /// @notice Returns the single, central Slasher contract of BinLayer\\n  function slasher() external view returns (ISlasher);\\n\\n  /// @notice Returns the address of the `poolWhitelister`\\n  function poolWhitelister() external view returns (address);\\n\\n  /// @notice Returns bool for whether or not `pool` is whitelisted for deposit\\n  function poolIsWhitelistedForDeposit(IPool pool) external view returns (bool);\\n\\n  /**\\n   * @notice Returns bool for whether or not `pool` enables credit transfers. i.e enabling\\n   * depositIntoPoolWithSignature calls or queueing withdrawals to a different address than the staker.\\n   */\\n  function thirdPartyTransfersForbidden(IPool pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2db650b42306ac72dc758828f01b962ff15c7b632b23dc7b60bd72806a01d206\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title The interface for common signature utilities.\\n */\\ninterface ISignatureUtils {\\n  // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithSaltAndExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the salt used to generate the signature\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n}\\n\",\"keccak256\":\"0xd2f901c14d08037588427527905fafbe1610b68a38d62c93925ea0f258f226a4\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISlasher.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IPoolController.sol';\\nimport './IDelegationController.sol';\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for BinLayer.\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n  // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n  struct MiddlewareTimes {\\n    // The update timestamp for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n    uint32 stalestUpdateTimestamp;\\n    // The latest 'serveUntilTimestamp' from all of the middleware that the operator is serving\\n    uint32 latestServeUntilTimestamp;\\n  }\\n\\n  // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n  struct MiddlewareDetails {\\n    // the timestamp at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n    uint32 registrationMayBeginAtTimestamp;\\n    // the timestamp before which the contract is allowed to slash the user\\n    uint32 contractCanSlashOperatorUntilTimestamp;\\n    // the timestamp at which the middleware's view of the operator's stake was most recently updated\\n    uint32 latestUpdateTimestamp;\\n  }\\n\\n  /// @notice Emitted when a middleware times is added to `operator`'s array.\\n  event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateTimestamp, uint32 latestServeUntilTimestamp);\\n\\n  /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n  event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n\\n  /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilTimestamp`.\\n  event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilTimestamp);\\n\\n  /**\\n   * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n   * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n   */\\n  event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\\n\\n  /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within BinLayer.\\n  event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n  /**\\n   * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n   * @dev Typically, this function must be called prior to registering for a middleware.\\n   */\\n  function optIntoSlashing(address contractAddress) external;\\n\\n  /**\\n   * @notice Used for 'slashing' a certain operator.\\n   * @param toBeFrozen The operator to be frozen.\\n   * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n   * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n   */\\n  function freezeOperator(address toBeFrozen) external;\\n\\n  /**\\n   * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n   * @dev Callable only by the contract owner (i.e. governance).\\n   */\\n  function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev adds the middleware's slashing contract to the operator's linked list\\n   */\\n  function recordFirstStakeUpdate(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n   *         to make sure the operator's stake at updateTimestamp is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param updateTimestamp the timestamp for which the stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at updateTimestamp is slashable\\n   * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n   * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n   *      but it is anticipated to be rare and not detrimental.\\n   */\\n  function recordStakeUpdate(address operator, uint32 updateTimestamp, uint32 serveUntilTimestamp, uint256 insertAfter) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n   * slash `operator` once `serveUntil` is reached\\n   */\\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /// @notice The PoolController.sol contract of BinLayer\\n  function poolController() external view returns (IPoolController);\\n\\n  /// @notice The DelegationController.sol contract of BinLayer\\n  function delegation() external view returns (IDelegationController);\\n\\n  /**\\n   * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n   * slashing of their funds, and cannot cannot deposit or withdraw from the poolController until the slashing process is completed\\n   * and the staker's status is reset (to 'unfrozen').\\n   * @param staker The staker of interest.\\n   * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n   * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n   */\\n  function isFrozen(address staker) external view returns (bool);\\n\\n  /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n  function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n  /// @notice Returns the timestamp until which `serviceContract` is allowed to slash the `operator`.\\n  function contractCanSlashOperatorUntilTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice Returns the timestamp at which the `serviceContract` last updated its view of the `operator`'s stake\\n  function latestUpdateTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n  function getCorrectValueForInsertAfter(address operator, uint32 updateTimestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartTimestamp`, with `middlewareTimesIndex` used\\n   * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n   * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n   * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartTimestamp`, *or* in the event\\n   * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n   * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n   * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartTimestamp`.\\n   * @param withdrawalStartTimestamp The timestamp at which the withdrawal was initiated.\\n   * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n   * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n   */\\n  function canWithdraw(address operator, uint32 withdrawalStartTimestamp, uint256 middlewareTimesIndex) external returns (bool);\\n\\n  /**\\n   * operator =>\\n   *  [\\n   *      (\\n   *          the least recent update timestamp of all of the middlewares it's serving/served,\\n   *          latest time that the stake bonded at that update needed to serve until\\n   *      )\\n   *  ]\\n   */\\n  function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) external view returns (MiddlewareTimes memory);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n  function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateTimestamp`.\\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n  function getMiddlewareTimesIndexServeUntilTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n  function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n  function operatorWhitelistedContractsLinkedListEntry(address operator, address node) external view returns (bool, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x09bceda8f8293b3bccc023a57f5c378c317e1b7c131a1dd48290848f53582f88\",\"license\":\"LGPL-3.0\"},\"contracts/libraries/EIP1271SignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC1271.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\n/**\\n * @title Library of utilities for making EIP1271-compliant signature checks.\\n */\\nlibrary EIP1271SignatureUtils {\\n  // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n  bytes4 internal constant EIP1271_MAGICVALUE = 0x1626ba7e;\\n\\n  /**\\n   * @notice Checks @param signature is a valid signature of @param digestHash from @param signer.\\n   * If the `signer` contains no code -- i.e. it is not (yet, at least) a contract address, then checks using standard ECDSA logic\\n   * Otherwise, passes on the signature to the signer to verify the signature and checks that it returns the `EIP1271_MAGICVALUE`.\\n   */\\n  function checkSignature_EIP1271(address signer, bytes32 digestHash, bytes memory signature) internal view {\\n    /**\\n     * check validity of signature:\\n     * 1) if `signer` is an EOA, then `signature` must be a valid ECDSA signature from `signer`,\\n     * indicating their intention for this action\\n     * 2) if `signer` is a contract, then `signature` must will be checked according to EIP-1271\\n     */\\n    if (Address.isContract(signer)) {\\n      require(\\n        IERC1271(signer).isValidSignature(digestHash, signature) == EIP1271_MAGICVALUE,\\n        'EIP1271SignatureUtils.checkSignature_EIP1271: ERC1271 signature verification failed'\\n      );\\n    } else {\\n      require(ECDSA.recover(digestHash, signature) == signer, 'EIP1271SignatureUtils.checkSignature_EIP1271: signature not from signer');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8cd72d29428e3612422c96d5f2643daf8dc2ea19fff9f62557f831b0259662ec\",\"license\":\"LGPL-3.0\"},\"contracts/permissions/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.20;\\n\\nimport '../interfaces/IPausable.sol';\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\ncontract Pausable is IPausable {\\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n  IPauserRegistry public pauserRegistry;\\n\\n  /// @dev whether or not the contract is currently paused\\n  uint256 private _paused;\\n\\n  uint256 internal constant UNPAUSE_ALL = 0;\\n  uint256 internal constant PAUSE_ALL = type(uint256).max;\\n\\n  /// @notice\\n  modifier onlyPauser() {\\n    require(pauserRegistry.isPauser(msg.sender), Errors.NOT_PAUSER);\\n    _;\\n  }\\n\\n  modifier onlyUnpauser() {\\n    require(msg.sender == pauserRegistry.unpauser(), Errors.NOT_UNPAUSER);\\n    _;\\n  }\\n\\n  /// @notice Throws if the contract is paused, i.e. if any of the bits in `_paused` is flipped to 1.\\n  modifier whenNotPaused() {\\n    require(_paused == 0, Errors.CONTRACT_PAUSED);\\n    _;\\n  }\\n\\n  /// @notice Throws if the `indexed`th bit of `_paused` is 1, i.e. if the `index`th pause switch is flipped.\\n  modifier onlyWhenNotPaused(uint8 index) {\\n    require(!paused(index), Errors.INDEX_PAUSED);\\n    _;\\n  }\\n\\n  /// @notice One-time function for setting the `pauserRegistry` and initializing the value of `_paused`.\\n  function _initializePauser(IPauserRegistry _pauserRegistry, uint256 initPausedStatus) internal {\\n    require(address(pauserRegistry) == address(0) && address(_pauserRegistry) != address(0), Errors.INITIALIZE_ONCE);\\n    _paused = initPausedStatus;\\n    emit Paused(msg.sender, initPausedStatus);\\n    _setPauserRegistry(_pauserRegistry);\\n  }\\n\\n  /**\\n   * @notice This function is used to pause an BinLayer contract's functionality.\\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n   */\\n  function pause(uint256 newPausedStatus) external onlyPauser {\\n    // verify that the `newPausedStatus` does not *unflip* any bits (i.e. doesn't unpause anything, all 1 bits remain)\\n    require((_paused & newPausedStatus) == _paused, Errors.INVALID_UNPAUSE);\\n    _paused = newPausedStatus;\\n    emit Paused(msg.sender, newPausedStatus);\\n  }\\n\\n  /**\\n   * @notice Alias for `pause(type(uint256).max)`.\\n   */\\n  function pauseAll() external onlyPauser {\\n    _paused = type(uint256).max;\\n    emit Paused(msg.sender, type(uint256).max);\\n  }\\n\\n  /**\\n   * @notice This function is used to unpause an BinLayer contract's functionality.\\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n   */\\n  function unpause(uint256 newPausedStatus) external onlyUnpauser {\\n    // verify that the `newPausedStatus` does not *flip* any bits (i.e. doesn't pause anything, all 0 bits remain)\\n    require(((~_paused) & (~newPausedStatus)) == (~_paused), Errors.INVALID_PAUSE);\\n    _paused = newPausedStatus;\\n    emit Unpaused(msg.sender, newPausedStatus);\\n  }\\n\\n  /// @notice Returns the current paused status as a uint256.\\n  function paused() public view virtual returns (uint256) {\\n    return _paused;\\n  }\\n\\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n  function paused(uint8 index) public view virtual returns (bool) {\\n    uint256 mask = 1 << index;\\n    return ((_paused & mask) == mask);\\n  }\\n\\n  /// @notice Allows the unpauser to set a new pauser registry\\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external onlyUnpauser {\\n    _setPauserRegistry(newPauserRegistry);\\n  }\\n\\n  /// internal function for setting pauser registry\\n  function _setPauserRegistry(IPauserRegistry newPauserRegistry) internal {\\n    require(address(newPauserRegistry) != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    emit PauserRegistrySet(pauserRegistry, newPauserRegistry);\\n    pauserRegistry = newPauserRegistry;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x810c626bb1906522ba88c8d745068024925029e141a21ca6701aec96384fcce2\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200509c3803806200509c833981016040819052620000349162000137565b6001600160a01b03808316608052811660a052620000516200005d565b50504660c05262000176565b600054610100900460ff1615620000ca5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146200011c576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013457600080fd5b50565b600080604083850312156200014b57600080fd5b825162000158816200011e565b60208401519092506200016b816200011e565b809150509250929050565b60805160a05160c051614ec5620001d760003960006122ad015260006107770152600081816105ae01528181610dfc0152818161121101528181611c090152818161295a0152818161356a015281816136760152613b0b0152614ec56000f3fe608060405234801561001057600080fd5b50600436106103625760003560e01c80636d70f7ae116101c8578063b6d65ea311610104578063da8be864116100a2578063f16172b01161007c578063f16172b014610943578063f2fde38b14610956578063f698da2514610969578063fabc1cbc1461097157600080fd5b8063da8be8641461090a578063eafe9f311461091d578063eea9064b1461093057600080fd5b8063be0525d7116100de578063be0525d71461081d578063c5e480db14610830578063c94b5111146108d6578063cf80873e146108e957600080fd5b8063b6d65ea3146107b9578063b7f06ebe146107cc578063bb45fef2146107ef57600080fd5b80639004134711610171578063a17884841161014b578063a178848414610748578063a238f9df14610768578063b134427114610772578063b6805c541461079957600080fd5b8063900413471461070b578063973a67961461072b57806399be81c81461073557600080fd5b80637f548071116101a25780637f548071146106d4578063886f1195146106e75780638da5cb5b146106fa57600080fd5b80636d70f7ae14610672578063715018a6146106a1578063778e55f3146106a957600080fd5b806322bf40e4116102a2578063595c6a67116102405780635c975abb1161021a5780635c975abb1461060e57806363152b131461061657806365108e921461063657806365da12641461064957600080fd5b8063595c6a67146105d0578063597b36da146105d85780635ac86ab7146105eb57600080fd5b80633cdeb5e01161027c5780633cdeb5e0146105155780633e28391d1461054457806343377382146105825780634aa9d585146105a957600080fd5b806322bf40e4146104cf57806328a573ae146104e257806329c77d4f146104f557600080fd5b806310d67a2f1161030f5780631bbce091116102e95780631bbce091146104315780631d1bf7f2146104445780631e1198381461047d57806320606b70146104a857600080fd5b806310d67a2f146103f8578063132d49671461040b578063136439dd1461041e57600080fd5b80630b9f487a116103405780630b9f487a146103c95780630d5b0067146103dc5780630f589e59146103e557600080fd5b80630449ca391461036757806304a4f9791461038d5780630af71b77146103b4575b600080fd5b61037a610375366004613eaf565b610984565b6040519081526020015b60405180910390f35b61037a7f14bde674c9f64b2ad00eaaee4a8bed1fabef35c7507e3c5b9cfc9436909a2dad81565b6103c76103c2366004613ee5565b610a0b565b005b61037a6103d7366004613fce565b610b1f565b61037a609e5481565b6103c76103f3366004614083565b610be1565b6103c76104063660046140d7565b610d08565b6103c76104193660046140fb565b610dd8565b6103c761042c36600461413c565b610e89565b61037a61043f3660046140fb565b610fc6565b61037a6104523660046140d7565b6001600160a01b03166000908152609a6020526040902060010154600160a01b900463ffffffff1690565b60a254610490906001600160a01b031681565b6040516001600160a01b039091168152602001610384565b61037a7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6103c76104dd366004614155565b610ff4565b6103c76104f03660046140fb565b6111ed565b61037a6105033660046140d7565b609c6020526000908152604090205481565b6104906105233660046140d7565b6001600160a01b039081166000908152609a60205260409020600101541690565b6105726105523660046140d7565b6001600160a01b039081166000908152609b602052604090205416151590565b6040519015158152602001610384565b61037a7f39111bc4a4d688e1f685123d7497d4615370152a8ee4a0593e647bd06ad8bb0b81565b6104907f000000000000000000000000000000000000000000000000000000000000000081565b6103c7611297565b61037a6105e636600461443c565b61137b565b6105726105f9366004614479565b606654600160ff9092169190911b9081161490565b60665461037a565b610629610624366004613eaf565b6113ab565b604051610384919061449c565b6103c76106443660046140d7565b611726565b6104906106573660046140d7565b609b602052600090815260409020546001600160a01b031681565b6105726106803660046140d7565b6001600160a01b039081166000818152609b60205260409020549091161490565b6103c7611797565b61037a6106b73660046144e0565b609960209081526000928352604080842090915290825290205481565b6103c76106e23660046145c2565b6117ab565b606554610490906001600160a01b031681565b6033546001600160a01b0316610490565b61071e610719366004614653565b61191e565b60405161038491906146de565b61037a62ed4e0081565b6103c76107433660046146f1565b6119f9565b61037a6107563660046140d7565b60a06020526000908152604090205481565b61037a62278d0081565b6104907f000000000000000000000000000000000000000000000000000000000000000081565b61037a6107a73660046140d7565b60a16020526000908152604090205481565b6103c76107c7366004614735565b611a94565b6105726107da36600461413c565b609f6020526000908152604090205460ff1681565b6105726107fd3660046147c5565b609d60209081526000928352604080842090915290825290205460ff1681565b6103c761082b36600461413c565b611afd565b6108a061083e3660046140d7565b6040805160608082018352600080835260208084018290529284018190526001600160a01b039485168152609a8352839020835191820184528054851682526001015493841691810191909152600160a01b90920463ffffffff169082015290565b6040805182516001600160a01b039081168252602080850151909116908201529181015163ffffffff1690820152606001610384565b61037a6108e43660046147f1565b611b0e565b6108fc6108f73660046140d7565b611bc7565b604051610384929190614872565b6106296109183660046140d7565b611c84565b6103c761092b366004614897565b6120f0565b6103c761093e366004614903565b612104565b6103c761095136600461495c565b6121be565b6103c76109643660046140d7565b61221c565b61037a6122a9565b6103c761097f36600461413c565b612384565b609e54600090815b83811015610a0157600060a160008787858181106109ac576109ac614978565b90506020020160208101906109c191906140d7565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828111156109f0578092505b506109fa816149a4565b905061098c565b5090505b92915050565b6066546040805180820190915260018152603560f81b6020820152600291600490811603610a555760405162461bcd60e51b8152600401610a4c9190614a03565b60405180910390fd5b50610a5e6124e0565b60005b88811015610b0957610af98a8a83818110610a7e57610a7e614978565b9050602002810190610a909190614a16565b898984818110610aa257610aa2614978565b9050602002810190610ab49190614a36565b898986818110610ac657610ac6614978565b90506020020135888887818110610adf57610adf614978565b9050602002016020810190610af49190614a80565b612539565b610b02816149a4565b9050610a61565b50610b14600160d455565b505050505050505050565b604080517f14bde674c9f64b2ad00eaaee4a8bed1fabef35c7507e3c5b9cfc9436909a2dad6020808301919091526001600160a01b038681168385015288811660608401528716608083015260a0820185905260c08083018590528351808403909101815260e0909201909252805191012060009081610b9d6122a9565b60405161190160f01b602082015260228101919091526042810183905260620160408051808303601f19018152919052805160209091012098975050505050505050565b336000908152609b60205260409020546001600160a01b03161515156040518060400160405280600281526020017f323000000000000000000000000000000000000000000000000000000000000081525090610c515760405162461bcd60e51b8152600401610a4c9190614a03565b50610c5c3384612b4a565b604080518082019091526060815260006020820152610c7e3380836000612cac565b336001600160a01b03167f8e8485583a2310d41f7c82b9427d0bd49bad74bb9cff9d3402a29d8f9b28a0e285604051610cb79190614a9d565b60405180910390a2336001600160a01b03167f02a919ed0e2acad1dd90f17ef2fa4ae5462ee1339170034a8531cca4b67080908484604051610cfa929190614aef565b60405180910390a250505050565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f9190614b1e565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b81525090610dcb5760405162461bcd60e51b8152600401610a4c9190614a03565b50610dd581612f02565b50565b604080518082019091526002815261313960f01b6020820152336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e3a5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000908152609b60205260409020541615610e84576001600160a01b038084166000908152609b602052604090205416610e8281858585612fab565b505b505050565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef59190614b3b565b604051806040016040528060018152602001603160f81b81525090610f2d5760405162461bcd60e51b8152600401610a4c9190614a03565b5060665460408051808201909152600181527f370000000000000000000000000000000000000000000000000000000000000060208201529082811614610f875760405162461bcd60e51b8152600401610a4c9190614a03565b50606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b6001600160a01b0383166000908152609c6020526040812054610feb85828686611b0e565b95945050505050565b600054610100900460ff16158080156110145750600054600160ff909116105b8061102e5750303b15801561102e575060005460ff166001145b6110a05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a4c565b6000805460ff1916600117905580156110c3576000805461ff0019166101001790555b6110cd8888613034565b604080518082018252600881527f42696e4c6179657200000000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc3e1ab4858383d79d3a0e54f9365ec1da08f828fcebd1952f7ea695e26718a6081840152466060820152306080808301919091528351808303909101815260a0909101909252815191012060985561117f6130f1565b61118889613176565b611191866131c8565b61119d85858585613262565b8015610b14576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050505050565b604080518082019091526002815261313960f01b6020820152336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461124f5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000908152609b60205260409020541615610e84576001600160a01b038084166000908152609b602052604090205416610e82818585856133d3565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa1580156112df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113039190614b3b565b604051806040016040528060018152602001603160f81b8152509061133b5760405162461bcd60e51b8152600401610a4c9190614a03565b50600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b60008160405160200161138e9190614bcd565b604051602081830303815290604052805190602001209050919050565b60665460609060019060029081161415604051806040016040528060018152602001603560f81b815250906113f35760405162461bcd60e51b8152600401610a4c9190614a03565b5060008367ffffffffffffffff81111561140f5761140f6141dc565b604051908082528060200260200182016040528015611438578160200160208202803683370190505b50336000908152609b60205260408120549192506001600160a01b03909116905b8581101561171b5786868281811061147357611473614978565b90506020028101906114859190614be0565b611493906020810190614a36565b90508787838181106114a7576114a7614978565b90506020028101906114b99190614be0565b6114c39080614a36565b90501460405180604001604052806002815260200161323560f01b815250906114ff5760405162461bcd60e51b8152600401610a4c9190614a03565b503387878381811061151357611513614978565b90506020028101906115259190614be0565b6115369060608101906040016140d7565b6001600160a01b03161480611592575060a2546001600160a01b031687878381811061156457611564614978565b90506020028101906115769190614be0565b6115879060608101906040016140d7565b6001600160a01b0316145b6040518060400160405280600281526020017f3236000000000000000000000000000000000000000000000000000000000000815250906115e65760405162461bcd60e51b8152600401610a4c9190614a03565b506116ec33838989858181106115fe576115fe614978565b90506020028101906116109190614be0565b6116219060608101906040016140d7565b8a8a8681811061163357611633614978565b90506020028101906116459190614be0565b61164f9080614a36565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508e92508d915088905081811061169557611695614978565b90506020028101906116a79190614be0565b6116b5906020810190614a36565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061345c92505050565b8382815181106116fe576116fe614978565b602090810291909101015280611713816149a4565b915050611459565b509095945050505050565b61172e613857565b60a254604080516001600160a01b03928316815291831660208301527f6ed22dc7330f7d5d7c2ceacb5a19323d459493561529441177421938a434815b910160405180910390a160a280546001600160a01b0319166001600160a01b0392909216919091179055565b61179f613857565b6117a96000613176565b565b428360200151101560405180604001604052806002815260200161313360f01b815250906117ec5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038086166000908152609b60205260409020541615151560405180604001604052806002815260200161323960f01b815250906118445760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038085166000818152609b60205260409020549091161460405180604001604052806002815260200161033360f41b8152509061189c5760405162461bcd60e51b8152600401610a4c9190614a03565b506000609c6000876001600160a01b03166001600160a01b0316815260200190815260200160002054905060006118d98783888860200151611b0e565b6001600160a01b0388166000908152609c60205260409020600184019055855190915061190990889083906138b1565b61191587878686612cac565b50505050505050565b60606000825167ffffffffffffffff81111561193c5761193c6141dc565b604051908082528060200260200182016040528015611965578160200160208202803683370190505b50905060005b8351811015610a01576001600160a01b038516600090815260996020526040812085519091908690849081106119a3576119a3614978565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106119de576119de614978565b60209081029190910101526119f2816149a4565b905061196b565b336000818152609b60205260409020546001600160a01b03161460405180604001604052806002815260200161323160f01b81525090611a4c5760405162461bcd60e51b8152600401610a4c9190614a03565b50336001600160a01b03167f02a919ed0e2acad1dd90f17ef2fa4ae5462ee1339170034a8531cca4b67080908383604051611a88929190614aef565b60405180910390a25050565b6066546040805180820190915260018152603560f81b6020820152600291600490811603611ad55760405162461bcd60e51b8152600401610a4c9190614a03565b50611ade6124e0565b611aeb8686868686612539565b611af5600160d455565b505050505050565b611b05613857565b610dd5816131c8565b604080517f39111bc4a4d688e1f685123d7497d4615370152a8ee4a0593e647bd06ad8bb0b6020808301919091526001600160a01b0387811683850152851660608301526080820186905260a08083018590528351808403909101815260c0909201909252805191012060009081611b846122a9565b60405161190160f01b602082015260228101919091526042810183905260620160408051808303601f190181529190528051602090910120979650505050505050565b6040517f94f649dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152606091829160009182917f000000000000000000000000000000000000000000000000000000000000000016906394f649dd90602401600060405180830381865afa158015611c50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c789190810190614c51565b90969095509350505050565b60665460609060019060029081161415604051806040016040528060018152602001603560f81b81525090611ccc5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000908152609b60205260409020541615156040518060400160405280600281526020017f323200000000000000000000000000000000000000000000000000000000000081525090611d3e5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000818152609b602052604090205490911614156040518060400160405280600281526020017f323300000000000000000000000000000000000000000000000000000000000081525090611db25760405162461bcd60e51b8152600401610a4c9190614a03565b506040805180820190915260018152603360f81b60208201526001600160a01b038416611df25760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000818152609b602052604090205490911690331480611e265750336001600160a01b038216145b80611e4d57506001600160a01b038181166000908152609a60205260409020600101541633145b6040518060400160405280600281526020017f323400000000000000000000000000000000000000000000000000000000000081525090611ea15760405162461bcd60e51b8152600401610a4c9190614a03565b50600080611eae86611bc7565b9092509050336001600160a01b03871614611f0457826001600160a01b0316866001600160a01b03167ff0eddf07e6ea14f388b47e1e94a0f464ecbd9eed4171130e0fc0e99fb4030a8a60405160405180910390a35b826001600160a01b0316866001600160a01b03167ffee30966a256b71e14bc0ebfc94315e28ef4a97a7131a9e2b7a310a73af4467660405160405180910390a36001600160a01b0386166000908152609b6020526040812080546001600160a01b031916905582519003611f885760408051600081526020810190915294506120e7565b815167ffffffffffffffff811115611fa257611fa26141dc565b604051908082528060200260200182016040528015611fcb578160200160208202803683370190505b50945060005b82518110156120e55760408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905084838151811061203157612031614978565b60200260200101518260008151811061204c5761204c614978565b60200260200101906001600160a01b031690816001600160a01b03168152505083838151811061207e5761207e614978565b60200260200101518160008151811061209957612099614978565b6020026020010181815250506120b289878b858561345c565b8884815181106120c4576120c4614978565b602002602001018181525050505080806120dd906149a4565b915050611fd1565b505b50505050919050565b6120f8613857565b610e8284848484613262565b336000908152609b60205260409020546001600160a01b031615151560405180604001604052806002815260200161323960f01b815250906121595760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000818152609b60205260409020549091161460405180604001604052806002815260200161033360f41b815250906121b15760405162461bcd60e51b8152600401610a4c9190614a03565b50610e8433848484612cac565b336000818152609b60205260409020546001600160a01b03161460405180604001604052806002815260200161323160f01b815250906122115760405162461bcd60e51b8152600401610a4c9190614a03565b50610dd53382612b4a565b612224613857565b6001600160a01b0381166122a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a4c565b610dd581613176565b60007f000000000000000000000000000000000000000000000000000000000000000046036122d9575060985490565b50604080518082018252600881527f42696e4c6179657200000000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc3e1ab4858383d79d3a0e54f9365ec1da08f828fcebd1952f7ea695e26718a6081840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fb9190614b1e565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b815250906124475760405162461bcd60e51b8152600401610a4c9190614a03565b506066541981196066541916146040518060400160405280600181526020017f3800000000000000000000000000000000000000000000000000000000000000815250906124a85760405162461bcd60e51b8152600401610a4c9190614a03565b50606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610fbb565b600260d454036125325760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a4c565b600260d455565b60006125476105e687614d0c565b6000818152609f6020908152604091829020548251808401909352600283527f3332000000000000000000000000000000000000000000000000000000000000918301919091529192509060ff166125b25760405162461bcd60e51b8152600401610a4c9190614a03565b50609e5442906125c860a0890160808a01614d18565b63ffffffff166125d89190614d35565b11156040518060400160405280600281526020017f33330000000000000000000000000000000000000000000000000000000000008152509061262e5760405162461bcd60e51b8152600401610a4c9190614a03565b5061263f60608701604088016140d7565b6001600160a01b0316336001600160a01b0316146040518060400160405280600281526020017f3334000000000000000000000000000000000000000000000000000000000000815250906126a75760405162461bcd60e51b8152600401610a4c9190614a03565b5081156126f7576126bb60a0870187614a36565b604080518082019091526002815261323560f01b6020820152915085146126f55760405162461bcd60e51b8152600401610a4c9190614a03565b505b6000818152609f60205260409020805460ff19169055811561287a5760005b61272360a0880188614a36565b9050811015612874574260a1600061273e60a08b018b614a36565b8581811061274e5761274e614978565b905060200201602081019061276391906140d7565b6001600160a01b0316815260208101919091526040016000205461278d60a08a0160808b01614d18565b63ffffffff1661279d9190614d35565b111560405180604001604052806002815260200161333560f01b815250906127d85760405162461bcd60e51b8152600401610a4c9190614a03565b5061286c6127e960208901896140d7565b336127f760a08b018b614a36565b8581811061280757612807614978565b905060200201602081019061281c91906140d7565b61282960c08c018c614a36565b8681811061283957612839614978565b905060200201358a8a8781811061285257612852614978565b905060200201602081019061286791906140d7565b613abc565b600101612716565b50612b08565b336000908152609b60205260408120546001600160a01b0316905b6128a260a0890189614a36565b9050811015612b05574260a160006128bd60a08c018c614a36565b858181106128cd576128cd614978565b90506020020160208101906128e291906140d7565b6001600160a01b0316815260208101919091526040016000205461290c60a08b0160808c01614d18565b63ffffffff1661291c9190614d35565b111560405180604001604052806002815260200161333560f01b815250906129575760405162461bcd60e51b8152600401610a4c9190614a03565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c4623ea13389898581811061299a5761299a614978565b90506020020160208101906129af91906140d7565b6129bc60a08d018d614a36565b868181106129cc576129cc614978565b90506020020160208101906129e191906140d7565b6129ee60c08e018e614a36565b878181106129fe576129fe614978565b60405160e088901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03968716600482015294861660248601529290941660448401526020909102013560648201526084019050600060405180830381600087803b158015612a7657600080fd5b505af1158015612a8a573d6000803e3d6000fd5b505050506001600160a01b03821615612afd57612afd8233612aaf60a08c018c614a36565b85818110612abf57612abf614978565b9050602002016020810190612ad491906140d7565b612ae160c08d018d614a36565b86818110612af157612af1614978565b905060200201356133d3565b600101612895565b50505b6040518181527fc97098c2f658800b4df29001527f7324bcdffcf6e8751a699ab920a1eced5b1d9060200160405180910390a1505050505050565b600160d455565b62ed4e00612b5e6060830160408401614d18565b63ffffffff1611156040518060400160405280600281526020017f323700000000000000000000000000000000000000000000000000000000000081525090612bba5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0382166000908152609a60205260409081902060010154600160a01b900463ffffffff1690612bf79060608401908401614d18565b63ffffffff1610156040518060400160405280600281526020017f323800000000000000000000000000000000000000000000000000000000000081525090612c535760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0382166000908152609a602052604090208190612c788282614d48565b505060405133907ffebe5cd24b2cbc7b065b9d0fdeb904461e4afcff57dd57acda1e7832031ba7ac90611a88908490614a9d565b606654604080518082019091526001808252603560f81b6020830152600092811603612ceb5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038085166000908152609a6020526040902060010154168015801590612d225750336001600160a01b03821614155b8015612d375750336001600160a01b03861614155b15612e4d57428460200151101560405180604001604052806002815260200161313360f01b81525090612d7d5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0381166000908152609d60209081526040808320868452825291829020548251808401909352600283527f33310000000000000000000000000000000000000000000000000000000000009183019190915260ff1615612df85760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0381166000908152609d6020908152604080832086845282528220805460ff19166001179055850151612e3a908890889085908890610b1f565b9050612e4b828287600001516138b1565b505b6001600160a01b038681166000818152609b602052604080822080546001600160a01b031916948a169485179055517fc3ee9f2e5fda98e8066a1f745b2df9285f416fe98cf2559cd21484b3d87433049190a3600080612eac88611bc7565b9150915060005b8251811015610b1457612efa888a858481518110612ed357612ed3614978565b6020026020010151858581518110612eed57612eed614978565b60200260200101516133d3565b600101612eb3565b6040805180820190915260018152603360f81b60208201526001600160a01b038216612f415760405162461bcd60e51b8152600401610a4c9190614a03565b50606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808516600090815260996020908152604080832093861683529290529081208054839290612fe2908490614df2565b9091555050604080516001600160a01b0385811682528481166020830152918101839052908516907f6909600037b75d7b4733aedd815442b5ec018a827751c832aaff64eba5d6d2dd90606001610cfa565b6065546001600160a01b031615801561305557506001600160a01b03821615155b6040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250906130a95760405162461bcd60e51b8152600401610a4c9190614a03565b50606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a26130ed82612f02565b5050565b600054610100900460ff1661316e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a4c565b6117a9613b63565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051808201909152600281527f3338000000000000000000000000000000000000000000000000000000000000602082015262278d008211156132205760405162461bcd60e51b8152600401610a4c9190614a03565b50609e5460408051918252602082018390527f338caf1431dddfb34caa16bfc51573f97922fa2f8eb6d70d27476d8b4a89d5c3910160405180910390a1609e55565b604080518082019091526002815261323560f01b602082015283821461329b5760405162461bcd60e51b8152600401610a4c9190614a03565b508260005b81811015611af55760008686838181106132bc576132bc614978565b90506020020160208101906132d191906140d7565b6001600160a01b038116600090815260a160205260408120549192508686858181106132ff576132ff614978565b90506020020135905062278d008111156040518060400160405280600281526020017f3339000000000000000000000000000000000000000000000000000000000000815250906133635760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038316600081815260a160209081526040918290208490558151928352820184905281018290527f108376441269231310d8eb7d2c786779cb19c9b7f967e2e95ab366f0fde46dc29060600160405180910390a1505050806133cc906149a4565b90506132a0565b6001600160a01b0380851660009081526099602090815260408083209386168352929052908120805483929061340a908490614d35565b9091555050604080516001600160a01b0385811682528481166020830152918101839052908516907f1ec042c965e2edd7107b51188ee0f383e22e76179041ab3a9d18ff151405166c90606001610cfa565b6040805180820190915260018152603360f81b60208201526000906001600160a01b03871661349e5760405162461bcd60e51b8152600401610a4c9190614a03565b50825160408051808201909152600281527f33360000000000000000000000000000000000000000000000000000000000006020820152906134f35760405162461bcd60e51b8152600401610a4c9190614a03565b5060005b8351811015613765576001600160a01b0386161561354d5761354d868886848151811061352657613526614978565b602002602001015186858151811061354057613540614978565b6020026020010151612fab565b846001600160a01b0316876001600160a01b0316148061361f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639b4da03d8583815181106135a9576135a9614978565b60200260200101516040518263ffffffff1660e01b81526004016135dc91906001600160a01b0391909116815260200190565b602060405180830381865afa1580156135f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361d9190614b3b565b155b6040518060400160405280600281526020017f3337000000000000000000000000000000000000000000000000000000000000815250906136735760405162461bcd60e51b8152600401610a4c9190614a03565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c80d4e5888684815181106136b6576136b6614978565b60200260200101518685815181106136d0576136d0614978565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561374257600080fd5b505af1158015613756573d6000803e3d6000fd5b505050508060010190506134f7565b506001600160a01b038616600090815260a06020526040812080549182919061378d836149a4565b919050555060006040518060e00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018381526020014263ffffffff16815260200186815260200185815250905060006137f58261137b565b6000818152609f602052604090819020805460ff19166001179055519091507f9009ab153e8014fbfb02f2217f5cde7aa7f9ad734ae85ca3ee3f4ca2fdd499f9906138439083908590614e05565b60405180910390a198975050505050505050565b6033546001600160a01b031633146117a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a4c565b6001600160a01b0383163b15613a06576040517f1626ba7e00000000000000000000000000000000000000000000000000000000808252906001600160a01b03851690631626ba7e9061390a9086908690600401614e1e565b602060405180830381865afa158015613927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394b9190614e37565b7fffffffff000000000000000000000000000000000000000000000000000000001614610e845760405162461bcd60e51b815260206004820152605360248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a2045524331323731207369676e61747572652060648201527f766572696669636174696f6e206661696c656400000000000000000000000000608482015260a401610a4c565b826001600160a01b0316613a1a8383613be0565b6001600160a01b031614610e845760405162461bcd60e51b815260206004820152604760248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a207369676e6174757265206e6f742066726f6d60648201527f207369676e657200000000000000000000000000000000000000000000000000608482015260a401610a4c565b6040517fc608c7f30000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015284811660248301526044820184905282811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063c608c7f390608401600060405180830381600087803b158015613b4f57600080fd5b505af1158015610b14573d6000803e3d6000fd5b600054610100900460ff16612b435760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a4c565b6000806000613bef8585613bfc565b91509150610a0181613c41565b6000808251604103613c325760208301516040840151606085015160001a613c2687828585613da6565b94509450505050613c3a565b506000905060025b9250929050565b6000816004811115613c5557613c55614e79565b03613c5d5750565b6001816004811115613c7157613c71614e79565b03613cbe5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a4c565b6002816004811115613cd257613cd2614e79565b03613d1f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a4c565b6003816004811115613d3357613d33614e79565b03610dd55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a4c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613ddd5750600090506003613e61565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613e31573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613e5a57600060019250925050613e61565b9150600090505b94509492505050565b60008083601f840112613e7c57600080fd5b50813567ffffffffffffffff811115613e9457600080fd5b6020830191508360208260051b8501011115613c3a57600080fd5b60008060208385031215613ec257600080fd5b823567ffffffffffffffff811115613ed957600080fd5b611c7885828601613e6a565b6000806000806000806000806080898b031215613f0157600080fd5b883567ffffffffffffffff80821115613f1957600080fd5b613f258c838d01613e6a565b909a50985060208b0135915080821115613f3e57600080fd5b613f4a8c838d01613e6a565b909850965060408b0135915080821115613f6357600080fd5b613f6f8c838d01613e6a565b909650945060608b0135915080821115613f8857600080fd5b50613f958b828c01613e6a565b999c989b5096995094979396929594505050565b6001600160a01b0381168114610dd557600080fd5b8035613fc981613fa9565b919050565b600080600080600060a08688031215613fe657600080fd5b8535613ff181613fa9565b9450602086013561400181613fa9565b9350604086013561401181613fa9565b94979396509394606081013594506080013592915050565b60006060828403121561403b57600080fd5b50919050565b60008083601f84011261405357600080fd5b50813567ffffffffffffffff81111561406b57600080fd5b602083019150836020828501011115613c3a57600080fd5b60008060006080848603121561409857600080fd5b6140a28585614029565b9250606084013567ffffffffffffffff8111156140be57600080fd5b6140ca86828701614041565b9497909650939450505050565b6000602082840312156140e957600080fd5b81356140f481613fa9565b9392505050565b60008060006060848603121561411057600080fd5b833561411b81613fa9565b9250602084013561412b81613fa9565b929592945050506040919091013590565b60006020828403121561414e57600080fd5b5035919050565b60008060008060008060008060c0898b03121561417157600080fd5b883561417c81613fa9565b9750602089013561418c81613fa9565b96506040890135955060608901359450608089013567ffffffffffffffff808211156141b757600080fd5b6141c38c838d01613e6a565b909650945060a08b0135915080821115613f8857600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715614215576142156141dc565b60405290565b6040805190810167ffffffffffffffff81118282101715614215576142156141dc565b604051601f8201601f1916810167ffffffffffffffff81118282101715614267576142676141dc565b604052919050565b63ffffffff81168114610dd557600080fd5b8035613fc98161426f565b600067ffffffffffffffff8211156142a6576142a66141dc565b5060051b60200190565b600082601f8301126142c157600080fd5b813560206142d66142d18361428c565b61423e565b82815260059290921b840181019181810190868411156142f557600080fd5b8286015b8481101561431957803561430c81613fa9565b83529183019183016142f9565b509695505050505050565b600082601f83011261433557600080fd5b813560206143456142d18361428c565b82815260059290921b8401810191818101908684111561436457600080fd5b8286015b848110156143195780358352918301918301614368565b600060e0828403121561439157600080fd5b6143996141f2565b90506143a482613fbe565b81526143b260208301613fbe565b60208201526143c360408301613fbe565b6040820152606082013560608201526143de60808301614281565b608082015260a082013567ffffffffffffffff808211156143fe57600080fd5b61440a858386016142b0565b60a084015260c084013591508082111561442357600080fd5b5061443084828501614324565b60c08301525092915050565b60006020828403121561444e57600080fd5b813567ffffffffffffffff81111561446557600080fd5b6144718482850161437f565b949350505050565b60006020828403121561448b57600080fd5b813560ff811681146140f457600080fd5b6020808252825182820181905260009190848201906040850190845b818110156144d4578351835292840192918401916001016144b8565b50909695505050505050565b600080604083850312156144f357600080fd5b82356144fe81613fa9565b9150602083013561450e81613fa9565b809150509250929050565b60006040828403121561452b57600080fd5b61453361421b565b9050813567ffffffffffffffff8082111561454d57600080fd5b818401915084601f83011261456157600080fd5b8135602082821115614575576145756141dc565b614587601f8301601f1916820161423e565b9250818352868183860101111561459d57600080fd5b8181850182850137600081838501015282855280860135818601525050505092915050565b600080600080600060a086880312156145da57600080fd5b85356145e581613fa9565b945060208601356145f581613fa9565b9350604086013567ffffffffffffffff8082111561461257600080fd5b61461e89838a01614519565b9450606088013591508082111561463457600080fd5b5061464188828901614519565b95989497509295608001359392505050565b6000806040838503121561466657600080fd5b823561467181613fa9565b9150602083013567ffffffffffffffff81111561468d57600080fd5b614699858286016142b0565b9150509250929050565b600081518084526020808501945080840160005b838110156146d3578151875295820195908201906001016146b7565b509495945050505050565b6020815260006140f460208301846146a3565b6000806020838503121561470457600080fd5b823567ffffffffffffffff81111561471b57600080fd5b611c7885828601614041565b8015158114610dd557600080fd5b60008060008060006080868803121561474d57600080fd5b853567ffffffffffffffff8082111561476557600080fd5b9087019060e0828a03121561477957600080fd5b9095506020870135908082111561478f57600080fd5b5061479c88828901613e6a565b9095509350506040860135915060608601356147b781614727565b809150509295509295909350565b600080604083850312156147d857600080fd5b82356147e381613fa9565b946020939093013593505050565b6000806000806080858703121561480757600080fd5b843561481281613fa9565b935060208501359250604085013561482981613fa9565b9396929550929360600135925050565b600081518084526020808501945080840160005b838110156146d35781516001600160a01b03168752958201959082019060010161484d565b6040815260006148856040830185614839565b8281036020840152610feb81856146a3565b600080600080604085870312156148ad57600080fd5b843567ffffffffffffffff808211156148c557600080fd5b6148d188838901613e6a565b909650945060208701359150808211156148ea57600080fd5b506148f787828801613e6a565b95989497509550505050565b60008060006060848603121561491857600080fd5b833561492381613fa9565b9250602084013567ffffffffffffffff81111561493f57600080fd5b61494b86828701614519565b925050604084013590509250925092565b60006060828403121561496e57600080fd5b6140f48383614029565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016149b6576149b661498e565b5060010190565b6000815180845260005b818110156149e3576020818501810151868301820152016149c7565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006140f460208301846149bd565b6000823560de19833603018112614a2c57600080fd5b9190910192915050565b6000808335601e19843603018112614a4d57600080fd5b83018035915067ffffffffffffffff821115614a6857600080fd5b6020019150600581901b3603821315613c3a57600080fd5b600060208284031215614a9257600080fd5b81356140f481614727565b606081018235614aac81613fa9565b6001600160a01b039081168352602084013590614ac882613fa9565b1660208301526040830135614adc8161426f565b63ffffffff811660408401525092915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215614b3057600080fd5b81516140f481613fa9565b600060208284031215614b4d57600080fd5b81516140f481614727565b60006001600160a01b03808351168452806020840151166020850152806040840151166040850152506060820151606084015263ffffffff608083015116608084015260a082015160e060a0850152614bb460e0850182614839565b905060c083015184820360c0860152610feb82826146a3565b6020815260006140f46020830184614b58565b60008235605e19833603018112614a2c57600080fd5b600082601f830112614c0757600080fd5b81516020614c176142d18361428c565b82815260059290921b84018101918181019086841115614c3657600080fd5b8286015b848110156143195780518352918301918301614c3a565b60008060408385031215614c6457600080fd5b825167ffffffffffffffff80821115614c7c57600080fd5b818501915085601f830112614c9057600080fd5b81516020614ca06142d18361428c565b82815260059290921b84018101918181019089841115614cbf57600080fd5b948201945b83861015614ce6578551614cd781613fa9565b82529482019490820190614cc4565b91880151919650909350505080821115614cff57600080fd5b5061469985828601614bf6565b6000610a05368361437f565b600060208284031215614d2a57600080fd5b81356140f48161426f565b80820180821115610a0557610a0561498e565b8135614d5381613fa9565b81546001600160a01b0319166001600160a01b03821617825550600181016020830135614d7f81613fa9565b81546001600160a01b0319166001600160a01b038216178255506040830135614da78161426f565b81547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b77ffffffff0000000000000000000000000000000000000000161790555050565b81810381811115610a0557610a0561498e565b8281526040602082015260006144716040830184614b58565b82815260406020820152600061447160408301846149bd565b600060208284031215614e4957600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146140f457600080fd5b634e487b7160e01b600052602160045260246000fdfea264697066735822122067d5a923194a546008a93396f6bdaba01a1c803ee659ae0c1a368a7cf7f4fcb764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103625760003560e01c80636d70f7ae116101c8578063b6d65ea311610104578063da8be864116100a2578063f16172b01161007c578063f16172b014610943578063f2fde38b14610956578063f698da2514610969578063fabc1cbc1461097157600080fd5b8063da8be8641461090a578063eafe9f311461091d578063eea9064b1461093057600080fd5b8063be0525d7116100de578063be0525d71461081d578063c5e480db14610830578063c94b5111146108d6578063cf80873e146108e957600080fd5b8063b6d65ea3146107b9578063b7f06ebe146107cc578063bb45fef2146107ef57600080fd5b80639004134711610171578063a17884841161014b578063a178848414610748578063a238f9df14610768578063b134427114610772578063b6805c541461079957600080fd5b8063900413471461070b578063973a67961461072b57806399be81c81461073557600080fd5b80637f548071116101a25780637f548071146106d4578063886f1195146106e75780638da5cb5b146106fa57600080fd5b80636d70f7ae14610672578063715018a6146106a1578063778e55f3146106a957600080fd5b806322bf40e4116102a2578063595c6a67116102405780635c975abb1161021a5780635c975abb1461060e57806363152b131461061657806365108e921461063657806365da12641461064957600080fd5b8063595c6a67146105d0578063597b36da146105d85780635ac86ab7146105eb57600080fd5b80633cdeb5e01161027c5780633cdeb5e0146105155780633e28391d1461054457806343377382146105825780634aa9d585146105a957600080fd5b806322bf40e4146104cf57806328a573ae146104e257806329c77d4f146104f557600080fd5b806310d67a2f1161030f5780631bbce091116102e95780631bbce091146104315780631d1bf7f2146104445780631e1198381461047d57806320606b70146104a857600080fd5b806310d67a2f146103f8578063132d49671461040b578063136439dd1461041e57600080fd5b80630b9f487a116103405780630b9f487a146103c95780630d5b0067146103dc5780630f589e59146103e557600080fd5b80630449ca391461036757806304a4f9791461038d5780630af71b77146103b4575b600080fd5b61037a610375366004613eaf565b610984565b6040519081526020015b60405180910390f35b61037a7f14bde674c9f64b2ad00eaaee4a8bed1fabef35c7507e3c5b9cfc9436909a2dad81565b6103c76103c2366004613ee5565b610a0b565b005b61037a6103d7366004613fce565b610b1f565b61037a609e5481565b6103c76103f3366004614083565b610be1565b6103c76104063660046140d7565b610d08565b6103c76104193660046140fb565b610dd8565b6103c761042c36600461413c565b610e89565b61037a61043f3660046140fb565b610fc6565b61037a6104523660046140d7565b6001600160a01b03166000908152609a6020526040902060010154600160a01b900463ffffffff1690565b60a254610490906001600160a01b031681565b6040516001600160a01b039091168152602001610384565b61037a7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6103c76104dd366004614155565b610ff4565b6103c76104f03660046140fb565b6111ed565b61037a6105033660046140d7565b609c6020526000908152604090205481565b6104906105233660046140d7565b6001600160a01b039081166000908152609a60205260409020600101541690565b6105726105523660046140d7565b6001600160a01b039081166000908152609b602052604090205416151590565b6040519015158152602001610384565b61037a7f39111bc4a4d688e1f685123d7497d4615370152a8ee4a0593e647bd06ad8bb0b81565b6104907f000000000000000000000000000000000000000000000000000000000000000081565b6103c7611297565b61037a6105e636600461443c565b61137b565b6105726105f9366004614479565b606654600160ff9092169190911b9081161490565b60665461037a565b610629610624366004613eaf565b6113ab565b604051610384919061449c565b6103c76106443660046140d7565b611726565b6104906106573660046140d7565b609b602052600090815260409020546001600160a01b031681565b6105726106803660046140d7565b6001600160a01b039081166000818152609b60205260409020549091161490565b6103c7611797565b61037a6106b73660046144e0565b609960209081526000928352604080842090915290825290205481565b6103c76106e23660046145c2565b6117ab565b606554610490906001600160a01b031681565b6033546001600160a01b0316610490565b61071e610719366004614653565b61191e565b60405161038491906146de565b61037a62ed4e0081565b6103c76107433660046146f1565b6119f9565b61037a6107563660046140d7565b60a06020526000908152604090205481565b61037a62278d0081565b6104907f000000000000000000000000000000000000000000000000000000000000000081565b61037a6107a73660046140d7565b60a16020526000908152604090205481565b6103c76107c7366004614735565b611a94565b6105726107da36600461413c565b609f6020526000908152604090205460ff1681565b6105726107fd3660046147c5565b609d60209081526000928352604080842090915290825290205460ff1681565b6103c761082b36600461413c565b611afd565b6108a061083e3660046140d7565b6040805160608082018352600080835260208084018290529284018190526001600160a01b039485168152609a8352839020835191820184528054851682526001015493841691810191909152600160a01b90920463ffffffff169082015290565b6040805182516001600160a01b039081168252602080850151909116908201529181015163ffffffff1690820152606001610384565b61037a6108e43660046147f1565b611b0e565b6108fc6108f73660046140d7565b611bc7565b604051610384929190614872565b6106296109183660046140d7565b611c84565b6103c761092b366004614897565b6120f0565b6103c761093e366004614903565b612104565b6103c761095136600461495c565b6121be565b6103c76109643660046140d7565b61221c565b61037a6122a9565b6103c761097f36600461413c565b612384565b609e54600090815b83811015610a0157600060a160008787858181106109ac576109ac614978565b90506020020160208101906109c191906140d7565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828111156109f0578092505b506109fa816149a4565b905061098c565b5090505b92915050565b6066546040805180820190915260018152603560f81b6020820152600291600490811603610a555760405162461bcd60e51b8152600401610a4c9190614a03565b60405180910390fd5b50610a5e6124e0565b60005b88811015610b0957610af98a8a83818110610a7e57610a7e614978565b9050602002810190610a909190614a16565b898984818110610aa257610aa2614978565b9050602002810190610ab49190614a36565b898986818110610ac657610ac6614978565b90506020020135888887818110610adf57610adf614978565b9050602002016020810190610af49190614a80565b612539565b610b02816149a4565b9050610a61565b50610b14600160d455565b505050505050505050565b604080517f14bde674c9f64b2ad00eaaee4a8bed1fabef35c7507e3c5b9cfc9436909a2dad6020808301919091526001600160a01b038681168385015288811660608401528716608083015260a0820185905260c08083018590528351808403909101815260e0909201909252805191012060009081610b9d6122a9565b60405161190160f01b602082015260228101919091526042810183905260620160408051808303601f19018152919052805160209091012098975050505050505050565b336000908152609b60205260409020546001600160a01b03161515156040518060400160405280600281526020017f323000000000000000000000000000000000000000000000000000000000000081525090610c515760405162461bcd60e51b8152600401610a4c9190614a03565b50610c5c3384612b4a565b604080518082019091526060815260006020820152610c7e3380836000612cac565b336001600160a01b03167f8e8485583a2310d41f7c82b9427d0bd49bad74bb9cff9d3402a29d8f9b28a0e285604051610cb79190614a9d565b60405180910390a2336001600160a01b03167f02a919ed0e2acad1dd90f17ef2fa4ae5462ee1339170034a8531cca4b67080908484604051610cfa929190614aef565b60405180910390a250505050565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f9190614b1e565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b81525090610dcb5760405162461bcd60e51b8152600401610a4c9190614a03565b50610dd581612f02565b50565b604080518082019091526002815261313960f01b6020820152336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e3a5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000908152609b60205260409020541615610e84576001600160a01b038084166000908152609b602052604090205416610e8281858585612fab565b505b505050565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef59190614b3b565b604051806040016040528060018152602001603160f81b81525090610f2d5760405162461bcd60e51b8152600401610a4c9190614a03565b5060665460408051808201909152600181527f370000000000000000000000000000000000000000000000000000000000000060208201529082811614610f875760405162461bcd60e51b8152600401610a4c9190614a03565b50606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b6001600160a01b0383166000908152609c6020526040812054610feb85828686611b0e565b95945050505050565b600054610100900460ff16158080156110145750600054600160ff909116105b8061102e5750303b15801561102e575060005460ff166001145b6110a05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a4c565b6000805460ff1916600117905580156110c3576000805461ff0019166101001790555b6110cd8888613034565b604080518082018252600881527f42696e4c6179657200000000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc3e1ab4858383d79d3a0e54f9365ec1da08f828fcebd1952f7ea695e26718a6081840152466060820152306080808301919091528351808303909101815260a0909101909252815191012060985561117f6130f1565b61118889613176565b611191866131c8565b61119d85858585613262565b8015610b14576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050505050565b604080518082019091526002815261313960f01b6020820152336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461124f5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000908152609b60205260409020541615610e84576001600160a01b038084166000908152609b602052604090205416610e82818585856133d3565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa1580156112df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113039190614b3b565b604051806040016040528060018152602001603160f81b8152509061133b5760405162461bcd60e51b8152600401610a4c9190614a03565b50600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b60008160405160200161138e9190614bcd565b604051602081830303815290604052805190602001209050919050565b60665460609060019060029081161415604051806040016040528060018152602001603560f81b815250906113f35760405162461bcd60e51b8152600401610a4c9190614a03565b5060008367ffffffffffffffff81111561140f5761140f6141dc565b604051908082528060200260200182016040528015611438578160200160208202803683370190505b50336000908152609b60205260408120549192506001600160a01b03909116905b8581101561171b5786868281811061147357611473614978565b90506020028101906114859190614be0565b611493906020810190614a36565b90508787838181106114a7576114a7614978565b90506020028101906114b99190614be0565b6114c39080614a36565b90501460405180604001604052806002815260200161323560f01b815250906114ff5760405162461bcd60e51b8152600401610a4c9190614a03565b503387878381811061151357611513614978565b90506020028101906115259190614be0565b6115369060608101906040016140d7565b6001600160a01b03161480611592575060a2546001600160a01b031687878381811061156457611564614978565b90506020028101906115769190614be0565b6115879060608101906040016140d7565b6001600160a01b0316145b6040518060400160405280600281526020017f3236000000000000000000000000000000000000000000000000000000000000815250906115e65760405162461bcd60e51b8152600401610a4c9190614a03565b506116ec33838989858181106115fe576115fe614978565b90506020028101906116109190614be0565b6116219060608101906040016140d7565b8a8a8681811061163357611633614978565b90506020028101906116459190614be0565b61164f9080614a36565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508e92508d915088905081811061169557611695614978565b90506020028101906116a79190614be0565b6116b5906020810190614a36565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061345c92505050565b8382815181106116fe576116fe614978565b602090810291909101015280611713816149a4565b915050611459565b509095945050505050565b61172e613857565b60a254604080516001600160a01b03928316815291831660208301527f6ed22dc7330f7d5d7c2ceacb5a19323d459493561529441177421938a434815b910160405180910390a160a280546001600160a01b0319166001600160a01b0392909216919091179055565b61179f613857565b6117a96000613176565b565b428360200151101560405180604001604052806002815260200161313360f01b815250906117ec5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038086166000908152609b60205260409020541615151560405180604001604052806002815260200161323960f01b815250906118445760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038085166000818152609b60205260409020549091161460405180604001604052806002815260200161033360f41b8152509061189c5760405162461bcd60e51b8152600401610a4c9190614a03565b506000609c6000876001600160a01b03166001600160a01b0316815260200190815260200160002054905060006118d98783888860200151611b0e565b6001600160a01b0388166000908152609c60205260409020600184019055855190915061190990889083906138b1565b61191587878686612cac565b50505050505050565b60606000825167ffffffffffffffff81111561193c5761193c6141dc565b604051908082528060200260200182016040528015611965578160200160208202803683370190505b50905060005b8351811015610a01576001600160a01b038516600090815260996020526040812085519091908690849081106119a3576119a3614978565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106119de576119de614978565b60209081029190910101526119f2816149a4565b905061196b565b336000818152609b60205260409020546001600160a01b03161460405180604001604052806002815260200161323160f01b81525090611a4c5760405162461bcd60e51b8152600401610a4c9190614a03565b50336001600160a01b03167f02a919ed0e2acad1dd90f17ef2fa4ae5462ee1339170034a8531cca4b67080908383604051611a88929190614aef565b60405180910390a25050565b6066546040805180820190915260018152603560f81b6020820152600291600490811603611ad55760405162461bcd60e51b8152600401610a4c9190614a03565b50611ade6124e0565b611aeb8686868686612539565b611af5600160d455565b505050505050565b611b05613857565b610dd5816131c8565b604080517f39111bc4a4d688e1f685123d7497d4615370152a8ee4a0593e647bd06ad8bb0b6020808301919091526001600160a01b0387811683850152851660608301526080820186905260a08083018590528351808403909101815260c0909201909252805191012060009081611b846122a9565b60405161190160f01b602082015260228101919091526042810183905260620160408051808303601f190181529190528051602090910120979650505050505050565b6040517f94f649dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152606091829160009182917f000000000000000000000000000000000000000000000000000000000000000016906394f649dd90602401600060405180830381865afa158015611c50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c789190810190614c51565b90969095509350505050565b60665460609060019060029081161415604051806040016040528060018152602001603560f81b81525090611ccc5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000908152609b60205260409020541615156040518060400160405280600281526020017f323200000000000000000000000000000000000000000000000000000000000081525090611d3e5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000818152609b602052604090205490911614156040518060400160405280600281526020017f323300000000000000000000000000000000000000000000000000000000000081525090611db25760405162461bcd60e51b8152600401610a4c9190614a03565b506040805180820190915260018152603360f81b60208201526001600160a01b038416611df25760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000818152609b602052604090205490911690331480611e265750336001600160a01b038216145b80611e4d57506001600160a01b038181166000908152609a60205260409020600101541633145b6040518060400160405280600281526020017f323400000000000000000000000000000000000000000000000000000000000081525090611ea15760405162461bcd60e51b8152600401610a4c9190614a03565b50600080611eae86611bc7565b9092509050336001600160a01b03871614611f0457826001600160a01b0316866001600160a01b03167ff0eddf07e6ea14f388b47e1e94a0f464ecbd9eed4171130e0fc0e99fb4030a8a60405160405180910390a35b826001600160a01b0316866001600160a01b03167ffee30966a256b71e14bc0ebfc94315e28ef4a97a7131a9e2b7a310a73af4467660405160405180910390a36001600160a01b0386166000908152609b6020526040812080546001600160a01b031916905582519003611f885760408051600081526020810190915294506120e7565b815167ffffffffffffffff811115611fa257611fa26141dc565b604051908082528060200260200182016040528015611fcb578160200160208202803683370190505b50945060005b82518110156120e55760408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905084838151811061203157612031614978565b60200260200101518260008151811061204c5761204c614978565b60200260200101906001600160a01b031690816001600160a01b03168152505083838151811061207e5761207e614978565b60200260200101518160008151811061209957612099614978565b6020026020010181815250506120b289878b858561345c565b8884815181106120c4576120c4614978565b602002602001018181525050505080806120dd906149a4565b915050611fd1565b505b50505050919050565b6120f8613857565b610e8284848484613262565b336000908152609b60205260409020546001600160a01b031615151560405180604001604052806002815260200161323960f01b815250906121595760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038084166000818152609b60205260409020549091161460405180604001604052806002815260200161033360f41b815250906121b15760405162461bcd60e51b8152600401610a4c9190614a03565b50610e8433848484612cac565b336000818152609b60205260409020546001600160a01b03161460405180604001604052806002815260200161323160f01b815250906122115760405162461bcd60e51b8152600401610a4c9190614a03565b50610dd53382612b4a565b612224613857565b6001600160a01b0381166122a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a4c565b610dd581613176565b60007f000000000000000000000000000000000000000000000000000000000000000046036122d9575060985490565b50604080518082018252600881527f42696e4c6179657200000000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc3e1ab4858383d79d3a0e54f9365ec1da08f828fcebd1952f7ea695e26718a6081840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fb9190614b1e565b6001600160a01b0316336001600160a01b031614604051806040016040528060018152602001601960f91b815250906124475760405162461bcd60e51b8152600401610a4c9190614a03565b506066541981196066541916146040518060400160405280600181526020017f3800000000000000000000000000000000000000000000000000000000000000815250906124a85760405162461bcd60e51b8152600401610a4c9190614a03565b50606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610fbb565b600260d454036125325760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a4c565b600260d455565b60006125476105e687614d0c565b6000818152609f6020908152604091829020548251808401909352600283527f3332000000000000000000000000000000000000000000000000000000000000918301919091529192509060ff166125b25760405162461bcd60e51b8152600401610a4c9190614a03565b50609e5442906125c860a0890160808a01614d18565b63ffffffff166125d89190614d35565b11156040518060400160405280600281526020017f33330000000000000000000000000000000000000000000000000000000000008152509061262e5760405162461bcd60e51b8152600401610a4c9190614a03565b5061263f60608701604088016140d7565b6001600160a01b0316336001600160a01b0316146040518060400160405280600281526020017f3334000000000000000000000000000000000000000000000000000000000000815250906126a75760405162461bcd60e51b8152600401610a4c9190614a03565b5081156126f7576126bb60a0870187614a36565b604080518082019091526002815261323560f01b6020820152915085146126f55760405162461bcd60e51b8152600401610a4c9190614a03565b505b6000818152609f60205260409020805460ff19169055811561287a5760005b61272360a0880188614a36565b9050811015612874574260a1600061273e60a08b018b614a36565b8581811061274e5761274e614978565b905060200201602081019061276391906140d7565b6001600160a01b0316815260208101919091526040016000205461278d60a08a0160808b01614d18565b63ffffffff1661279d9190614d35565b111560405180604001604052806002815260200161333560f01b815250906127d85760405162461bcd60e51b8152600401610a4c9190614a03565b5061286c6127e960208901896140d7565b336127f760a08b018b614a36565b8581811061280757612807614978565b905060200201602081019061281c91906140d7565b61282960c08c018c614a36565b8681811061283957612839614978565b905060200201358a8a8781811061285257612852614978565b905060200201602081019061286791906140d7565b613abc565b600101612716565b50612b08565b336000908152609b60205260408120546001600160a01b0316905b6128a260a0890189614a36565b9050811015612b05574260a160006128bd60a08c018c614a36565b858181106128cd576128cd614978565b90506020020160208101906128e291906140d7565b6001600160a01b0316815260208101919091526040016000205461290c60a08b0160808c01614d18565b63ffffffff1661291c9190614d35565b111560405180604001604052806002815260200161333560f01b815250906129575760405162461bcd60e51b8152600401610a4c9190614a03565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c4623ea13389898581811061299a5761299a614978565b90506020020160208101906129af91906140d7565b6129bc60a08d018d614a36565b868181106129cc576129cc614978565b90506020020160208101906129e191906140d7565b6129ee60c08e018e614a36565b878181106129fe576129fe614978565b60405160e088901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03968716600482015294861660248601529290941660448401526020909102013560648201526084019050600060405180830381600087803b158015612a7657600080fd5b505af1158015612a8a573d6000803e3d6000fd5b505050506001600160a01b03821615612afd57612afd8233612aaf60a08c018c614a36565b85818110612abf57612abf614978565b9050602002016020810190612ad491906140d7565b612ae160c08d018d614a36565b86818110612af157612af1614978565b905060200201356133d3565b600101612895565b50505b6040518181527fc97098c2f658800b4df29001527f7324bcdffcf6e8751a699ab920a1eced5b1d9060200160405180910390a1505050505050565b600160d455565b62ed4e00612b5e6060830160408401614d18565b63ffffffff1611156040518060400160405280600281526020017f323700000000000000000000000000000000000000000000000000000000000081525090612bba5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0382166000908152609a60205260409081902060010154600160a01b900463ffffffff1690612bf79060608401908401614d18565b63ffffffff1610156040518060400160405280600281526020017f323800000000000000000000000000000000000000000000000000000000000081525090612c535760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0382166000908152609a602052604090208190612c788282614d48565b505060405133907ffebe5cd24b2cbc7b065b9d0fdeb904461e4afcff57dd57acda1e7832031ba7ac90611a88908490614a9d565b606654604080518082019091526001808252603560f81b6020830152600092811603612ceb5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038085166000908152609a6020526040902060010154168015801590612d225750336001600160a01b03821614155b8015612d375750336001600160a01b03861614155b15612e4d57428460200151101560405180604001604052806002815260200161313360f01b81525090612d7d5760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0381166000908152609d60209081526040808320868452825291829020548251808401909352600283527f33310000000000000000000000000000000000000000000000000000000000009183019190915260ff1615612df85760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b0381166000908152609d6020908152604080832086845282528220805460ff19166001179055850151612e3a908890889085908890610b1f565b9050612e4b828287600001516138b1565b505b6001600160a01b038681166000818152609b602052604080822080546001600160a01b031916948a169485179055517fc3ee9f2e5fda98e8066a1f745b2df9285f416fe98cf2559cd21484b3d87433049190a3600080612eac88611bc7565b9150915060005b8251811015610b1457612efa888a858481518110612ed357612ed3614978565b6020026020010151858581518110612eed57612eed614978565b60200260200101516133d3565b600101612eb3565b6040805180820190915260018152603360f81b60208201526001600160a01b038216612f415760405162461bcd60e51b8152600401610a4c9190614a03565b50606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808516600090815260996020908152604080832093861683529290529081208054839290612fe2908490614df2565b9091555050604080516001600160a01b0385811682528481166020830152918101839052908516907f6909600037b75d7b4733aedd815442b5ec018a827751c832aaff64eba5d6d2dd90606001610cfa565b6065546001600160a01b031615801561305557506001600160a01b03821615155b6040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250906130a95760405162461bcd60e51b8152600401610a4c9190614a03565b50606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a26130ed82612f02565b5050565b600054610100900460ff1661316e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a4c565b6117a9613b63565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051808201909152600281527f3338000000000000000000000000000000000000000000000000000000000000602082015262278d008211156132205760405162461bcd60e51b8152600401610a4c9190614a03565b50609e5460408051918252602082018390527f338caf1431dddfb34caa16bfc51573f97922fa2f8eb6d70d27476d8b4a89d5c3910160405180910390a1609e55565b604080518082019091526002815261323560f01b602082015283821461329b5760405162461bcd60e51b8152600401610a4c9190614a03565b508260005b81811015611af55760008686838181106132bc576132bc614978565b90506020020160208101906132d191906140d7565b6001600160a01b038116600090815260a160205260408120549192508686858181106132ff576132ff614978565b90506020020135905062278d008111156040518060400160405280600281526020017f3339000000000000000000000000000000000000000000000000000000000000815250906133635760405162461bcd60e51b8152600401610a4c9190614a03565b506001600160a01b038316600081815260a160209081526040918290208490558151928352820184905281018290527f108376441269231310d8eb7d2c786779cb19c9b7f967e2e95ab366f0fde46dc29060600160405180910390a1505050806133cc906149a4565b90506132a0565b6001600160a01b0380851660009081526099602090815260408083209386168352929052908120805483929061340a908490614d35565b9091555050604080516001600160a01b0385811682528481166020830152918101839052908516907f1ec042c965e2edd7107b51188ee0f383e22e76179041ab3a9d18ff151405166c90606001610cfa565b6040805180820190915260018152603360f81b60208201526000906001600160a01b03871661349e5760405162461bcd60e51b8152600401610a4c9190614a03565b50825160408051808201909152600281527f33360000000000000000000000000000000000000000000000000000000000006020820152906134f35760405162461bcd60e51b8152600401610a4c9190614a03565b5060005b8351811015613765576001600160a01b0386161561354d5761354d868886848151811061352657613526614978565b602002602001015186858151811061354057613540614978565b6020026020010151612fab565b846001600160a01b0316876001600160a01b0316148061361f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639b4da03d8583815181106135a9576135a9614978565b60200260200101516040518263ffffffff1660e01b81526004016135dc91906001600160a01b0391909116815260200190565b602060405180830381865afa1580156135f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361d9190614b3b565b155b6040518060400160405280600281526020017f3337000000000000000000000000000000000000000000000000000000000000815250906136735760405162461bcd60e51b8152600401610a4c9190614a03565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c80d4e5888684815181106136b6576136b6614978565b60200260200101518685815181106136d0576136d0614978565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561374257600080fd5b505af1158015613756573d6000803e3d6000fd5b505050508060010190506134f7565b506001600160a01b038616600090815260a06020526040812080549182919061378d836149a4565b919050555060006040518060e00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018381526020014263ffffffff16815260200186815260200185815250905060006137f58261137b565b6000818152609f602052604090819020805460ff19166001179055519091507f9009ab153e8014fbfb02f2217f5cde7aa7f9ad734ae85ca3ee3f4ca2fdd499f9906138439083908590614e05565b60405180910390a198975050505050505050565b6033546001600160a01b031633146117a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a4c565b6001600160a01b0383163b15613a06576040517f1626ba7e00000000000000000000000000000000000000000000000000000000808252906001600160a01b03851690631626ba7e9061390a9086908690600401614e1e565b602060405180830381865afa158015613927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394b9190614e37565b7fffffffff000000000000000000000000000000000000000000000000000000001614610e845760405162461bcd60e51b815260206004820152605360248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a2045524331323731207369676e61747572652060648201527f766572696669636174696f6e206661696c656400000000000000000000000000608482015260a401610a4c565b826001600160a01b0316613a1a8383613be0565b6001600160a01b031614610e845760405162461bcd60e51b815260206004820152604760248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a207369676e6174757265206e6f742066726f6d60648201527f207369676e657200000000000000000000000000000000000000000000000000608482015260a401610a4c565b6040517fc608c7f30000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015284811660248301526044820184905282811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063c608c7f390608401600060405180830381600087803b158015613b4f57600080fd5b505af1158015610b14573d6000803e3d6000fd5b600054610100900460ff16612b435760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a4c565b6000806000613bef8585613bfc565b91509150610a0181613c41565b6000808251604103613c325760208301516040840151606085015160001a613c2687828585613da6565b94509450505050613c3a565b506000905060025b9250929050565b6000816004811115613c5557613c55614e79565b03613c5d5750565b6001816004811115613c7157613c71614e79565b03613cbe5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a4c565b6002816004811115613cd257613cd2614e79565b03613d1f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a4c565b6003816004811115613d3357613d33614e79565b03610dd55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a4c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613ddd5750600090506003613e61565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613e31573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613e5a57600060019250925050613e61565b9150600090505b94509492505050565b60008083601f840112613e7c57600080fd5b50813567ffffffffffffffff811115613e9457600080fd5b6020830191508360208260051b8501011115613c3a57600080fd5b60008060208385031215613ec257600080fd5b823567ffffffffffffffff811115613ed957600080fd5b611c7885828601613e6a565b6000806000806000806000806080898b031215613f0157600080fd5b883567ffffffffffffffff80821115613f1957600080fd5b613f258c838d01613e6a565b909a50985060208b0135915080821115613f3e57600080fd5b613f4a8c838d01613e6a565b909850965060408b0135915080821115613f6357600080fd5b613f6f8c838d01613e6a565b909650945060608b0135915080821115613f8857600080fd5b50613f958b828c01613e6a565b999c989b5096995094979396929594505050565b6001600160a01b0381168114610dd557600080fd5b8035613fc981613fa9565b919050565b600080600080600060a08688031215613fe657600080fd5b8535613ff181613fa9565b9450602086013561400181613fa9565b9350604086013561401181613fa9565b94979396509394606081013594506080013592915050565b60006060828403121561403b57600080fd5b50919050565b60008083601f84011261405357600080fd5b50813567ffffffffffffffff81111561406b57600080fd5b602083019150836020828501011115613c3a57600080fd5b60008060006080848603121561409857600080fd5b6140a28585614029565b9250606084013567ffffffffffffffff8111156140be57600080fd5b6140ca86828701614041565b9497909650939450505050565b6000602082840312156140e957600080fd5b81356140f481613fa9565b9392505050565b60008060006060848603121561411057600080fd5b833561411b81613fa9565b9250602084013561412b81613fa9565b929592945050506040919091013590565b60006020828403121561414e57600080fd5b5035919050565b60008060008060008060008060c0898b03121561417157600080fd5b883561417c81613fa9565b9750602089013561418c81613fa9565b96506040890135955060608901359450608089013567ffffffffffffffff808211156141b757600080fd5b6141c38c838d01613e6a565b909650945060a08b0135915080821115613f8857600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715614215576142156141dc565b60405290565b6040805190810167ffffffffffffffff81118282101715614215576142156141dc565b604051601f8201601f1916810167ffffffffffffffff81118282101715614267576142676141dc565b604052919050565b63ffffffff81168114610dd557600080fd5b8035613fc98161426f565b600067ffffffffffffffff8211156142a6576142a66141dc565b5060051b60200190565b600082601f8301126142c157600080fd5b813560206142d66142d18361428c565b61423e565b82815260059290921b840181019181810190868411156142f557600080fd5b8286015b8481101561431957803561430c81613fa9565b83529183019183016142f9565b509695505050505050565b600082601f83011261433557600080fd5b813560206143456142d18361428c565b82815260059290921b8401810191818101908684111561436457600080fd5b8286015b848110156143195780358352918301918301614368565b600060e0828403121561439157600080fd5b6143996141f2565b90506143a482613fbe565b81526143b260208301613fbe565b60208201526143c360408301613fbe565b6040820152606082013560608201526143de60808301614281565b608082015260a082013567ffffffffffffffff808211156143fe57600080fd5b61440a858386016142b0565b60a084015260c084013591508082111561442357600080fd5b5061443084828501614324565b60c08301525092915050565b60006020828403121561444e57600080fd5b813567ffffffffffffffff81111561446557600080fd5b6144718482850161437f565b949350505050565b60006020828403121561448b57600080fd5b813560ff811681146140f457600080fd5b6020808252825182820181905260009190848201906040850190845b818110156144d4578351835292840192918401916001016144b8565b50909695505050505050565b600080604083850312156144f357600080fd5b82356144fe81613fa9565b9150602083013561450e81613fa9565b809150509250929050565b60006040828403121561452b57600080fd5b61453361421b565b9050813567ffffffffffffffff8082111561454d57600080fd5b818401915084601f83011261456157600080fd5b8135602082821115614575576145756141dc565b614587601f8301601f1916820161423e565b9250818352868183860101111561459d57600080fd5b8181850182850137600081838501015282855280860135818601525050505092915050565b600080600080600060a086880312156145da57600080fd5b85356145e581613fa9565b945060208601356145f581613fa9565b9350604086013567ffffffffffffffff8082111561461257600080fd5b61461e89838a01614519565b9450606088013591508082111561463457600080fd5b5061464188828901614519565b95989497509295608001359392505050565b6000806040838503121561466657600080fd5b823561467181613fa9565b9150602083013567ffffffffffffffff81111561468d57600080fd5b614699858286016142b0565b9150509250929050565b600081518084526020808501945080840160005b838110156146d3578151875295820195908201906001016146b7565b509495945050505050565b6020815260006140f460208301846146a3565b6000806020838503121561470457600080fd5b823567ffffffffffffffff81111561471b57600080fd5b611c7885828601614041565b8015158114610dd557600080fd5b60008060008060006080868803121561474d57600080fd5b853567ffffffffffffffff8082111561476557600080fd5b9087019060e0828a03121561477957600080fd5b9095506020870135908082111561478f57600080fd5b5061479c88828901613e6a565b9095509350506040860135915060608601356147b781614727565b809150509295509295909350565b600080604083850312156147d857600080fd5b82356147e381613fa9565b946020939093013593505050565b6000806000806080858703121561480757600080fd5b843561481281613fa9565b935060208501359250604085013561482981613fa9565b9396929550929360600135925050565b600081518084526020808501945080840160005b838110156146d35781516001600160a01b03168752958201959082019060010161484d565b6040815260006148856040830185614839565b8281036020840152610feb81856146a3565b600080600080604085870312156148ad57600080fd5b843567ffffffffffffffff808211156148c557600080fd5b6148d188838901613e6a565b909650945060208701359150808211156148ea57600080fd5b506148f787828801613e6a565b95989497509550505050565b60008060006060848603121561491857600080fd5b833561492381613fa9565b9250602084013567ffffffffffffffff81111561493f57600080fd5b61494b86828701614519565b925050604084013590509250925092565b60006060828403121561496e57600080fd5b6140f48383614029565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016149b6576149b661498e565b5060010190565b6000815180845260005b818110156149e3576020818501810151868301820152016149c7565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006140f460208301846149bd565b6000823560de19833603018112614a2c57600080fd5b9190910192915050565b6000808335601e19843603018112614a4d57600080fd5b83018035915067ffffffffffffffff821115614a6857600080fd5b6020019150600581901b3603821315613c3a57600080fd5b600060208284031215614a9257600080fd5b81356140f481614727565b606081018235614aac81613fa9565b6001600160a01b039081168352602084013590614ac882613fa9565b1660208301526040830135614adc8161426f565b63ffffffff811660408401525092915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215614b3057600080fd5b81516140f481613fa9565b600060208284031215614b4d57600080fd5b81516140f481614727565b60006001600160a01b03808351168452806020840151166020850152806040840151166040850152506060820151606084015263ffffffff608083015116608084015260a082015160e060a0850152614bb460e0850182614839565b905060c083015184820360c0860152610feb82826146a3565b6020815260006140f46020830184614b58565b60008235605e19833603018112614a2c57600080fd5b600082601f830112614c0757600080fd5b81516020614c176142d18361428c565b82815260059290921b84018101918181019086841115614c3657600080fd5b8286015b848110156143195780518352918301918301614c3a565b60008060408385031215614c6457600080fd5b825167ffffffffffffffff80821115614c7c57600080fd5b818501915085601f830112614c9057600080fd5b81516020614ca06142d18361428c565b82815260059290921b84018101918181019089841115614cbf57600080fd5b948201945b83861015614ce6578551614cd781613fa9565b82529482019490820190614cc4565b91880151919650909350505080821115614cff57600080fd5b5061469985828601614bf6565b6000610a05368361437f565b600060208284031215614d2a57600080fd5b81356140f48161426f565b80820180821115610a0557610a0561498e565b8135614d5381613fa9565b81546001600160a01b0319166001600160a01b03821617825550600181016020830135614d7f81613fa9565b81546001600160a01b0319166001600160a01b038216178255506040830135614da78161426f565b81547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b77ffffffff0000000000000000000000000000000000000000161790555050565b81810381811115610a0557610a0561498e565b8281526040602082015260006144716040830184614b58565b82815260406020820152600061447160408301846149bd565b600060208284031215614e4957600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146140f457600080fd5b634e487b7160e01b600052602160045260246000fdfea264697066735822122067d5a923194a546008a93396f6bdaba01a1c803ee659ae0c1a368a7cf7f4fcb764736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "OperatorMetadataURIUpdated(address,string)": {
        "details": "Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing"
      },
      "WithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]))": {
        "params": {
          "withdrawal": "Is the withdrawal itself.",
          "withdrawalRoot": "Is the hash of the `withdrawal`."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateCurrentStakerDelegationDigestHash(address,address,uint256)": {
        "params": {
          "expiry": "The desired expiry time of the staker's signature",
          "operator": "The operator who is being delegated to",
          "staker": "The signing staker"
        }
      },
      "calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)": {
        "params": {
          "_delegationApprover": "the operator's `delegationApprover` who will be signing the delegationHash (in general)",
          "approverSalt": "A unique and single use value associated with the approver signature.",
          "expiry": "Time after which the approver's signature becomes invalid",
          "operator": "The account receiving delegated stake",
          "staker": "The account delegating their stake"
        }
      },
      "calculateStakerDelegationDigestHash(address,uint256,address,uint256)": {
        "params": {
          "_stakerNonce": "The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`",
          "expiry": "The desired expiry time of the staker's signature",
          "operator": "The operator who is being delegated to",
          "staker": "The signing staker"
        }
      },
      "constructor": {
        "details": "Initializes the immutable addresses of the pool mananger and slasher."
      },
      "decreaseDelegatedShares(address,address,uint256)": {
        "details": "*If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.Callable only by the PoolController.sol.",
        "params": {
          "pool": "The pool in which to decrease the delegated shares.",
          "shares": "The number of shares to decrease.",
          "staker": "The address to increase the delegated shares for their operator."
        }
      },
      "delegateTo(address,(bytes,uint256),bytes32)": {
        "details": "The approverSignatureAndExpiry is used in the event that:          1) the operator's `delegationApprover` address is set to a non-zero value.                  AND          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator             or their delegationApprover is the `msg.sender`, then approval is assumed.In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input in this case to save on complexity + gas costs",
        "params": {
          "approverSalt": "A unique single use value tied to an individual signature.",
          "approverSignatureAndExpiry": "Verifies the operator approves of this delegation",
          "operator": "The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer."
        }
      },
      "delegateToBySignature(address,address,(bytes,uint256),(bytes,uint256),bytes32)": {
        "details": "If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.the operator's `delegationApprover` address is set to a non-zero value.neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover is the `msg.sender`, then approval is assumed.This function will revert if the current `block.timestamp` is equal to or exceeds the expiryIn the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input in this case to save on complexity + gas costs",
        "params": {
          "approverSalt": "Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.",
          "approverSignatureAndExpiry": "is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:",
          "operator": "The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.",
          "staker": "The account delegating stake to an `operator` account",
          "stakerSignatureAndExpiry": "Signed data from the staker authorizing delegating stake to an operator"
        }
      },
      "domainSeparator()": {
        "details": "The domain separator will change in the event of a fork that changes the ChainID.By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision. for more detailed information please read EIP-712."
      },
      "getDelegatableShares(address)": {
        "details": "Returns two empty arrays in the case that the Staker has no actively-delegateable shares."
      },
      "getWithdrawalDelay(address[])": {
        "params": {
          "pools": "The pools to check withdrawal delays for"
        }
      },
      "increaseDelegatedShares(address,address,uint256)": {
        "details": "*If the staker is actively delegated*, then increases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.Callable only by the PoolController.sol.",
        "params": {
          "pool": "The pool in which to increase the delegated shares.",
          "shares": "The number of shares to increase.",
          "staker": "The address to increase the delegated shares for their operator."
        }
      },
      "initialize(address,address,uint256,uint256,address[],uint256[])": {
        "details": "Initializes the addresses of the initial owner, pauser registry, and paused status. minWithdrawalDelay is set only once here"
      },
      "modifyOperatorDetails((address,address,uint32))": {
        "details": "The caller must have previously registered as an operator in BinLayer.",
        "params": {
          "newOperatorDetails": "is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause(uint256)": {
        "details": "This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.",
        "params": {
          "newPausedStatus": "represents the new value for `_paused` to take, which means it may flip several bits at once."
        }
      },
      "registerAsOperator((address,address,uint32),string)": {
        "details": "Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".This function will revert if the caller is already delegated to an operator.Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event",
        "params": {
          "metadataURI": "is a URI for the operator's metadata, i.e. a link providing more details on the operator.",
          "registeringOperatorDetails": "is the `OperatorDetails` for the operator."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setMinWithdrawalDelay(uint256)": {
        "params": {
          "newMinWithdrawalDelay": "new value of `minWithdrawalDelay`."
        }
      },
      "setPoolWithdrawalDelay(address[],uint256[])": {
        "params": {
          "pools": "The pools to set the minimum withdrawal delay for",
          "withdrawalDelay": "The minimum withdrawal delay to set for each pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause(uint256)": {
        "details": "This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.",
        "params": {
          "newPausedStatus": "represents the new value for `_paused` to take, which means it may flip several bits at once."
        }
      },
      "updateOperatorMetadataURI(string)": {
        "params": {
          "metadataURI": "The URI for metadata associated with an operator"
        }
      },
      "updateWrappedTokenGateway(address)": {
        "params": {
          "_newWrappedTokenGateway": "New wrapped token gateway address"
        }
      },
      "withdraw((address,address,address,uint256,uint32,address[],uint256[]),address[],uint256,bool)": {
        "details": "middlewareTimesIndex is unused, but will be used in the Slasher eventuallybeaconChainETHPool shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that any beaconChainETHPool shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in any other pools, which will be transferred to the withdrawer.",
        "params": {
          "middlewareTimesIndex": "is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array",
          "receiveAsTokens": "If true, the shares specified in the withdrawal will be withdrawn from the specified pools themselves and sent to the caller, through calls to `withdrawal.pools[i].withdraw`. If false, then the shares in the specified pools will simply be transferred to the caller directly.",
          "tokens": "Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Pool in the `withdrawal.pools` array. This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)",
          "withdrawal": "The Withdrawal to complete."
        }
      },
      "withdraws((address,address,address,uint256,uint32,address[],uint256[])[],address[][],uint256[],bool[])": {
        "details": "See `withdraw` for relevant dev tags",
        "params": {
          "middlewareTimesIndexes": "One index to reference per Withdrawal. See `withdraw` for the usage of a single index.",
          "receiveAsTokens": "Whether or not to complete each withdrawal as tokens. See `withdraw` for the usage of a single boolean.",
          "tokens": "Array of tokens for each Withdrawal. See `withdraw` for the usage of a single array.",
          "withdrawals": "The Withdrawals to complete."
        }
      }
    },
    "title": "DelegationController.sol",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MinWithdrawalDelaySet(uint256,uint256)": {
        "notice": "Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`."
      },
      "OperatorDetailsModified(address,(address,address,uint32))": {
        "notice": "Emitted when an operator updates their OperatorDetails to @param newOperatorDetails"
      },
      "OperatorMetadataURIUpdated(address,string)": {
        "notice": "Emitted when @param operator indicates that they are updating their MetadataURI string"
      },
      "OperatorSharesDecreased(address,address,address,uint256)": {
        "notice": "Emitted whenever an operator's shares are decreased for a given pool. Note that shares is the delta in the operator's shares."
      },
      "OperatorSharesIncreased(address,address,address,uint256)": {
        "notice": "Emitted whenever an operator's shares are increased for a given pool. Note that shares is the delta in the operator's shares."
      },
      "Paused(address,uint256)": {
        "notice": "Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`."
      },
      "PauserRegistrySet(address,address)": {
        "notice": "Emitted when the `pauserRegistry` is set to `newPauserRegistry`."
      },
      "PoolWithdrawalDelaySet(address,uint256,uint256)": {
        "notice": "Emitted when the `poolWithdrawalDelay` variable is modified from `previousValue` to `newValue`."
      },
      "StakerDelegated(address,address)": {
        "notice": "Emitted when @param staker delegates to @param operator."
      },
      "StakerForceUndelegated(address,address)": {
        "notice": "Emitted when @param staker is undelegated via a call not originating from the staker themself"
      },
      "StakerUndelegated(address,address)": {
        "notice": "Emitted when @param staker undelegates from @param operator."
      },
      "Unpaused(address,uint256)": {
        "notice": "Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`."
      },
      "WithdrawalCompleted(bytes32)": {
        "notice": "Emitted when a queued withdrawal is completed"
      },
      "WithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]))": {
        "notice": "Emitted when a new withdrawal is queued."
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_APPROVAL_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the `DelegationApproval` struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "STAKER_DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the `StakerDelegation` struct used by the contract"
      },
      "calculateCurrentStakerDelegationDigestHash(address,address,uint256)": {
        "notice": "Calculates the digestHash for a `staker` to sign to delegate to an `operator`"
      },
      "calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)": {
        "notice": "Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions."
      },
      "calculateStakerDelegationDigestHash(address,uint256,address,uint256)": {
        "notice": "Calculates the digest hash to be signed and used in the `delegateToBySignature` function"
      },
      "calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))": {
        "notice": "Returns the keccak256 hash of `withdrawal`."
      },
      "cumulativeWithdrawalsQueued(address)": {
        "notice": "Mapping: staker => cumulative number of queued withdrawals they have ever initiated."
      },
      "decreaseDelegatedShares(address,address,uint256)": {
        "notice": "Decreases a staker's delegated share balance in a pool."
      },
      "delegateTo(address,(bytes,uint256),bytes32)": {
        "notice": "Caller delegates their stake to an operator."
      },
      "delegateToBySignature(address,address,(bytes,uint256),(bytes,uint256),bytes32)": {
        "notice": "Caller delegates a staker's stake to an operator with valid signatures from both parties."
      },
      "delegatedTo(address)": {
        "notice": "Mapping: staker => operator whom the staker is currently delegated to."
      },
      "delegationApprover(address)": {
        "notice": "Returns the delegationApprover account for an operator"
      },
      "delegationApproverSaltIsSpent(address,bytes32)": {
        "notice": "Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover."
      },
      "domainSeparator()": {
        "notice": "Getter function for the current EIP-712 domain separator for this contract."
      },
      "getDelegatableShares(address)": {
        "notice": "Returns the number of actively-delegatable shares a staker has across all pools."
      },
      "getOperatorShares(address,address[])": {
        "notice": "Given array of pools, returns array of shares for the operator"
      },
      "getWithdrawalDelay(address[])": {
        "notice": "Given a list of pools, return the minimum cooldown that must pass to withdraw from all the inputted pools. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay."
      },
      "increaseDelegatedShares(address,address,uint256)": {
        "notice": "Increases a staker's delegated share balance in a pool."
      },
      "isDelegated(address)": {
        "notice": "Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise."
      },
      "isOperator(address)": {
        "notice": "Returns true is an operator has previously registered for delegation."
      },
      "minWithdrawalDelay()": {
        "notice": "Global minimum withdrawal delay for all pool withdrawals. In a prior Goerli release, we only had a global min withdrawal delay across all strategies. In addition, we now also configure withdrawal delays on a per-pool basis. To withdraw from a pool, max(minWithdrawalDelay, poolWithdrawalDelay[pool]) number of timestamp must have passed. See mapping poolWithdrawalDelay below for per-pool withdrawal delays."
      },
      "modifyOperatorDetails((address,address,uint32))": {
        "notice": "Updates an operator's stored `OperatorDetails`."
      },
      "operatorDetails(address)": {
        "notice": "Returns the OperatorDetails struct associated with an `operator`."
      },
      "operatorShares(address,address)": {
        "notice": "returns the total number of shares in `pool` that are delegated to `operator`.Mapping: operator => pool => total number of shares in the pool delegated to the operator."
      },
      "pause(uint256)": {
        "notice": "This function is used to pause an BinLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig."
      },
      "pauseAll()": {
        "notice": "Alias for `pause(type(uint256).max)`."
      },
      "paused()": {
        "notice": "Returns the current paused status as a uint256."
      },
      "paused(uint8)": {
        "notice": "Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise"
      },
      "pauserRegistry()": {
        "notice": "Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing)."
      },
      "pendingWithdrawals(bytes32)": {
        "notice": "Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending"
      },
      "poolController()": {
        "notice": "The PoolController.sol contract for BinLayer"
      },
      "poolWithdrawalDelay(address)": {
        "notice": "Minimum delay enforced by this contract per Pool for completing queued withdrawals. Measured in timestamp, and adjustable by this contract's owner, up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced)."
      },
      "registerAsOperator((address,address,uint32),string)": {
        "notice": "Registers the caller as an operator in BinLayer."
      },
      "setMinWithdrawalDelay(uint256)": {
        "notice": "Owner-only function for modifying the value of the `minWithdrawalDelay` variable."
      },
      "setPauserRegistry(address)": {
        "notice": "Allows the unpauser to set a new pauser registry"
      },
      "setPoolWithdrawalDelay(address[],uint256[])": {
        "notice": "Called by owner to set the minimum withdrawal delay for each passed in pool Note that the min cooldown to complete a withdrawal of a pool is MAX(minWithdrawalDelay, poolWithdrawalDelay[pool])"
      },
      "slasher()": {
        "notice": "The Slasher contract for BinLayer"
      },
      "stakerNonce(address)": {
        "notice": "Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked."
      },
      "stakerOptOutWindow(address)": {
        "notice": "Returns the stakerOptOutWindow for an operator"
      },
      "undelegate(address)": {
        "notice": "Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate a staker from their operator. Undelegation immediately removes ALL active shares/pools from both the staker and operator, and places the shares and pools in the unstake"
      },
      "unpause(uint256)": {
        "notice": "This function is used to unpause an BinLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract."
      },
      "unstakes((address[],uint256[],address)[])": {
        "notice": "Enables a staker to withdraw a portion of shares. Withdrawn shares/pools are promptly removed. from the staker. If the staker is delegated, withdrawn shares/pools are also removed from their operator. All withdrawn shares/pools are placed in a queue and can be fully withdrawn after a delay."
      },
      "updateOperatorMetadataURI(string)": {
        "notice": "Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated."
      },
      "updateWrappedTokenGateway(address)": {
        "notice": "Called by owner to update the wrapped token gateway"
      },
      "withdraw((address,address,address,uint256,uint32,address[],uint256[]),address[],uint256,bool)": {
        "notice": "Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`"
      },
      "withdraws((address,address,address,uint256,uint32,address[],uint256[])[],address[][],uint256[],bool[])": {
        "notice": "Array-ified version of `withdraw`. Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`"
      },
      "wrappedTokenGateway()": {
        "notice": "Wrapped token gateway"
      }
    },
    "notice": "this is the delegation contract for BinLayer. The primary functions of this contract are: - allowing anyone to register as an operator in BinLayer - enabling operators to set parameters for stakers who delegate to them - allowing any staker to delegate their stake to the operator of their choice (each staker can only delegate to one operator at a time) - allowing a staker to undelegate their assets from the operator they are delegated to (done as part of the withdrawal process, initiated through the PoolController)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 766,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12709,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "pauserRegistry",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IPauserRegistry)10133"
      },
      {
        "astId": 12712,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "_paused",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 13002,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6302,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 6321,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "operatorShares",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_mapping(t_contract(IPool)10235,t_uint256))"
      },
      {
        "astId": 6327,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "_operatorDetails",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_struct(OperatorDetails)9542_storage)"
      },
      {
        "astId": 6332,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "delegatedTo",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6337,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "stakerNonce",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6344,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "delegationApproverSaltIsSpent",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 6347,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "minWithdrawalDelay",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 6352,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "pendingWithdrawals",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6357,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "cumulativeWithdrawalsQueued",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6363,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "poolWithdrawalDelay",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_contract(IPool)10235,t_uint256)"
      },
      {
        "astId": 6366,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "wrappedTokenGateway",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 6389,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "__gap",
        "offset": 0,
        "slot": "163",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 316,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "_status",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 385,
        "contract": "contracts/core/DelegationController.sol:DelegationController",
        "label": "__gap",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPauserRegistry)10133": {
        "encoding": "inplace",
        "label": "contract IPauserRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)10235": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_contract(IPool)10235,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IPool => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IPool)10235,t_uint256)"
      },
      "t_mapping(t_address,t_struct(OperatorDetails)9542_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDelegationController.OperatorDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(OperatorDetails)9542_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IPool)10235,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IPool)10235",
        "label": "mapping(contract IPool => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(OperatorDetails)9542_storage": {
        "encoding": "inplace",
        "label": "struct IDelegationController.OperatorDetails",
        "members": [
          {
            "astId": 9535,
            "contract": "contracts/core/DelegationController.sol:DelegationController",
            "label": "__deprecated_earningsReceiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9538,
            "contract": "contracts/core/DelegationController.sol:DelegationController",
            "label": "delegationApprover",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9541,
            "contract": "contracts/core/DelegationController.sol:DelegationController",
            "label": "stakerOptOutWindow",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}