{
  "language": "Solidity",
  "sources": {
    "@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin-upgrades/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin-upgrades/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/core/AVSDirectory.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\nimport '@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol';\nimport '@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol';\nimport '../permissions/Pausable.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport './AVSDirectoryStorage.sol';\nimport '../helpers/Errors.sol';\n\ncontract AVSDirectory is Initializable, OwnableUpgradeable, Pausable, AVSDirectoryStorage, ReentrancyGuardUpgradeable {\n  // @dev Index for flag that pauses operator register/deregister to avs when set.\n  uint8 internal constant PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS = 0;\n\n  // @dev Chain ID at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  /*******************************************************************************\n                            INITIALIZING FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @dev Initializes the immutable addresses of the delegation controller contracts\n   */\n  constructor(IDelegationController _delegation) AVSDirectoryStorage(_delegation) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  /**\n   * @dev Initializes the addresses of the initial owner, pauser registry, and paused status.\n   * minWithdrawalDelayBlocks is set only once here\n   */\n  function initialize(address initialOwner, IPauserRegistry _pauserRegistry, uint256 initialPausedStatus) external initializer {\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    _transferOwnership(initialOwner);\n  }\n\n  /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n  /**\n   * @notice Called by the AVS's service manager contract to register an operator with the avs.\n   * @param operator The address of the operator to register.\n   * @param operatorSignature The signature, salt, and expiry of the operator's signature.\n   */\n  function registerOperatorToAVS(\n    address operator,\n    ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n  ) external onlyWhenNotPaused(PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS) {\n    require(operatorSignature.expiry >= block.timestamp, Errors.SIGNATURE_EXPIRED);\n    require(avsOperatorStatus[msg.sender][operator] != OperatorAVSRegistrationStatus.REGISTERED, Errors.OPERATOR_ALREADY_REGISTERED);\n    require(!operatorSaltIsSpent[operator][operatorSignature.salt], Errors.SALT_ALREADY_SPENT);\n    require(delegation.isOperator(operator), Errors.NOT_REGISTERED_IN_BINLAYER);\n\n    // Calculate the digest hash\n    bytes32 operatorRegistrationDigestHash = calculateOperatorAVSRegistrationDigestHash({\n      operator: operator,\n      avs: msg.sender,\n      salt: operatorSignature.salt,\n      expiry: operatorSignature.expiry\n    });\n\n    // forgefmt: disable-next-item\n    // Check that the signature is valid\n    EIP1271SignatureUtils.checkSignature_EIP1271(operator, operatorRegistrationDigestHash, operatorSignature.signature);\n\n    // Set the operator as registered\n    avsOperatorStatus[msg.sender][operator] = OperatorAVSRegistrationStatus.REGISTERED;\n\n    // Mark the salt as spent\n    operatorSaltIsSpent[operator][operatorSignature.salt] = true;\n\n    emit OperatorAVSRegistrationStatusUpdated(operator, msg.sender, OperatorAVSRegistrationStatus.REGISTERED);\n  }\n\n  /**\n   * @notice Called by an avs to deregister an operator with the avs.\n   * @param operator The address of the operator to deregister.\n   */\n  function deregisterOperatorFromAVS(address operator) external onlyWhenNotPaused(PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS) {\n    require(avsOperatorStatus[msg.sender][operator] == OperatorAVSRegistrationStatus.REGISTERED, Errors.NOT_REGISTERED_IN_BINLAYER);\n\n    // Set the operator as deregistered\n    avsOperatorStatus[msg.sender][operator] = OperatorAVSRegistrationStatus.UNREGISTERED;\n\n    emit OperatorAVSRegistrationStatusUpdated(operator, msg.sender, OperatorAVSRegistrationStatus.UNREGISTERED);\n  }\n\n  /**\n   * @notice Called by an avs to emit an `AVSMetadataURIUpdated` event indicating the information has updated.\n   * @param metadataURI The URI for metadata associated with an avs\n   */\n  function updateAVSMetadataURI(string calldata metadataURI) external {\n    emit AVSMetadataURIUpdated(msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice Called by an operator to cancel a salt that has been used to register with an AVS.\n   * @param salt A unique and single use value associated with the approver signature.\n   */\n  function cancelSalt(bytes32 salt) external {\n    require(!operatorSaltIsSpent[msg.sender][salt], Errors.CANNOT_CANCEL_SPENT_SALT);\n    operatorSaltIsSpent[msg.sender][salt] = true;\n  }\n\n  /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Calculates the digest hash to be signed by an operator to register with an AVS\n   * @param operator The account registering as an operator\n   * @param avs The address of the service manager contract for the AVS that the operator is registering to\n   * @param salt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateOperatorAVSRegistrationDigestHash(\n    address operator,\n    address avs,\n    bytes32 salt,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 structHash = keccak256(abi.encode(OPERATOR_AVS_REGISTRATION_TYPEHASH, operator, avs, salt, expiry));\n    // calculate the digest hash\n    bytes32 digestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), structHash));\n    return digestHash;\n  }\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  // @notice Internal function for calculating the current domain separator of this contract\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('BinLayer')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/AVSDirectoryStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IAVSDirectory.sol';\nimport '../interfaces/IPoolController.sol';\nimport '../interfaces/IDelegationController.sol';\nimport '../interfaces/ISlasher.sol';\n\nabstract contract AVSDirectoryStorage is IAVSDirectory {\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n\n  /// @notice The EIP-712 typehash for the `Registration` struct used by the contract\n  bytes32 public constant OPERATOR_AVS_REGISTRATION_TYPEHASH =\n    keccak256('OperatorAVSRegistration(address operator,address avs,bytes32 salt,uint256 expiry)');\n\n  /// @notice The DelegationController contract for BinLayer\n  IDelegationController public immutable delegation;\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n\n  /// @notice Mapping: AVS => operator => enum of operator status to the AVS\n  mapping(address => mapping(address => OperatorAVSRegistrationStatus)) public avsOperatorStatus;\n\n  /// @notice Mapping: operator => 32-byte salt => whether or not the salt has already been used by the operator.\n  /// @dev Salt is used in the `registerOperatorToAVS` function.\n  mapping(address => mapping(bytes32 => bool)) public operatorSaltIsSpent;\n\n  constructor(IDelegationController _delegation) {\n    delegation = _delegation;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/core/DelegationController.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\nimport '@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol';\nimport '@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol';\nimport '../permissions/Pausable.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport './DelegationControllerStorage.sol';\nimport '../helpers/Errors.sol';\n\n/**\n * @title DelegationController.sol\n * @notice  this is the delegation contract for BinLayer. The primary functions of this contract are:\n * - allowing anyone to register as an operator in BinLayer\n * - enabling operators to set parameters for stakers who delegate to them\n * - allowing any staker to delegate their stake to the operator of their choice (each staker can only delegate to one operator at a time)\n * - allowing a staker to undelegate their assets from the operator they are delegated to (done as part of the withdrawal process, initiated through the PoolController)\n */\ncontract DelegationController is Initializable, OwnableUpgradeable, Pausable, DelegationControllerStorage, ReentrancyGuardUpgradeable {\n  // @dev Flag index that, when set, pauses new delegations\n  uint8 internal constant PAUSED_NEW_DELEGATION = 0;\n\n  // @dev Index for flag that pauses unstake when set.\n  uint8 internal constant PAUSED_UNSTAKE = 1;\n\n  // @dev Index for flag that pauses withdraw when set.\n  uint8 internal constant PAUSED_WITHDRAW = 2;\n\n  // @dev Chain ID at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  // @dev Maximum Value for `stakerOptOutWindow`. Approximately equivalent to 6 months.\n  uint256 public constant MAX_STAKER_OPT_OUT_WINDOW = 180 days;\n\n  // @notice Simple permission for functions that are only callable by the PoolController.sol contract\n  modifier onlyPoolController() {\n    require(msg.sender == address(poolController), Errors.ONLY_POOL_CONTROLLER);\n    _;\n  }\n\n  /*******************************************************************************\n                            INITIALIZING FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @dev Initializes the immutable addresses of the pool mananger and slasher.\n   */\n  constructor(IPoolController _poolController, ISlasher _slasher) DelegationControllerStorage(_poolController, _slasher) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  /**\n   * @dev Initializes the addresses of the initial owner, pauser registry, and paused status.\n   * minWithdrawalDelay is set only once here\n   */\n  function initialize(\n    address initialOwner,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus,\n    uint256 _minWithdrawalDelay,\n    IPool[] calldata _pools,\n    uint256[] calldata _withdrawalDelay\n  ) external initializer {\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    __ReentrancyGuard_init();\n    _transferOwnership(initialOwner);\n    _setMinWithdrawalDelay(_minWithdrawalDelay);\n    _setPoolWithdrawalDelay(_pools, _withdrawalDelay);\n  }\n\n  /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n  /**\n   * @notice Registers the caller as an operator in BinLayer.\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n   *\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n   * @dev This function will revert if the caller is already delegated to an operator.\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external {\n    require(!isDelegated(msg.sender), Errors.OPERATOR_ALREADY_REGISTERED);\n    _setOperatorDetails(msg.sender, registeringOperatorDetails);\n    SignatureWithExpiry memory emptySignatureAndExpiry;\n    // delegate from the operator to themselves\n    _delegate(msg.sender, msg.sender, emptySignatureAndExpiry, bytes32(0));\n    // emit events\n    emit OperatorRegistered(msg.sender, registeringOperatorDetails);\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice Updates an operator's stored `OperatorDetails`.\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n   *\n   * @dev The caller must have previously registered as an operator in BinLayer.\n   */\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external {\n    require(isOperator(msg.sender), Errors.CALLER_NOT_OPERATOR);\n    _setOperatorDetails(msg.sender, newOperatorDetails);\n  }\n\n  /**\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n   * @param metadataURI The URI for metadata associated with an operator\n   */\n  function updateOperatorMetadataURI(string calldata metadataURI) external {\n    require(isOperator(msg.sender), Errors.CALLER_NOT_OPERATOR);\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice Caller delegates their stake to an operator.\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer.\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt A unique single use value tied to an individual signature.\n   * @dev The approverSignatureAndExpiry is used in the event that:\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\n   *                  AND\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external {\n    require(!isDelegated(msg.sender), Errors.ALREADY_DELEGATED);\n    require(isOperator(operator), Errors.NOT_REGISTERED_IN_BINLAYER);\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(msg.sender, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n   * @param staker The account delegating stake to an `operator` account\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   *\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n   * is the `msg.sender`, then approval is assumed.\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateToBySignature(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) external {\n    // check the signature expiry\n    require(stakerSignatureAndExpiry.expiry >= block.timestamp, Errors.SIGNATURE_EXPIRED);\n\n    require(!isDelegated(staker), Errors.ALREADY_DELEGATED);\n    require(isOperator(operator), Errors.NOT_REGISTERED_IN_BINLAYER);\n\n    // calculate the digest hash, then increment `staker`'s nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    bytes32 stakerDigestHash = calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, stakerSignatureAndExpiry.expiry);\n    unchecked {\n      stakerNonce[staker] = currentStakerNonce + 1;\n    }\n\n    // actually check that the signature is valid\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, stakerDigestHash, stakerSignatureAndExpiry.signature);\n\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(staker, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate\n   * a staker from their operator. Undelegation immediately removes ALL active shares/pools from\n   * both the staker and operator, and places the shares and pools in the unstake\n   */\n  function undelegate(address staker) external onlyWhenNotPaused(PAUSED_UNSTAKE) returns (bytes32[] memory withdrawalRoots) {\n    require(isDelegated(staker), Errors.STAKER_MUST_BE_DELEGATED);\n    require(!isOperator(staker), Errors.CANNOT_UNDELEGATE_OPERATOR);\n    require(staker != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n    address operator = delegatedTo[staker];\n    require(\n      msg.sender == staker || msg.sender == operator || msg.sender == _operatorDetails[operator].delegationApprover,\n      Errors.CALLER_CANNOT_UNDELEGATE\n    );\n\n    // Gather pools and shares to remove from staker/operator during undelegation\n    // Undelegation removes ALL currently-active pools and shares\n    (IPool[] memory pools, uint256[] memory shares) = getDelegatableShares(staker);\n\n    // emit an event if this action was not initiated by the staker themselves\n    if (msg.sender != staker) {\n      emit StakerForceUndelegated(staker, operator);\n    }\n\n    // undelegate the staker\n    emit StakerUndelegated(staker, operator);\n    delegatedTo[staker] = address(0);\n\n    // if no delegatable shares, return an empty array, and don't unstake\n    if (pools.length == 0) {\n      withdrawalRoots = new bytes32[](0);\n    } else {\n      withdrawalRoots = new bytes32[](pools.length);\n      for (uint256 i = 0; i < pools.length; i++) {\n        IPool[] memory singlePool = new IPool[](1);\n        uint256[] memory singleShare = new uint256[](1);\n        singlePool[0] = pools[i];\n        singleShare[0] = shares[i];\n\n        withdrawalRoots[i] = _removeSharesAndUnstake({\n          staker: staker,\n          operator: operator,\n          withdrawer: staker,\n          pools: singlePool,\n          shares: singleShare\n        });\n      }\n    }\n\n    return withdrawalRoots;\n  }\n\n  /**\n   * Enables a staker to withdraw a portion of shares. Withdrawn shares/pools are promptly removed.\n   * from the staker. If the staker is delegated, withdrawn shares/pools are also removed from\n   * their operator.\n   *\n   * All withdrawn shares/pools are placed in a queue and can be fully withdrawn after a delay.\n   */\n  function unstakes(UnstakeParams[] calldata unstakeParams) external onlyWhenNotPaused(PAUSED_UNSTAKE) returns (bytes32[] memory) {\n    bytes32[] memory withdrawalRoots = new bytes32[](unstakeParams.length);\n    address operator = delegatedTo[msg.sender];\n\n    for (uint256 i = 0; i < unstakeParams.length; i++) {\n      require(unstakeParams[i].pools.length == unstakeParams[i].shares.length, Errors.INPUT_LENGTH_MISMATCH);\n      require(\n        unstakeParams[i].withdrawer == msg.sender || unstakeParams[i].withdrawer == wrappedTokenGateway,\n        Errors.WITHDRAWER_NOT_STAKER_OR_GATEWAY\n      );\n\n      // Remove shares from staker's pools and place pools/shares in unstake.\n      // If the staker is delegated to an operator, the operator's delegated shares are also reduced\n      // NOTE: This will fail if the staker doesn't have the shares implied by the input parameters\n      withdrawalRoots[i] = _removeSharesAndUnstake({\n        staker: msg.sender,\n        operator: operator,\n        withdrawer: unstakeParams[i].withdrawer,\n        pools: unstakeParams[i].pools,\n        shares: unstakeParams[i].shares\n      });\n    }\n    return withdrawalRoots;\n  }\n\n  /**\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n   * @param withdrawal The Withdrawal to complete.\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Pool in the `withdrawal.pools` array.\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified pools themselves\n   * and sent to the caller, through calls to `withdrawal.pools[i].withdraw`. If false, then the shares in the specified pools\n   * will simply be transferred to the caller directly.\n   * @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\n   * @dev beaconChainETHPool shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n   * any beaconChainETHPool shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n   * any other pools, which will be transferred to the withdrawer.\n   */\n  function withdraw(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 middlewareTimesIndex,\n    bool receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_WITHDRAW) nonReentrant {\n    _withdraw(withdrawal, tokens, middlewareTimesIndex, receiveAsTokens);\n  }\n\n  /**\n   * @notice Array-ified version of `withdraw`.\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n   * @param withdrawals The Withdrawals to complete.\n   * @param tokens Array of tokens for each Withdrawal. See `withdraw` for the usage of a single array.\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `withdraw` for the usage of a single index.\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `withdraw` for the usage of a single boolean.\n   * @dev See `withdraw` for relevant dev tags\n   */\n  function withdraws(\n    Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexes,\n    bool[] calldata receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_WITHDRAW) nonReentrant {\n    for (uint256 i = 0; i < withdrawals.length; ++i) {\n      _withdraw(withdrawals[i], tokens[i], middlewareTimesIndexes[i], receiveAsTokens[i]);\n    }\n  }\n\n  /**\n   * @notice Increases a staker's delegated share balance in a pool.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param pool The pool in which to increase the delegated shares.\n   * @param shares The number of shares to increase.\n   *\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the PoolController.sol.\n   */\n  function increaseDelegatedShares(address staker, IPool pool, uint256 shares) external onlyPoolController {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // add pool shares to delegate's shares\n      _increaseOperatorShares({operator: operator, staker: staker, pool: pool, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Decreases a staker's delegated share balance in a pool.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param pool The pool in which to decrease the delegated shares.\n   * @param shares The number of shares to decrease.\n   *\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the PoolController.sol.\n   */\n  function decreaseDelegatedShares(address staker, IPool pool, uint256 shares) external onlyPoolController {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // subtract pool shares from delegate's shares\n      _decreaseOperatorShares({operator: operator, staker: staker, pool: pool, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Owner-only function for modifying the value of the `minWithdrawalDelay` variable.\n   * @param newMinWithdrawalDelay new value of `minWithdrawalDelay`.\n   */\n  function setMinWithdrawalDelay(uint256 newMinWithdrawalDelay) external onlyOwner {\n    _setMinWithdrawalDelay(newMinWithdrawalDelay);\n  }\n\n  /**\n   * @notice Called by owner to set the minimum withdrawal delay for each passed in pool\n   * Note that the min cooldown to complete a withdrawal of a pool is\n   * MAX(minWithdrawalDelay, poolWithdrawalDelay[pool])\n   * @param pools The pools to set the minimum withdrawal delay for\n   * @param withdrawalDelay The minimum withdrawal delay to set for each pool\n   */\n  function setPoolWithdrawalDelay(IPool[] calldata pools, uint256[] calldata withdrawalDelay) external onlyOwner {\n    _setPoolWithdrawalDelay(pools, withdrawalDelay);\n  }\n\n  /**\n   * @notice Called by owner to update the wrapped token gateway\n   * @param _newWrappedTokenGateway New wrapped token gateway address\n   */\n  function updateWrappedTokenGateway(address _newWrappedTokenGateway) external onlyOwner {\n    emit UpdateWrappedTokenGateway(wrappedTokenGateway, _newWrappedTokenGateway);\n    wrappedTokenGateway = _newWrappedTokenGateway;\n  }\n\n  /*******************************************************************************\n                            INTERNAL FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Sets operator parameters in the `_operatorDetails` mapping.\n   * @param operator The account registered as an operator updating their operatorDetails\n   * @param newOperatorDetails The new parameters for the operator\n   */\n  function _setOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) internal {\n    require(newOperatorDetails.stakerOptOutWindow <= MAX_STAKER_OPT_OUT_WINDOW, Errors.OPT_OUT_WINDOW_EXCEEDS_MAX);\n    require(newOperatorDetails.stakerOptOutWindow >= _operatorDetails[operator].stakerOptOutWindow, Errors.DECREASE_OPT_OUT_WINDOW);\n    _operatorDetails[operator] = newOperatorDetails;\n    emit OperatorDetailsModified(msg.sender, newOperatorDetails);\n  }\n\n  /**\n   * @notice Delegates *from* a `staker` *to* an `operator`.\n   * @param staker The address to delegate *from* -- this address is delegating control of its own assets.\n   * @param operator The address to delegate *to* -- this address is being given power to place the `staker`'s assets at risk on services\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   * @dev Ensures that:\n   *          1) the `staker` is not already delegated to an operator\n   *          2) the `operator` has indeed registered as an operator in BinLayer\n   *          3) if applicable, that the approver signature is valid and non-expired\n   */\n  function _delegate(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION) {\n    // fetch the operator's `delegationApprover` address and store it in memory in case we need to use it multiple times\n    address _delegationApprover = _operatorDetails[operator].delegationApprover;\n    /**\n     * Check the `_delegationApprover`'s signature, if applicable.\n     * If the `_delegationApprover` is the zero address, then the operator allows all stakers to delegate to them and this verification is skipped.\n     * If the `_delegationApprover` or the `operator` themselves is the caller, then approval is assumed and signature verification is skipped as well.\n     */\n    if (_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator) {\n      // check the signature expiry\n      require(approverSignatureAndExpiry.expiry >= block.timestamp, Errors.SIGNATURE_EXPIRED);\n      // check that the salt hasn't been used previously, then mark the salt as spent\n      require(!delegationApproverSaltIsSpent[_delegationApprover][approverSalt], Errors.SALT_ALREADY_SPENT);\n      delegationApproverSaltIsSpent[_delegationApprover][approverSalt] = true;\n\n      // calculate the digest hash\n      bytes32 approverDigestHash = calculateDelegationApprovalDigestHash(\n        staker,\n        operator,\n        _delegationApprover,\n        approverSalt,\n        approverSignatureAndExpiry.expiry\n      );\n\n      // actually check that the signature is valid\n      EIP1271SignatureUtils.checkSignature_EIP1271(_delegationApprover, approverDigestHash, approverSignatureAndExpiry.signature);\n    }\n\n    // record the delegation relation between the staker and operator, and emit an event\n    delegatedTo[staker] = operator;\n    emit StakerDelegated(staker, operator);\n\n    (IPool[] memory pools, uint256[] memory shares) = getDelegatableShares(staker);\n\n    for (uint256 i = 0; i < pools.length; ) {\n      _increaseOperatorShares({operator: operator, staker: staker, pool: pools[i], shares: shares[i]});\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @dev commented-out param (middlewareTimesIndex) is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * This param is intended to be passed on to the Slasher contract.\n   */\n  function _withdraw(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 /*middlewareTimesIndex*/,\n    bool receiveAsTokens\n  ) internal {\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    require(pendingWithdrawals[withdrawalRoot], Errors.ACTION_NOT_IN_QUEUE);\n\n    require(withdrawal.startTimestamp + minWithdrawalDelay <= block.timestamp, Errors.MIN_WITHDRAWAL_DELAY_NOT_PASSED);\n\n    require(msg.sender == withdrawal.withdrawer, Errors.ONLY_WITHDRAWER_CAN_COMPLETE);\n\n    if (receiveAsTokens) {\n      require(tokens.length == withdrawal.pools.length, Errors.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Remove `withdrawalRoot` from pending roots\n    delete pendingWithdrawals[withdrawalRoot];\n\n    // Finalize action by converting shares to tokens for each pool, or\n    // by re-awarding shares in each pool.\n    if (receiveAsTokens) {\n      for (uint256 i = 0; i < withdrawal.pools.length; ) {\n        require(\n          withdrawal.startTimestamp + poolWithdrawalDelay[withdrawal.pools[i]] <= block.timestamp,\n          Errors.WITHDRAWAL_DELAY_NOT_PASSED\n        );\n\n        _withdrawSharesAsTokens({\n          staker: withdrawal.staker,\n          withdrawer: msg.sender,\n          pool: withdrawal.pools[i],\n          shares: withdrawal.shares[i],\n          token: tokens[i]\n        });\n        unchecked {\n          ++i;\n        }\n      }\n      // Award shares back in PoolController.sol. If withdrawer is delegated, increase the shares delegated to the operator\n    } else {\n      address currentOperator = delegatedTo[msg.sender];\n      for (uint256 i = 0; i < withdrawal.pools.length; ) {\n        require(\n          withdrawal.startTimestamp + poolWithdrawalDelay[withdrawal.pools[i]] <= block.timestamp,\n          Errors.WITHDRAWAL_DELAY_NOT_PASSED\n        );\n\n        poolController.addShares(msg.sender, tokens[i], withdrawal.pools[i], withdrawal.shares[i]);\n        // Similar to `isDelegated` logic\n        if (currentOperator != address(0)) {\n          _increaseOperatorShares({\n            operator: currentOperator,\n            // the 'staker' here is the address receiving new shares\n            staker: msg.sender,\n            pool: withdrawal.pools[i],\n            shares: withdrawal.shares[i]\n          });\n        }\n\n        unchecked {\n          ++i;\n        }\n      }\n    }\n\n    emit WithdrawalCompleted(withdrawalRoot);\n  }\n\n  // @notice Increases `operator`s delegated shares in `pool` by `shares` and emits an `OperatorSharesIncreased` event\n  function _increaseOperatorShares(address operator, address staker, IPool pool, uint256 shares) internal {\n    operatorShares[operator][pool] += shares;\n    emit OperatorSharesIncreased(operator, staker, pool, shares);\n  }\n\n  // @notice Decreases `operator`s delegated shares in `pool` by `shares` and emits an `OperatorSharesDecreased` event\n  function _decreaseOperatorShares(address operator, address staker, IPool pool, uint256 shares) internal {\n    // This will revert on underflow, so no check needed\n    operatorShares[operator][pool] -= shares;\n    emit OperatorSharesDecreased(operator, staker, pool, shares);\n  }\n\n  /**\n   * @notice Removes `shares` in `pools` from `staker` who is currently delegated to `operator` and unstake to the `withdrawer`.\n   * @dev If the `operator` is indeed an operator, then the operator's delegated shares in the `pools` are also decreased appropriately.\n   * @dev If `withdrawer` is not the same address as `staker`, then thirdPartyTransfersForbidden[pool] must be set to false in the PoolController.sol.\n   */\n  function _removeSharesAndUnstake(\n    address staker,\n    address operator,\n    address withdrawer,\n    IPool[] memory pools,\n    uint256[] memory shares\n  ) internal returns (bytes32) {\n    require(staker != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n    require(pools.length != 0, Errors.POOLS_CANNOT_BE_EMPTY);\n\n    // Remove shares from staker and operator\n    // Each of these operations fail if we attempt to remove more shares than exist\n    for (uint256 i = 0; i < pools.length; ) {\n      // Similar to `isDelegated` logic\n      if (operator != address(0)) {\n        _decreaseOperatorShares({operator: operator, staker: staker, pool: pools[i], shares: shares[i]});\n      }\n\n      require(staker == withdrawer || !poolController.thirdPartyTransfersForbidden(pools[i]), Errors.THIRD_PARTY_TRANSFERS_FORBIDDEN);\n      // this call will revert if `shares[i]` exceeds the Staker's current shares in `pools[i]`\n      poolController.removeShares(staker, pools[i], shares[i]);\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    // Create queue entry and increment withdrawal nonce\n    uint256 nonce = cumulativeWithdrawalsQueued[staker];\n    cumulativeWithdrawalsQueued[staker]++;\n\n    Withdrawal memory withdrawal = Withdrawal({\n      staker: staker,\n      delegatedTo: operator,\n      withdrawer: withdrawer,\n      nonce: nonce,\n      startTimestamp: uint32(block.timestamp),\n      pools: pools,\n      shares: shares\n    });\n\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    // Place withdrawal in queue\n    pendingWithdrawals[withdrawalRoot] = true;\n\n    emit WithdrawalQueued(withdrawalRoot, withdrawal);\n    return withdrawalRoot;\n  }\n\n  /**\n   * @notice Withdraws `shares` in `pool` to `withdrawer`. Call is ultimately forwarded to the `pool` with info on the `token`.\n   */\n  function _withdrawSharesAsTokens(address staker, address withdrawer, IPool pool, uint256 shares, IERC20 token) internal {\n    poolController.withdrawSharesAsTokens(withdrawer, pool, shares, token);\n  }\n\n  function _setMinWithdrawalDelay(uint256 _minWithdrawalDelay) internal {\n    require(_minWithdrawalDelay <= MAX_WITHDRAWAL_DELAY, Errors.MIN_WITHDRAWAL_DELAY_EXCEEDS_MAX);\n    emit MinWithdrawalDelaySet(minWithdrawalDelay, _minWithdrawalDelay);\n    minWithdrawalDelay = _minWithdrawalDelay;\n  }\n\n  /**\n   * @notice Sets the withdrawal delay for each pool in `_pools` to `_withdrawalDelay`.\n   * gets called when initializing contract or by calling `setPoolWithdrawalDelay`\n   */\n  function _setPoolWithdrawalDelay(IPool[] calldata _pools, uint256[] calldata _withdrawalDelay) internal {\n    require(_pools.length == _withdrawalDelay.length, Errors.INPUT_LENGTH_MISMATCH);\n    uint256 numStrats = _pools.length;\n    for (uint256 i = 0; i < numStrats; ++i) {\n      IPool pool = _pools[i];\n      uint256 prevPoolWithdrawalDelay = poolWithdrawalDelay[pool];\n      uint256 newPoolWithdrawalDelay = _withdrawalDelay[i];\n      require(newPoolWithdrawalDelay <= MAX_WITHDRAWAL_DELAY, Errors.POOL_WITHDRAWAL_DELAY_EXCEEDS_MAX);\n\n      // set the new withdrawal delay\n      poolWithdrawalDelay[pool] = newPoolWithdrawalDelay;\n      emit PoolWithdrawalDelaySet(pool, prevPoolWithdrawalDelay, newPoolWithdrawalDelay);\n    }\n  }\n\n  /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  /**\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n   */\n  function isDelegated(address staker) public view returns (bool) {\n    return (delegatedTo[staker] != address(0));\n  }\n\n  /**\n   * @notice Returns true is an operator has previously registered for delegation.\n   */\n  function isOperator(address operator) public view returns (bool) {\n    return delegatedTo[operator] == operator;\n  }\n\n  /**\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\n   */\n  function operatorDetails(address operator) external view returns (OperatorDetails memory) {\n    return _operatorDetails[operator];\n  }\n\n  /**\n   * @notice Returns the delegationApprover account for an operator\n   */\n  function delegationApprover(address operator) external view returns (address) {\n    return _operatorDetails[operator].delegationApprover;\n  }\n\n  /**\n   * @notice Returns the stakerOptOutWindow for an operator\n   */\n  function stakerOptOutWindow(address operator) external view returns (uint256) {\n    return _operatorDetails[operator].stakerOptOutWindow;\n  }\n\n  /// @notice Given array of pools, returns array of shares for the operator\n  function getOperatorShares(address operator, IPool[] memory pools) public view returns (uint256[] memory) {\n    uint256[] memory shares = new uint256[](pools.length);\n    for (uint256 i = 0; i < pools.length; ++i) {\n      shares[i] = operatorShares[operator][pools[i]];\n    }\n    return shares;\n  }\n\n  /**\n   * @notice Returns the number of actively-delegatable shares a staker has across all pools.\n   * @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\n   */\n  function getDelegatableShares(address staker) public view returns (IPool[] memory, uint256[] memory) {\n    // Get currently active shares and pools for `staker`\n    (IPool[] memory poolControllerStrats, uint256[] memory poolControllerShares) = poolController.getDeposits(staker);\n    return (poolControllerStrats, poolControllerShares);\n  }\n\n  /**\n   * @notice Given a list of pools, return the minimum cooldown that must pass to withdraw\n   * from all the inputted pools. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\n   * @param pools The pools to check withdrawal delays for\n   */\n  function getWithdrawalDelay(IPool[] calldata pools) public view returns (uint256) {\n    uint256 withdrawalDelay = minWithdrawalDelay;\n    for (uint256 i = 0; i < pools.length; ++i) {\n      uint256 currWithdrawalDelay = poolWithdrawalDelay[pools[i]];\n      if (currWithdrawalDelay > withdrawalDelay) {\n        withdrawalDelay = currWithdrawalDelay;\n      }\n    }\n    return withdrawalDelay;\n  }\n\n  /// @notice Returns the keccak256 hash of `withdrawal`.\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) public pure returns (bytes32) {\n    return keccak256(abi.encode(withdrawal));\n  }\n\n  /**\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n   * @param staker The signing staker\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32) {\n    // fetch the staker's current nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    // calculate the digest hash\n    return calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, expiry);\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n   * @param staker The signing staker\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateStakerDelegationDigestHash(\n    address staker,\n    uint256 _stakerNonce,\n    address operator,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 stakerStructHash = keccak256(abi.encode(STAKER_DELEGATION_TYPEHASH, staker, operator, _stakerNonce, expiry));\n    // calculate the digest hash\n    bytes32 stakerDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), stakerStructHash));\n    return stakerDigestHash;\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n   * @param staker The account delegating their stake\n   * @param operator The account receiving delegated stake\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n   * @param approverSalt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateDelegationApprovalDigestHash(\n    address staker,\n    address operator,\n    address _delegationApprover,\n    bytes32 approverSalt,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 approverStructHash = keccak256(\n      abi.encode(DELEGATION_APPROVAL_TYPEHASH, _delegationApprover, staker, operator, approverSalt, expiry)\n    );\n    // calculate the digest hash\n    bytes32 approverDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), approverStructHash));\n    return approverDigestHash;\n  }\n\n  /**\n   * @dev Recalculates the domain separator when the chainid changes due to a fork.\n   */\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('BinLayer')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/DelegationControllerStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IPoolController.sol';\nimport '../interfaces/IDelegationController.sol';\nimport '../interfaces/ISlasher.sol';\n\n/**\n * @title Storage variables for the `DelegationController.sol` contract.\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\n */\nabstract contract DelegationControllerStorage is IDelegationController {\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n\n  /// @notice The EIP-712 typehash for the `StakerDelegation` struct used by the contract\n  bytes32 public constant STAKER_DELEGATION_TYPEHASH =\n    keccak256('StakerDelegation(address staker,address operator,uint256 nonce,uint256 expiry)');\n\n  /// @notice The EIP-712 typehash for the `DelegationApproval` struct used by the contract\n  bytes32 public constant DELEGATION_APPROVAL_TYPEHASH =\n    keccak256('DelegationApproval(address delegationApprover,address staker,address operator,bytes32 salt,uint256 expiry)');\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n\n  /// @notice The PoolController.sol contract for BinLayer\n  IPoolController public immutable poolController;\n\n  /// @notice The Slasher contract for BinLayer\n  ISlasher public immutable slasher;\n\n  // 30 days (60 * 60 * 24 * 30 = 2,592,000)\n  uint256 public constant MAX_WITHDRAWAL_DELAY = 2592000;\n\n  /**\n   * @notice returns the total number of shares in `pool` that are delegated to `operator`.\n   * @notice Mapping: operator => pool => total number of shares in the pool delegated to the operator.\n   * @dev By design, the following invariant should hold for each Pool:\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n   * = sum (delegateable shares of all stakers delegated to the operator)\n   */\n  mapping(address => mapping(IPool => uint256)) public operatorShares;\n\n  /**\n   * @notice Mapping: operator => OperatorDetails struct\n   * @dev This struct is internal with an external getter so we can return an `OperatorDetails memory` object\n   */\n  mapping(address => OperatorDetails) internal _operatorDetails;\n\n  /**\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n   */\n  mapping(address => address) public delegatedTo;\n\n  /// @notice Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked.\n  mapping(address => uint256) public stakerNonce;\n\n  /**\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n   */\n  mapping(address => mapping(bytes32 => bool)) public delegationApproverSaltIsSpent;\n\n  /**\n   * @notice Global minimum withdrawal delay for all pool withdrawals.\n   * In a prior Goerli release, we only had a global min withdrawal delay across all strategies.\n   * In addition, we now also configure withdrawal delays on a per-pool basis.\n   * To withdraw from a pool, max(minWithdrawalDelay, poolWithdrawalDelay[pool]) number of timestamp must have passed.\n   * See mapping poolWithdrawalDelay below for per-pool withdrawal delays.\n   */\n  uint256 public minWithdrawalDelay;\n\n  /// @notice Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending\n  mapping(bytes32 => bool) public pendingWithdrawals;\n\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n  mapping(address => uint256) public cumulativeWithdrawalsQueued;\n\n  /**\n   * @notice Minimum delay enforced by this contract per Pool for completing queued withdrawals. Measured in timestamp, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   */\n  mapping(IPool => uint256) public poolWithdrawalDelay;\n\n  /// @notice Wrapped token gateway\n  address public wrappedTokenGateway;\n\n  constructor(IPoolController _poolController, ISlasher _slasher) {\n    poolController = _poolController;\n    slasher = _slasher;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/core/PoolController.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\nimport '@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol';\nimport '@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../permissions/Pausable.sol';\nimport './PoolControllerStorage.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport '../helpers/Errors.sol';\n\n/**\n * @title The primary entry- and exit-point for funds into and out of BinLayer.\n *\n * @notice This contract is for managing deposits in different pools. The main\n * functionalities are:\n * - adding and removing pools that any delegator can deposit into\n * - enabling deposit of assets into specified pool(s)\n */\ncontract PoolController is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, Pausable, PoolControllerStorage {\n  using SafeERC20 for IERC20;\n\n  // index for flag that pauses deposits when set\n  uint8 internal constant PAUSED_DEPOSITS = 0;\n\n  // chain id at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  modifier onlyPoolWhitelister() {\n    require(msg.sender == poolWhitelister, Errors.NOT_POOL_WHITELISTER);\n    _;\n  }\n\n  modifier onlyPoolsWhitelistedForDeposit(IPool pool) {\n    require(poolIsWhitelistedForDeposit[pool], Errors.POOL_NOT_WHITELISTED);\n    _;\n  }\n\n  modifier onlyDelegationController() {\n    require(msg.sender == address(delegation), Errors.NOT_DELEGATION_CONTROLLER);\n    _;\n  }\n\n  /**\n   * @param _delegation The delegation contract of BinLayer.\n   * @param _slasher The primary slashing contract of BinLayer.\n   */\n  constructor(IDelegationController _delegation, ISlasher _slasher) PoolControllerStorage(_delegation, _slasher) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  // EXTERNAL FUNCTIONS\n\n  /**\n   * @notice Initializes the pool controller contract. Sets the `pauserRegistry` (currently **not** modifiable after being set),\n   * and transfers contract ownership to the specified `initialOwner`.\n   * @param _pauserRegistry Used for access control of pausing.\n   * @param initialOwner Ownership of this contract is transferred to this address.\n   * @param initialPoolWhitelister The initial value of `poolWhitelister` to set.\n   * @param  initialPausedStatus The initial value of `_paused` to set.\n   */\n  function initialize(\n    address initialOwner,\n    address initialPoolWhitelister,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus\n  ) external initializer {\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    __ReentrancyGuard_init();\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _transferOwnership(initialOwner);\n    _setPoolWhitelister(initialPoolWhitelister);\n  }\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `msg.sender`\n   * @param pool is the specified pool where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the pool by the staker\n   * @return shares The amount of new shares in the `pool` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\n   */\n  function depositIntoPool(\n    IPool pool,\n    IERC20 token,\n    uint256 amount\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    shares = _depositIntoPool(msg.sender, pool, token, amount);\n  }\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `staker`\n   * @param staker Staker address\n   * @param pool is the specified pool where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the pool by the staker\n   * @return shares The amount of new shares in the `pool` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\n   */\n  function depositIntoPoolWithStaker(\n    address staker,\n    IPool pool,\n    IERC20 token,\n    uint256 amount\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    if (staker != msg.sender) {\n      require(!thirdPartyTransfersForbidden[pool], Errors.THIRD_PARTY_TRANSFERS_DISABLED);\n    }\n    shares = _depositIntoPool(staker, pool, token, amount);\n  }\n\n  /**\n   * @notice Used for depositing an asset into the specified pool with the resultant shares credited to `staker`,\n   * who must sign off on the action.\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\n   * purely to help one address deposit 'for' another.\n   * @param pool is the specified pool where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the pool by the staker\n   * @param staker the staker that the deposited assets will be credited to\n   * @param expiry the timestamp at which the signature expires\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\n   * following EIP-1271 if the `staker` is a contract\n   * @return shares The amount of new shares in the `pool` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\n   * targeting stakers who may be attempting to undelegate.\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this pool\n   *\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy\n   */\n  function depositIntoPoolWithSignature(\n    IPool pool,\n    IERC20 token,\n    uint256 amount,\n    address staker,\n    uint256 expiry,\n    bytes memory signature\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    require(!thirdPartyTransfersForbidden[pool], Errors.THIRD_PARTY_TRANSFERS_DISABLED);\n    require(expiry >= block.timestamp, Errors.SIGNATURE_EXPIRED);\n    // calculate struct hash, then increment `staker`'s nonce\n    uint256 nonce = nonces[staker];\n    bytes32 structHash = keccak256(abi.encode(DEPOSIT_TYPEHASH, staker, pool, token, amount, nonce, expiry));\n    unchecked {\n      nonces[staker] = nonce + 1;\n    }\n\n    // calculate the digest hash\n    bytes32 digestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), structHash));\n\n    /**\n     * check validity of signature:\n     * 1) if `staker` is an EOA, then `signature` must be a valid ECDSA signature from `staker`,\n     * indicating their intention for this action\n     * 2) if `staker` is a contract, then `signature` will be checked according to EIP-1271\n     */\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, digestHash, signature);\n\n    // deposit the tokens (from the `msg.sender`) and credit the new shares to the `staker`\n    shares = _depositIntoPool(staker, pool, token, amount);\n  }\n\n  /// @notice Used by the DelegationController.sol to remove a Staker's shares from a particular pool when entering the withdrawal queue\n  function removeShares(address staker, IPool pool, uint256 shares) external onlyDelegationController {\n    _removeShares(staker, pool, shares);\n  }\n\n  /// @notice Used by the DelegationController.sol to award a Staker some shares that have passed through the withdrawal queue\n  function addShares(address staker, IERC20 token, IPool pool, uint256 shares) external onlyDelegationController {\n    _addShares(staker, token, pool, shares);\n  }\n\n  /// @notice Used by the DelegationController.sol to convert withdrawn shares to tokens and send them to a recipient\n  function withdrawSharesAsTokens(address recipient, IPool pool, uint256 shares, IERC20 token) external onlyDelegationController {\n    pool.withdraw(recipient, token, shares);\n  }\n\n  /**\n   * If true for a pool, a user cannot depositIntoPoolWithSignature into that pool for another staker\n   * and also when performing DelegationController.sol.queueWithdrawals, a staker can only withdraw to themselves.\n   * Defaulted to false for all existing pools.\n   * @param pool The pool to set `thirdPartyTransfersForbidden` value to\n   * @param value bool value to set `thirdPartyTransfersForbidden` to\n   */\n  function setThirdPartyTransfersForbidden(IPool pool, bool value) external onlyPoolWhitelister {\n    _setThirdPartyTransfersForbidden(pool, value);\n  }\n\n  /**\n   * @notice Owner-only function to change the `poolWhitelister` address.\n   * @param newPoolWhitelister new address for the `poolWhitelister`.\n   */\n  function setPoolWhitelister(address newPoolWhitelister) external onlyOwner {\n    _setPoolWhitelister(newPoolWhitelister);\n  }\n\n  /**\n   * @notice Owner-only function that adds the provided Pools to the 'whitelist' of pools that stakers can deposit into\n   * @param poolsToWhitelist Pools that will be added to the `poolIsWhitelistedForDeposit` mapping (if they aren't in it already)\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each pool\n   */\n  function addPoolsToDepositWhitelist(\n    IPool[] calldata poolsToWhitelist,\n    bool[] calldata thirdPartyTransfersForbiddenValues\n  ) external onlyPoolWhitelister {\n    require(poolsToWhitelist.length == thirdPartyTransfersForbiddenValues.length, Errors.ARRAY_LENGTH_MISMATCH);\n    uint256 poolsToWhitelistLength = poolsToWhitelist.length;\n    for (uint256 i = 0; i < poolsToWhitelistLength; ) {\n      // change storage and emit event only if pool is not already in whitelist\n      if (!poolIsWhitelistedForDeposit[poolsToWhitelist[i]]) {\n        poolIsWhitelistedForDeposit[poolsToWhitelist[i]] = true;\n        emit PoolAddedToDepositWhitelist(poolsToWhitelist[i]);\n        _setThirdPartyTransfersForbidden(poolsToWhitelist[i], thirdPartyTransfersForbiddenValues[i]);\n      }\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice Owner-only function that removes the provided Pools from the 'whitelist' of pools that stakers can deposit into\n   * @param poolsToRemoveFromWhitelist Pools that will be removed to the `poolIsWhitelistedForDeposit` mapping (if they are in it)\n   */\n  function removePoolsFromDepositWhitelist(IPool[] calldata poolsToRemoveFromWhitelist) external onlyPoolWhitelister {\n    uint256 poolsToRemoveFromWhitelistLength = poolsToRemoveFromWhitelist.length;\n    for (uint256 i = 0; i < poolsToRemoveFromWhitelistLength; ) {\n      // change storage and emit event only if pool is already in whitelist\n      if (poolIsWhitelistedForDeposit[poolsToRemoveFromWhitelist[i]]) {\n        poolIsWhitelistedForDeposit[poolsToRemoveFromWhitelist[i]] = false;\n        emit PoolRemovedFromDepositWhitelist(poolsToRemoveFromWhitelist[i]);\n        // Set mapping value to default false value\n        _setThirdPartyTransfersForbidden(poolsToRemoveFromWhitelist[i], false);\n      }\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  // INTERNAL FUNCTIONS\n\n  /**\n   * @notice This function adds `shares` for a given `pool` to the `staker` and runs through the necessary update logic.\n   * @param staker The address to add shares to\n   * @param token The token that is being deposited (used for indexing)\n   * @param pool The Pool in which the `staker` is receiving shares\n   * @param shares The amount of shares to grant to the `staker`\n   * @dev In particular, this function calls `delegation.increaseDelegatedShares(staker, pool, shares)` to ensure that all\n   * delegated shares are tracked, increases the stored share amount in `stakerPoolShares[staker][pool]`, and adds `pool`\n   * to the `staker`'s list of pools, if it is not in the list already.\n   */\n  function _addShares(address staker, IERC20 token, IPool pool, uint256 shares) internal {\n    // sanity checks on inputs\n    require(staker != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n    require(shares != 0, Errors.ZERO_SHARES_NOT_VALID);\n\n    // if they dont have existing shares of this pool, add it to their strats\n    if (stakerPoolShares[staker][pool] == 0) {\n      require(stakerPoolList[staker].length < MAX_STAKER_POOL_LIST_LENGTH, Errors.DEPOSIT_EXCEEDS_MAX_LENGTH);\n      stakerPoolList[staker].push(pool);\n    }\n\n    // add the returned shares to their existing shares for this pool\n    stakerPoolShares[staker][pool] += shares;\n\n    emit Deposit(staker, token, pool, shares);\n  }\n\n  /**\n   * @notice Internal function in which `amount` of ERC20 `token` is transferred from `msg.sender` to the Pool-type contract\n   * `pool`, with the resulting shares credited to `staker`.\n   * @param staker The address that will be credited with the new shares.\n   * @param pool The Pool contract to deposit into.\n   * @param token The ERC20 token to deposit.\n   * @param amount The amount of `token` to deposit.\n   * @return shares The amount of *new* shares in `pool` that have been credited to the `staker`.\n   */\n  function _depositIntoPool(\n    address staker,\n    IPool pool,\n    IERC20 token,\n    uint256 amount\n  ) internal onlyPoolsWhitelistedForDeposit(pool) returns (uint256 shares) {\n    // transfer tokens from the sender to the pool\n    token.safeTransferFrom(msg.sender, address(pool), amount);\n\n    // deposit the assets into the specified pool and get the equivalent amount of shares in that pool\n    shares = pool.deposit(token, amount);\n\n    // add the returned shares to the staker's existing shares for this pool\n    _addShares(staker, token, pool, shares);\n\n    // Increase shares delegated to operator, if needed\n    delegation.increaseDelegatedShares(staker, pool, shares);\n\n    return shares;\n  }\n\n  /**\n   * @notice Decreases the shares that `staker` holds in `pool` by `shareAmount`.\n   * @param staker The address to decrement shares from\n   * @param pool The pool for which the `staker`'s shares are being decremented\n   * @param shareAmount The amount of shares to decrement\n   * @dev If the amount of shares represents all of the staker`s shares in said pool,\n   * then the pool is removed from stakerPoolList[staker] and 'true' is returned. Otherwise 'false' is returned.\n   */\n  function _removeShares(address staker, IPool pool, uint256 shareAmount) internal returns (bool) {\n    // sanity checks on inputs\n    require(shareAmount != 0, Errors.ZERO_SHARES_NOT_VALID);\n\n    //check that the user has sufficient shares\n    uint256 userShares = stakerPoolShares[staker][pool];\n\n    require(shareAmount <= userShares, Errors.SHARE_AMOUNT_TOO_HIGH);\n    //unchecked arithmetic since we just checked this above\n    unchecked {\n      userShares = userShares - shareAmount;\n    }\n\n    // subtract the shares from the staker's existing shares for this pool\n    stakerPoolShares[staker][pool] = userShares;\n\n    // if no existing shares, remove the pool from the staker's dynamic array of pools\n    if (userShares == 0) {\n      _removePoolFromStakerPoolList(staker, pool);\n\n      // return true in the event that the pool was removed from stakerPoolList[staker]\n      return true;\n    }\n    // return false in the event that the pool was *not* removed from stakerPoolList[staker]\n    return false;\n  }\n\n  /**\n   * @notice Removes `pool` from `staker`'s dynamic array of pools, i.e. from `stakerPoolList[staker]`\n   * @param staker The user whose array will have an entry removed\n   * @param pool The Pool to remove from `stakerPoolList[staker]`\n   */\n  function _removePoolFromStakerPoolList(address staker, IPool pool) internal {\n    //loop through all of the pools, find the right one, then replace\n    uint256 stratsLength = stakerPoolList[staker].length;\n    uint256 j = 0;\n    for (; j < stratsLength; ) {\n      if (stakerPoolList[staker][j] == pool) {\n        //replace the pool with the last pool in the list\n        stakerPoolList[staker][j] = stakerPoolList[staker][stakerPoolList[staker].length - 1];\n        break;\n      }\n      unchecked {\n        ++j;\n      }\n    }\n    // if we didn't find the pool, revert\n    require(j != stratsLength, Errors.POOL_NOT_FOUND);\n    // pop off the last entry in the list of pools\n    stakerPoolList[staker].pop();\n  }\n\n  /**\n   * @notice Internal function for modifying `thirdPartyTransfersForbidden`.\n   * Used inside of the `setThirdPartyTransfersForbidden` and `addPoolsToDepositWhitelist` functions.\n   * @param pool The pool to set `thirdPartyTransfersForbidden` value to\n   * @param value bool value to set `thirdPartyTransfersForbidden` to\n   */\n  function _setThirdPartyTransfersForbidden(IPool pool, bool value) internal {\n    emit UpdatedThirdPartyTransfersForbidden(pool, value);\n    thirdPartyTransfersForbidden[pool] = value;\n  }\n\n  /**\n   * @notice Internal function for modifying the `poolWhitelister`. Used inside of the `setPoolWhitelister` and `initialize` functions.\n   * @param newPoolWhitelister The new address for the `poolWhitelister` to take.\n   */\n  function _setPoolWhitelister(address newPoolWhitelister) internal {\n    emit PoolWhitelisterChanged(poolWhitelister, newPoolWhitelister);\n    poolWhitelister = newPoolWhitelister;\n  }\n\n  // VIEW FUNCTIONS\n  /**\n   * @notice Get all details on the staker's deposits and corresponding shares\n   * @param staker The staker of interest, whose deposits this function will fetch\n   * @return (staker's pools, shares in these pools)\n   */\n  function getDeposits(address staker) external view returns (IPool[] memory, uint256[] memory) {\n    uint256 poolsLength = stakerPoolList[staker].length;\n    uint256[] memory shares = new uint256[](poolsLength);\n\n    for (uint256 i = 0; i < poolsLength; ) {\n      shares[i] = stakerPoolShares[staker][stakerPoolList[staker][i]];\n      unchecked {\n        ++i;\n      }\n    }\n    return (stakerPoolList[staker], shares);\n  }\n\n  /// @notice Simple getter function that returns `stakerPoolList[staker].length`.\n  function stakerPoolListLength(address staker) external view returns (uint256) {\n    return stakerPoolList[staker].length;\n  }\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  // @notice Internal function for calculating the current domain separator of this contract\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('BinLayer')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/PoolControllerStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IPoolController.sol';\nimport '../interfaces/IPool.sol';\nimport '../interfaces/IDelegationController.sol';\nimport '../interfaces/ISlasher.sol';\n\n/**\n * @title Storage variables for the `PoolController.sol` contract.\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\n */\nabstract contract PoolControllerStorage is IPoolController {\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n  /// @notice The EIP-712 typehash for the deposit struct used by the contract\n  bytes32 public constant DEPOSIT_TYPEHASH =\n    keccak256('Deposit(address staker,address pool,address token,uint256 amount,uint256 nonce,uint256 expiry)');\n  // maximum length of dynamic arrays in `stakerPoolList` mapping, for sanity's sake\n  uint8 internal constant MAX_STAKER_POOL_LIST_LENGTH = 32;\n\n  // system contracts\n  IDelegationController public immutable delegation;\n  ISlasher public immutable slasher;\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n  // staker => number of signed deposit nonce (used in depositIntoPoolWithSignature)\n  mapping(address => uint256) public nonces;\n  /// @notice Permissioned role, which can be changed by the contract owner. Has the ability to edit the pool whitelist\n  address public poolWhitelister;\n  /// @notice Mapping: staker => Pool => number of shares which they currently hold\n  mapping(address => mapping(IPool => uint256)) public stakerPoolShares;\n  /// @notice Mapping: staker => array of strategies in which they have nonzero shares\n  mapping(address => IPool[]) public stakerPoolList;\n  /// @notice Mapping: pool => whether or not stakers are allowed to deposit into it\n  mapping(IPool => bool) public poolIsWhitelistedForDeposit;\n\n  /**\n   * @notice Mapping: pool => whether or not stakers are allowed to transfer pool shares to another address\n   * if true for a pool, a user cannot depositIntoPoolWithSignature into that pool for another staker\n   * and also when performing queueWithdrawals, a staker can only withdraw to themselves\n   */\n  mapping(IPool => bool) public thirdPartyTransfersForbidden;\n\n  constructor(IDelegationController _delegation, ISlasher _slasher) {\n    delegation = _delegation;\n    slasher = _slasher;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/core/RewardsCoordinator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\nimport '@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol';\nimport '@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../libraries/Merkle.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport '../permissions/Pausable.sol';\nimport './RewardsCoordinatorStorage.sol';\nimport '../helpers/Errors.sol';\n\n/**\n * @title RewardsCoordinator\n * @notice  This is the contract for rewards in BinLayer. The main functionalities of this contract are\n * - enabling any ERC20 rewards from AVSs to their operators and stakers for a given time range\n * - allowing stakers and operators to claim their earnings including a commission bips for operators\n * - allowing the protocol to provide ERC20 tokens to stakers over a specified time range\n */\ncontract RewardsCoordinator is Initializable, OwnableUpgradeable, Pausable, ReentrancyGuardUpgradeable, RewardsCoordinatorStorage {\n  using SafeERC20 for IERC20;\n\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 internal constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n  /// @dev Chain ID at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n  /// @notice The maximum rewards token amount for a single rewards submission, constrained by off-chain calculation\n  uint256 internal constant MAX_REWARDS_AMOUNT = 1e38 - 1;\n\n  /// @dev Index for flag that pauses calling createAVSRewardsSubmission\n  uint8 internal constant PAUSED_AVS_REWARDS_SUBMISSION = 0;\n  /// @dev Index for flag that pauses calling createRewardsForAllSubmission\n  uint8 internal constant PAUSED_REWARDS_FOR_ALL_SUBMISSION = 1;\n  /// @dev Index for flag that pauses calling processClaim\n  uint8 internal constant PAUSED_PROCESS_CLAIM = 2;\n  /// @dev Index for flag that pauses submitRoots and disableRoot\n  uint8 internal constant PAUSED_SUBMIT_DISABLE_ROOTS = 3;\n\n  /// @dev Salt for the earner leaf, meant to distinguish from tokenLeaf since they have the same sized data\n  uint8 internal constant EARNER_LEAF_SALT = 0;\n  /// @dev Salt for the token leaf, meant to distinguish from earnerLeaf since they have the same sized data\n  uint8 internal constant TOKEN_LEAF_SALT = 1;\n\n  modifier onlyRewardsUpdater() {\n    require(msg.sender == rewardsUpdater, Errors.NOT_REWARDS_UPDATER);\n    _;\n  }\n\n  modifier onlyRewardsForAllSubmitter() {\n    require(isRewardsForAllSubmitter[msg.sender], Errors.NOT_CREATE_REWARDS_FOR_ALL_SUBMITTER);\n    _;\n  }\n\n  /// @dev Sets the immutable variables for the contract\n  constructor(\n    IDelegationController _delegationController,\n    IPoolController _poolController,\n    uint32 _CALCULATION_INTERVAL_SECONDS,\n    uint32 _MAX_REWARDS_DURATION,\n    uint32 _MAX_RETROACTIVE_LENGTH,\n    uint32 _MAX_FUTURE_LENGTH,\n    uint32 __GENESIS_REWARDS_TIMESTAMP\n  )\n    RewardsCoordinatorStorage(\n      _delegationController,\n      _poolController,\n      _CALCULATION_INTERVAL_SECONDS,\n      _MAX_REWARDS_DURATION,\n      _MAX_RETROACTIVE_LENGTH,\n      _MAX_FUTURE_LENGTH,\n      __GENESIS_REWARDS_TIMESTAMP\n    )\n  {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  /**\n   * @dev Initializes the addresses of the initial owner, pauser registry, rewardsUpdater and\n   * configures the initial paused status, activationDelay, and globalOperatorCommissionBips.\n   */\n  function initialize(\n    address initialOwner,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus,\n    address _rewardsUpdater,\n    uint32 _activationDelay,\n    uint16 _globalCommissionBips\n  ) external initializer {\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _transferOwnership(initialOwner);\n    _setRewardsUpdater(_rewardsUpdater);\n    _setActivationDelay(_activationDelay);\n    _setGlobalOperatorCommission(_globalCommissionBips);\n  }\n\n  /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n  /**\n   * @notice Creates a new rewards submission on behalf of an AVS, to be split amongst the\n   * set of stakers delegated to operators who are registered to the `avs`\n   * @param rewardsSubmissions The rewards submissions being created\n   * @dev Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being made\n   * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n   * @dev The tokens are sent to the `RewardsCoordinator` contract\n   * @dev pools must be in ascending order of addresses to check for duplicates\n   * @dev This function will revert if the `rewardsSubmission` is malformed,\n   * e.g. if the `pools` and `weights` arrays are of non-equal lengths\n   */\n  function createAVSRewardsSubmission(\n    RewardsSubmission[] calldata rewardsSubmissions\n  ) external onlyWhenNotPaused(PAUSED_AVS_REWARDS_SUBMISSION) nonReentrant {\n    for (uint256 i = 0; i < rewardsSubmissions.length; i++) {\n      RewardsSubmission calldata rewardsSubmission = rewardsSubmissions[i];\n      uint256 nonce = submissionNonce[msg.sender];\n      bytes32 rewardsSubmissionHash = keccak256(abi.encode(msg.sender, nonce, rewardsSubmission));\n\n      _validateRewardsSubmission(rewardsSubmission);\n\n      isAVSRewardsSubmissionHash[msg.sender][rewardsSubmissionHash] = true;\n      submissionNonce[msg.sender] = nonce + 1;\n\n      emit AVSRewardsSubmissionCreated(msg.sender, nonce, rewardsSubmissionHash, rewardsSubmission);\n      rewardsSubmission.token.safeTransferFrom(msg.sender, address(this), rewardsSubmission.amount);\n    }\n  }\n\n  /**\n   * @notice similar to `createAVSRewardsSubmission` except the rewards are split amongst *all* stakers\n   * rather than just those delegated to operators who are registered to a single avs and is\n   * a permissioned call based on isRewardsForAllSubmitter mapping.\n   * @param rewardsSubmissions The rewards submissions being created\n   */\n  function createRewardsForAllSubmission(\n    RewardsSubmission[] calldata rewardsSubmissions\n  ) external onlyWhenNotPaused(PAUSED_REWARDS_FOR_ALL_SUBMISSION) onlyRewardsForAllSubmitter nonReentrant {\n    for (uint256 i = 0; i < rewardsSubmissions.length; i++) {\n      RewardsSubmission calldata rewardsSubmission = rewardsSubmissions[i];\n      uint256 nonce = submissionNonce[msg.sender];\n      bytes32 rewardsSubmissionForAllHash = keccak256(abi.encode(msg.sender, nonce, rewardsSubmission));\n\n      _validateRewardsSubmission(rewardsSubmission);\n\n      isRewardsSubmissionForAllHash[msg.sender][rewardsSubmissionForAllHash] = true;\n      submissionNonce[msg.sender] = nonce + 1;\n\n      emit RewardsSubmissionForAllCreated(msg.sender, nonce, rewardsSubmissionForAllHash, rewardsSubmission);\n      rewardsSubmission.token.safeTransferFrom(msg.sender, address(this), rewardsSubmission.amount);\n    }\n  }\n\n  /**\n   * @notice Claim rewards against a given root (read from _distributionRoots[claim.rootIndex]).\n   * Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for,\n   * they can simply claim against the latest root and the contract will calculate the difference between\n   * their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\n   * @param claim The RewardsMerkleClaim to be processed.\n   * Contains the root index, earner, token leaves, and required proofs\n   * @param recipient The address recipient that receives the ERC20 rewards\n   * @dev only callable by the valid claimer, that is\n   * if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only\n   * claimerFor[claim.earner] can claim the rewards.\n   */\n  function processClaim(\n    RewardsMerkleClaim calldata claim,\n    address recipient\n  ) external onlyWhenNotPaused(PAUSED_PROCESS_CLAIM) nonReentrant {\n    DistributionRoot memory root = _distributionRoots[claim.rootIndex];\n    _checkClaim(claim, root);\n    // If claimerFor earner is not set, claimer is by default the earner. Else set to claimerFor\n    address earner = claim.earnerLeaf.earner;\n    address claimer = claimerFor[earner];\n    if (claimer == address(0)) {\n      claimer = earner;\n    }\n    require(msg.sender == claimer, Errors.NOT_CLAIMER);\n    for (uint256 i = 0; i < claim.tokenIndices.length; i++) {\n      TokenTreeMerkleLeaf calldata tokenLeaf = claim.tokenLeaves[i];\n\n      uint256 currCumulativeClaimed = cumulativeClaimed[earner][tokenLeaf.token];\n      require(tokenLeaf.cumulativeEarnings > currCumulativeClaimed, Errors.CUMULATIVE_EARNINGS_MUST_BE_GREATER_THAN_CUMULATIVE_LAIMED);\n\n      // Calculate amount to claim and update cumulativeClaimed\n      uint256 claimAmount = tokenLeaf.cumulativeEarnings - currCumulativeClaimed;\n      cumulativeClaimed[earner][tokenLeaf.token] = tokenLeaf.cumulativeEarnings;\n\n      tokenLeaf.token.safeTransfer(recipient, claimAmount);\n      emit RewardsClaimed(root.root, earner, claimer, recipient, tokenLeaf.token, claimAmount);\n    }\n  }\n\n  /**\n   * @notice Creates a new distribution root. activatedAt is set to block.timestamp + activationDelay\n   * @param root The merkle root of the distribution\n   * @param rewardsCalculationEndTimestamp The timestamp until which rewards have been calculated\n   * @dev Only callable by the rewardsUpdater\n   */\n  function submitRoot(\n    bytes32 root,\n    uint32 rewardsCalculationEndTimestamp\n  ) external onlyWhenNotPaused(PAUSED_SUBMIT_DISABLE_ROOTS) onlyRewardsUpdater {\n    require(rewardsCalculationEndTimestamp > currRewardsCalculationEndTimestamp, Errors.NEW_ROOT_MUST_BE_NEWER_CALCULATED_PERIOD);\n    require(rewardsCalculationEndTimestamp < block.timestamp, Errors.CANNOT_BE_IN_THE_FEATURE);\n    uint32 rootIndex = uint32(_distributionRoots.length);\n    uint32 activatedAt = uint32(block.timestamp) + activationDelay;\n    _distributionRoots.push(\n      DistributionRoot({\n        root: root,\n        activatedAt: activatedAt,\n        rewardsCalculationEndTimestamp: rewardsCalculationEndTimestamp,\n        disabled: false\n      })\n    );\n    currRewardsCalculationEndTimestamp = rewardsCalculationEndTimestamp;\n    emit DistributionRootSubmitted(rootIndex, root, rewardsCalculationEndTimestamp, activatedAt);\n  }\n\n  /**\n   * @notice allow the rewardsUpdater to disable/cancel a pending root submission in case of an error\n   * @param rootIndex The index of the root to be disabled\n   */\n  function disableRoot(uint32 rootIndex) external onlyWhenNotPaused(PAUSED_SUBMIT_DISABLE_ROOTS) onlyRewardsUpdater {\n    require(rootIndex < _distributionRoots.length, Errors.INVALID_ROOT_INDEX);\n    DistributionRoot storage root = _distributionRoots[rootIndex];\n    require(!root.disabled, Errors.ROOT_ALREADY_DISABLED);\n    require(block.timestamp < root.activatedAt, Errors.ROOT_ALREADY_ACTIVATED);\n    root.disabled = true;\n    emit DistributionRootDisabled(rootIndex);\n  }\n\n  /**\n   * @notice Sets the address of the entity that can call `processClaim` on behalf of the earner (msg.sender)\n   * @param claimer The address of the entity that can call `processClaim` on behalf of the earner\n   * @dev Only callable by the `earner`\n   */\n  function setClaimerFor(address claimer) external {\n    address earner = msg.sender;\n    address prevClaimer = claimerFor[earner];\n    claimerFor[earner] = claimer;\n    emit ClaimerForSet(earner, prevClaimer, claimer);\n  }\n\n  /**\n   * @notice Sets the delay in timestamp before a posted root can be claimed against\n   * @dev Only callable by the contract owner\n   * @param _activationDelay The new value for activationDelay\n   */\n  function setActivationDelay(uint32 _activationDelay) external onlyOwner {\n    _setActivationDelay(_activationDelay);\n  }\n\n  /**\n   * @notice Sets the global commission for all operators across all avss\n   * @dev Only callable by the contract owner\n   * @param _globalCommissionBips The commission for all operators across all avss\n   */\n  function setGlobalOperatorCommission(uint16 _globalCommissionBips) external onlyOwner {\n    _setGlobalOperatorCommission(_globalCommissionBips);\n  }\n\n  /**\n   * @notice Sets the permissioned `rewardsUpdater` address which can post new roots\n   * @dev Only callable by the contract owner\n   * @param _rewardsUpdater The address of the new rewardsUpdater\n   */\n  function setRewardsUpdater(address _rewardsUpdater) external onlyOwner {\n    _setRewardsUpdater(_rewardsUpdater);\n  }\n\n  /**\n   * @notice Sets the permissioned `rewardsForAllSubmitter` address which can submit createRewardsForAllSubmission\n   * @dev Only callable by the contract owner\n   * @param _submitter The address of the rewardsForAllSubmitter\n   * @param _newValue The new value for isRewardsForAllSubmitter\n   */\n  function setRewardsForAllSubmitter(address _submitter, bool _newValue) external onlyOwner {\n    bool prevValue = isRewardsForAllSubmitter[_submitter];\n    emit RewardsForAllSubmitterSet(_submitter, prevValue, _newValue);\n    isRewardsForAllSubmitter[_submitter] = _newValue;\n  }\n\n  /*******************************************************************************\n                            INTERNAL FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Validate a RewardsSubmission. Called from both `createAVSRewardsSubmission` and `createRewardsForAllSubmission`\n   */\n  function _validateRewardsSubmission(RewardsSubmission calldata rewardsSubmission) internal view {\n    require(rewardsSubmission.poolsAndMultipliers.length > 0, Errors.NO_POOLS_SET);\n    require(rewardsSubmission.amount > 0, Errors.AMOUNT_CANNOT_BE_ZERO);\n    require(rewardsSubmission.amount <= MAX_REWARDS_AMOUNT, Errors.AMOUNT_TOO_LARGE);\n    require(rewardsSubmission.duration <= MAX_REWARDS_DURATION, Errors.DURATION_EXCEEDS_MAX_REWARDS_DURATION);\n    require(\n      rewardsSubmission.duration % CALCULATION_INTERVAL_SECONDS == 0,\n      Errors.DURATION_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS\n    );\n    require(\n      rewardsSubmission.startTimestamp % CALCULATION_INTERVAL_SECONDS == 0,\n      Errors.STARTTIMESTAMP_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS\n    );\n    require(\n      block.timestamp - MAX_RETROACTIVE_LENGTH <= rewardsSubmission.startTimestamp &&\n        GENESIS_REWARDS_TIMESTAMP <= rewardsSubmission.startTimestamp,\n      Errors.STARTTIMESTAMP_TOO_FAR_IN_THE_PAST\n    );\n    require(rewardsSubmission.startTimestamp <= block.timestamp + MAX_FUTURE_LENGTH, Errors.STARTTIMESTAMP_TOO_FAR_IN_THE_FUTURE);\n\n    // Require rewardsSubmission is for whitelisted pool\n    address currAddress = address(0);\n    for (uint256 i = 0; i < rewardsSubmission.poolsAndMultipliers.length; ++i) {\n      IPool pool = rewardsSubmission.poolsAndMultipliers[i].pool;\n      require(poolController.poolIsWhitelistedForDeposit(pool), Errors.INVALID_POOL_CONSIDERED);\n      require(currAddress < address(pool), Errors.POOLS_MUST_BE_ASCENDING);\n      currAddress = address(pool);\n    }\n  }\n\n  function _checkClaim(RewardsMerkleClaim calldata claim, DistributionRoot memory root) internal view {\n    require(!root.disabled, Errors.ROOT_IS_DISABLED);\n    require(block.timestamp >= root.activatedAt, Errors.ROOT_NOT_ACTIVATED_YET);\n    require(claim.tokenIndices.length == claim.tokenTreeProofs.length, Errors.ARRAY_LENGTH_MISMATCH);\n    require(claim.tokenTreeProofs.length == claim.tokenLeaves.length, Errors.ARRAY_LENGTH_MISMATCH);\n\n    // Verify inclusion of earners leaf (earner, earnerTokenRoot) in the distribution root\n    _verifyEarnerClaimProof({\n      root: root.root,\n      earnerLeafIndex: claim.earnerIndex,\n      earnerProof: claim.earnerTreeProof,\n      earnerLeaf: claim.earnerLeaf\n    });\n    // For each of the tokenLeaf proofs, verify inclusion of token tree leaf again the earnerTokenRoot\n    for (uint256 i = 0; i < claim.tokenIndices.length; ++i) {\n      _verifyTokenClaimProof({\n        earnerTokenRoot: claim.earnerLeaf.earnerTokenRoot,\n        tokenLeafIndex: claim.tokenIndices[i],\n        tokenProof: claim.tokenTreeProofs[i],\n        tokenLeaf: claim.tokenLeaves[i]\n      });\n    }\n  }\n\n  /**\n   * @notice verify inclusion of the token claim proof in the earner token root hash (earnerTokenRoot).\n   * The token leaf comprises of the IERC20 token and cumulativeAmount of earnings.\n   * @param earnerTokenRoot root hash of the earner token subtree\n   * @param tokenLeafIndex index of the token leaf\n   * @param tokenProof proof of the token leaf in the earner token subtree\n   * @param tokenLeaf token leaf to be verified\n   */\n  function _verifyTokenClaimProof(\n    bytes32 earnerTokenRoot,\n    uint32 tokenLeafIndex,\n    bytes calldata tokenProof,\n    TokenTreeMerkleLeaf calldata tokenLeaf\n  ) internal pure {\n    // Validate index size so that there aren't multiple valid indices for the given proof\n    // index can't be greater than 2**(tokenProof/32)\n    require(tokenLeafIndex < (1 << (tokenProof.length / 32)), Errors.INVALID_TOKEN_LEAF_INDEX);\n\n    // Verify inclusion of token leaf\n    bytes32 tokenLeafHash = calculateTokenLeafHash(tokenLeaf);\n    require(\n      Merkle.verifyInclusionKeccak({root: earnerTokenRoot, index: tokenLeafIndex, proof: tokenProof, leaf: tokenLeafHash}),\n      Errors.INVALID_TOKEN_CLAIM_PROOF\n    );\n  }\n\n  /**\n   * @notice verify inclusion of earner claim proof in the distribution root. This verifies\n   * the inclusion of the earner and earnerTokenRoot hash in the tree. The token claims are proven separately\n   * against the earnerTokenRoot hash (see _verifyTokenClaimProof). The earner leaf comprises of (earner, earnerTokenRoot)\n   * @param root distribution root that should be read from storage\n   * @param earnerLeafIndex index of the earner leaf\n   * @param earnerProof proof of the earners account root in the merkle tree\n   * @param earnerLeaf leaf of earner merkle tree containing the earner address and earner's token root hash\n   */\n  function _verifyEarnerClaimProof(\n    bytes32 root,\n    uint32 earnerLeafIndex,\n    bytes calldata earnerProof,\n    EarnerTreeMerkleLeaf calldata earnerLeaf\n  ) internal pure {\n    // Validate index size so that there aren't multiple valid indices for the given proof\n    // index can't be greater than 2**(earnerProof/32)\n    require(earnerLeafIndex < (1 << (earnerProof.length / 32)), Errors.INVALID_EARNER_LEAF_INDEX);\n    // Verify inclusion of earner leaf\n    bytes32 earnerLeafHash = calculateEarnerLeafHash(earnerLeaf);\n    // forgefmt: disable-next-item\n    require(\n      Merkle.verifyInclusionKeccak({root: root, index: earnerLeafIndex, proof: earnerProof, leaf: earnerLeafHash}),\n      Errors.INVALID_EARNER_CLAIM_PROOF\n    );\n  }\n\n  function _setActivationDelay(uint32 _activationDelay) internal {\n    emit ActivationDelaySet(activationDelay, _activationDelay);\n    activationDelay = _activationDelay;\n  }\n\n  function _setGlobalOperatorCommission(uint16 _globalCommissionBips) internal {\n    emit GlobalCommissionBipsSet(globalOperatorCommissionBips, _globalCommissionBips);\n    globalOperatorCommissionBips = _globalCommissionBips;\n  }\n\n  function _setRewardsUpdater(address _rewardsUpdater) internal {\n    emit RewardsUpdaterSet(rewardsUpdater, _rewardsUpdater);\n    rewardsUpdater = _rewardsUpdater;\n  }\n\n  /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n  /// @notice return the hash of the earner's leaf\n  function calculateEarnerLeafHash(EarnerTreeMerkleLeaf calldata leaf) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(EARNER_LEAF_SALT, leaf.earner, leaf.earnerTokenRoot));\n  }\n\n  /// @notice returns the hash of the earner's token leaf\n  function calculateTokenLeafHash(TokenTreeMerkleLeaf calldata leaf) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(TOKEN_LEAF_SALT, leaf.token, leaf.cumulativeEarnings));\n  }\n\n  /// @notice returns 'true' if the claim would currently pass the check in `processClaims`\n  /// but will revert if not valid\n  function checkClaim(RewardsMerkleClaim calldata claim) public view returns (bool) {\n    _checkClaim(claim, _distributionRoots[claim.rootIndex]);\n    return true;\n  }\n\n  /// @notice the commission for a specific operator for a specific avs\n  /// NOTE: Currently unused and simply returns the globalOperatorCommissionBips value but will be used in future release\n  function operatorCommissionBips(address operator, address avs) external view returns (uint16) {\n    return globalOperatorCommissionBips;\n  }\n\n  function getDistributionRootsLength() public view returns (uint256) {\n    return _distributionRoots.length;\n  }\n\n  function getDistributionRootAtIndex(uint256 index) external view returns (DistributionRoot memory) {\n    return _distributionRoots[index];\n  }\n\n  /// @notice loop through the distribution roots from reverse and get latest root that is not disabled\n  function getCurrentDistributionRoot() external view returns (DistributionRoot memory) {\n    return _distributionRoots[_distributionRoots.length - 1];\n  }\n\n  /// @notice loop through the distribution roots from reverse and get latest root that is not disabled and activated\n  /// i.e. a root that can be claimed against\n  function getCurrentClaimableDistributionRoot() external view returns (DistributionRoot memory) {\n    for (uint256 i = _distributionRoots.length; i > 0; i--) {\n      DistributionRoot memory root = _distributionRoots[i - 1];\n      if (!root.disabled && block.timestamp >= root.activatedAt) {\n        return root;\n      }\n    }\n  }\n\n  /// @notice loop through distribution roots from reverse and return hash\n  function getRootIndexFromHash(bytes32 rootHash) public view returns (uint32) {\n    for (uint32 i = uint32(_distributionRoots.length); i > 0; i--) {\n      if (_distributionRoots[i - 1].root == rootHash) {\n        return i - 1;\n      }\n    }\n    revert(Errors.ROOT_NOT_FOUND);\n  }\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  /**\n   * @dev Recalculates the domain separator when the chainid changes due to a fork.\n   */\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('BinLayer')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/RewardsCoordinatorStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IAVSDirectory.sol';\nimport '../interfaces/IPoolController.sol';\nimport '../interfaces/IDelegationController.sol';\nimport '../interfaces/IRewardsCoordinator.sol';\n\n/**\n * @title Storage variables for the `RewardsCoordinator` contract.\n */\nabstract contract RewardsCoordinatorStorage is IRewardsCoordinator {\n  /**\n   *\n   *                            CONSTANTS AND IMMUTABLES\n   *\n   */\n\n  /// @notice The interval in seconds at which the calculation for rewards distribution is done.\n  /// @dev RewardsSubmission durations must be multiples of this interval. This is going to be configured to 1 week\n  uint32 public immutable CALCULATION_INTERVAL_SECONDS;\n  /// @notice The maximum amount of time (seconds) that a rewards submission can span over\n  uint32 public immutable MAX_REWARDS_DURATION;\n  /// @notice max amount of time (seconds) that a rewards submission can start in the past\n  uint32 public immutable MAX_RETROACTIVE_LENGTH;\n  /// @notice max amount of time (seconds) that a rewards submission can start in the future\n  uint32 public immutable MAX_FUTURE_LENGTH;\n  /// @notice absolute min timestamp (seconds) that a rewards submission can start at\n  uint32 public immutable GENESIS_REWARDS_TIMESTAMP;\n  /// @notice The cadence at which a snapshot is taken offchain for calculating rewards distributions\n  uint32 internal constant SNAPSHOT_CADENCE = 1 days;\n\n  /// @notice The DelegationController contract for BinLayer\n  IDelegationController public immutable delegationController;\n\n  /// @notice The PoolController contract for BinLayer\n  IPoolController public immutable poolController;\n\n  /**\n   *\n   *                                    STORAGE\n   *\n   */\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n\n  /**\n   * @notice List of roots submited by the rewardsUpdater\n   * @dev Array is internal with an external getter so we can return a `DistributionRoot[] memory` object\n   */\n  DistributionRoot[] internal _distributionRoots;\n\n  /// Slot 3\n  /// @notice The address of the entity that can update the contract with new merkle roots\n  address public rewardsUpdater;\n  /// @notice Delay in timestamp (seconds) before a posted root can be claimed against\n  uint32 public activationDelay;\n  /// @notice Timestamp for last submitted DistributionRoot\n  uint32 public currRewardsCalculationEndTimestamp;\n\n  /// Slot 4\n  /// @notice the commission for all operators across all avss\n  uint16 public globalOperatorCommissionBips;\n\n  /// @notice Mapping: earner => the address of the entity who can call `processClaim` on behalf of the earner\n  mapping(address => address) public claimerFor;\n\n  /// @notice Mapping: earner => token => total amount claimed\n  mapping(address => mapping(IERC20 => uint256)) public cumulativeClaimed;\n\n  /// @notice Used for unique rewardsSubmissionHashes per AVS and for RewardsForAllSubmitters\n  mapping(address => uint256) public submissionNonce;\n  /// @notice Mapping: avs => avsRewardsSubmissionHash => bool to check if rewards submission hash has been submitted\n  mapping(address => mapping(bytes32 => bool)) public isAVSRewardsSubmissionHash;\n  /// @notice Mapping: avs => rewardsSubmissionForALlHash => bool to check if rewards submission hash for all has been submitted\n  mapping(address => mapping(bytes32 => bool)) public isRewardsSubmissionForAllHash;\n  /// @notice Mapping: address => bool to check if the address is permissioned to call createRewardsForAllSubmission\n  mapping(address => bool) public isRewardsForAllSubmitter;\n\n  constructor(\n    IDelegationController _delegationController,\n    IPoolController _poolController,\n    uint32 _CALCULATION_INTERVAL_SECONDS,\n    uint32 _MAX_REWARDS_DURATION,\n    uint32 _MAX_RETROACTIVE_LENGTH,\n    uint32 _MAX_FUTURE_LENGTH,\n    uint32 _GENESIS_REWARDS_TIMESTAMP\n  ) {\n    require(\n      _GENESIS_REWARDS_TIMESTAMP % _CALCULATION_INTERVAL_SECONDS == 0,\n      'RewardsCoordinator: GENESIS_REWARDS_TIMESTAMP must be a multiple of CALCULATION_INTERVAL_SECONDS'\n    );\n    require(\n      _CALCULATION_INTERVAL_SECONDS % SNAPSHOT_CADENCE == 0,\n      'RewardsCoordinator: CALCULATION_INTERVAL_SECONDS must be a multiple of SNAPSHOT_CADENCE'\n    );\n    delegationController = _delegationController;\n    poolController = _poolController;\n    CALCULATION_INTERVAL_SECONDS = _CALCULATION_INTERVAL_SECONDS;\n    MAX_REWARDS_DURATION = _MAX_REWARDS_DURATION;\n    MAX_RETROACTIVE_LENGTH = _MAX_RETROACTIVE_LENGTH;\n    MAX_FUTURE_LENGTH = _MAX_FUTURE_LENGTH;\n    GENESIS_REWARDS_TIMESTAMP = _GENESIS_REWARDS_TIMESTAMP;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/core/Slasher.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/ISlasher.sol';\nimport '../interfaces/IDelegationController.sol';\nimport '../interfaces/IPoolController.sol';\nimport '../libraries/StructuredLinkedList.sol';\nimport '../permissions/Pausable.sol';\nimport '@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol';\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\n\n/**\n * @notice This contract is not in use as of the BinLayer release.\n */\ncontract Slasher is Initializable, OwnableUpgradeable, ISlasher, Pausable {\n  constructor(IPoolController, IDelegationController) {}\n\n  function initialize(address, IPauserRegistry, uint256) external {}\n\n  function optIntoSlashing(address) external {}\n\n  function freezeOperator(address) external {}\n\n  function resetFrozenStatus(address[] calldata) external {}\n\n  function recordFirstStakeUpdate(address, uint32) external {}\n\n  function recordStakeUpdate(address, uint32, uint32, uint256) external {}\n\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address, uint32) external {}\n\n  function poolController() external view returns (IPoolController) {}\n\n  function delegation() external view returns (IDelegationController) {}\n\n  function isFrozen(address) external view returns (bool) {}\n\n  function canSlash(address, address) external view returns (bool) {}\n\n  function contractCanSlashOperatorUntilTimestamp(address, address) external view returns (uint32) {}\n\n  function latestUpdateTimestamp(address, address) external view returns (uint32) {}\n\n  function getCorrectValueForInsertAfter(address, uint32) external view returns (uint256) {}\n\n  function canWithdraw(address, uint32, uint256) external returns (bool) {}\n\n  function operatorToMiddlewareTimes(address, uint256) external view returns (MiddlewareTimes memory) {}\n\n  function middlewareTimesLength(address) external view returns (uint256) {}\n\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address, uint32) external view returns (uint32) {}\n\n  function getMiddlewareTimesIndexServeUntilTimestamp(address, uint32) external view returns (uint32) {}\n\n  function operatorWhitelistedContractsLinkedListSize(address) external view returns (uint256) {}\n\n  function operatorWhitelistedContractsLinkedListEntry(address, address) external view returns (bool, uint256, uint256) {}\n\n  function whitelistedContractDetails(address, address) external view returns (MiddlewareDetails memory) {}\n}\n"
    },
    "contracts/helpers/Errors.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @title Errors library\n * @notice Defines the error messages emitted by the different contracts of the BinLayer protocol\n */\nlibrary Errors {\n  string public constant NOT_PAUSER = '1'; // 'msg.sender is not permissioned as pauser'\n  string public constant NOT_UNPAUSER = '2'; // 'msg.sender is not permissioned as unpauser'\n  string public constant ZERO_ADDRESS_NOT_VALID = '3'; // 'zero address input'\n  string public constant CONTRACT_PAUSED = '4'; // 'contract is paused'\n  string public constant INDEX_PAUSED = '5'; // 'index is paused'\n  string public constant INITIALIZE_ONCE = '6'; // '_initializePauser can only be called once'\n  string public constant INVALID_UNPAUSE = '7'; // 'invalid attempt to unpause functionality'\n  string public constant INVALID_PAUSE = '8'; // 'invalid attempt to pause functionality'\n  string public constant NOT_POOL_WHITELISTER = '9'; // 'not the pool whitelister'\n  string public constant POOL_NOT_WHITELISTED = '10'; // 'pool not whitelisted'\n  string public constant NOT_DELEGATION_CONTROLLER = '11'; // 'not the DelegationController'\n  string public constant THIRD_PARTY_TRANSFERS_DISABLED = '12'; // 'third transfers disabled'\n  string public constant SIGNATURE_EXPIRED = '13'; // 'signature expired'\n  string public constant ARRAY_LENGTH_MISMATCH = '14'; // 'array lengths do not match'\n  string public constant ZERO_SHARES_NOT_VALID = '15'; // 'shares should not be zero!'\n  string public constant DEPOSIT_EXCEEDS_MAX_LENGTH = '16'; // 'deposit would exceed MAX_STAKER_POOL_LIST_LENGTH'\n  string public constant SHARE_AMOUNT_TOO_HIGH = '17'; // 'share amount too high'\n  string public constant POOL_NOT_FOUND = '18'; // 'pool not found'\n  string public constant ONLY_POOL_CONTROLLER = '19'; // 'caller must be PoolController'\n  string public constant OPERATOR_ALREADY_REGISTERED = '20'; // 'operator has already registered'\n  string public constant CALLER_NOT_OPERATOR = '21'; // 'caller must be an operator'\n  string public constant STAKER_MUST_BE_DELEGATED = '22'; // 'staker must be delegated to undelegate'\n  string public constant CANNOT_UNDELEGATE_OPERATOR = '23'; // 'operators cannot be undelegated'\n  string public constant CALLER_CANNOT_UNDELEGATE = '24'; // 'caller cannot undelegate staker'\n  string public constant INPUT_LENGTH_MISMATCH = '25'; // 'input length mismatch'\n  string public constant WITHDRAWER_NOT_STAKER_OR_GATEWAY = '26'; // 'withdrawer must be staker or wrapped token gateway'\n  string public constant OPT_OUT_WINDOW_EXCEEDS_MAX = '27'; // 'stakerOptOutWindow cannot be > MAX_STAKER_OPT_OUT_WINDOW'\n  string public constant DECREASE_OPT_OUT_WINDOW = '28'; // 'stakerOptOutWindow cannot be decreased'\n  string public constant ALREADY_DELEGATED = '29'; // 'staker is already actively delegated'\n  string public constant NOT_REGISTERED_IN_BINLAYER = '30'; // 'operator is not registered in BinLayer'\n  string public constant SALT_ALREADY_SPENT = '31'; // 'salt already spent'\n  string public constant ACTION_NOT_IN_QUEUE = '32'; // 'action is not in queue'\n  string public constant MIN_WITHDRAWAL_DELAY_NOT_PASSED = '33'; // 'minWithdrawalDelay period has not yet passed'\n  string public constant ONLY_WITHDRAWER_CAN_COMPLETE = '34'; // 'only withdrawer can complete action'\n  string public constant WITHDRAWAL_DELAY_NOT_PASSED = '35'; // 'withdrawalDelay period has not yet passed for this pool'\n  string public constant POOLS_CANNOT_BE_EMPTY = '36'; // 'pools cannot be empty'\n  string public constant THIRD_PARTY_TRANSFERS_FORBIDDEN = '37'; // 'withdrawer must be same address as staker if thirdPartyTransfersForbidden are set'\n  string public constant MIN_WITHDRAWAL_DELAY_EXCEEDS_MAX = '38'; // '_minWithdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n  string public constant POOL_WITHDRAWAL_DELAY_EXCEEDS_MAX = '39'; // '_withdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n  string public constant WITHDRAWER_MUST_BE_STAKER = '40'; // 'withdrawer must be staker'\n  string public constant ONLY_SUPPORT_WRAPPED_TOKEN_POOL = '41'; // 'only support wrapped token pool'\n  string public constant WITHDRAW_AMOUNT_SHARES_TOO_HIGH = '42'; // 'amountShares must be less than or equal to totalShares'\n  string public constant DEPOSIT_ONLY_UNDERLYING_TOKEN = '43'; // 'can only deposit underlying token'\n  string public constant WITHDRAW_ONLY_UNDERLYING_TOKEN = '44'; // 'can only withdraw underlying token'\n  string public constant MAX_DEPOSITS_EXCEEDED = '45'; // 'max deposits exceeded'\n  string public constant MAX_PER_DEPOSIT_LIMIT_EXCEEDED = '46'; // 'max per deposit exceeded'\n  string public constant MAX_PER_DEPOSIT_EXCEEDS_MAX_TOTAL = '47'; // 'maxPerDeposit exceeds maxTotalDeposits'\n  string public constant CANNOT_CANCEL_SPENT_SALT = '48'; // 'cannot cancel spent salt'\n  string public constant NOT_REWARDS_UPDATER = '49'; // 'caller is not the rewards updater'\n  string public constant NOT_CREATE_REWARDS_FOR_ALL_SUBMITTER = '50'; // 'caller is not a valid create rewards for all submission submitter'\n  string public constant NOT_CLAIMER = '51'; // 'caller is not valid claimer'\n  string public constant CUMULATIVE_EARNINGS_MUST_BE_GREATER_THAN_CUMULATIVE_LAIMED = '52'; // 'cumulative earnings must be gt than cumulative claimed'\n  string public constant NEW_ROOT_MUST_BE_NEWER_CALCULATED_PERIOD = '53'; // 'new root must be for newer calculated period'\n  string public constant CANNOT_BE_IN_THE_FEATURE = '54'; // 'rewardsCalculationEndTimestamp cannot be in the future'\n  string public constant INVALID_ROOT_INDEX = '55'; // 'invalid rootIndex'\n  string public constant ROOT_ALREADY_DISABLED = '56'; // 'root already disabled'\n  string public constant ROOT_ALREADY_ACTIVATED = '57'; // 'root already activated'\n  string public constant NO_POOLS_SET = '58'; // 'no pools set'\n  string public constant AMOUNT_CANNOT_BE_ZERO = '59'; // 'amount cannot be 0'\n  string public constant AMOUNT_TOO_LARGE = '60'; // 'amount too large'\n  string public constant DURATION_EXCEEDS_MAX_REWARDS_DURATION = '61'; // 'duration exceeds MAX_REWARDS_DURATION'\n  string public constant DURATION_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS = '62'; // 'duration must be a multiple of CALCULATION_INTERVAL_SECONDS'\n  string public constant STARTTIMESTAMP_MUST_BE_MULTIPLE_OF_CALCULATION_INTERVAL_SECONDS = '63'; // 'startTimestamp must be a multiple of CALCULATION_INTERVAL_SECONDS'\n  string public constant STARTTIMESTAMP_TOO_FAR_IN_THE_PAST = '64'; // 'startTimestamp too far in the past'\n  string public constant STARTTIMESTAMP_TOO_FAR_IN_THE_FUTURE = '65'; // 'startTimestamp too far in the future'\n  string public constant INVALID_POOL_CONSIDERED = '66'; // 'invalid pool considered'\n  string public constant POOLS_MUST_BE_ASCENDING = '67'; // 'pools must be in ascending order to handle duplicates'\n  string public constant ROOT_IS_DISABLED = '68'; // 'root is disabled'\n  string public constant ROOT_NOT_ACTIVATED_YET = '69'; // 'root not activated yet'\n  string public constant INVALID_TOKEN_LEAF_INDEX = '70'; // 'invalid token leaf index'\n  string public constant INVALID_TOKEN_CLAIM_PROOF = '71'; // 'invalid token claim proof'\n  string public constant INVALID_EARNER_LEAF_INDEX = '72'; // 'invalid earner leaf index'\n  string public constant INVALID_EARNER_CLAIM_PROOF = '73'; // 'invalid earner claim proof'\n  string public constant ROOT_NOT_FOUND = '74'; // 'root not found'\n}\n"
    },
    "contracts/interfaces/IAVSDirectory.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './ISignatureUtils.sol';\n\ninterface IAVSDirectory is ISignatureUtils {\n  /// @notice Enum representing the status of an operator's registration with an AVS\n  enum OperatorAVSRegistrationStatus {\n    UNREGISTERED, // Operator not registered to AVS\n    REGISTERED // Operator registered to AVS\n  }\n\n  /**\n   * @notice Emitted when @param avs indicates that they are updating their MetadataURI string\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n   */\n  event AVSMetadataURIUpdated(address indexed avs, string metadataURI);\n\n  /// @notice Emitted when an operator's registration status for an AVS is updated\n  event OperatorAVSRegistrationStatusUpdated(address indexed operator, address indexed avs, OperatorAVSRegistrationStatus status);\n\n  /**\n   * @notice Called by an avs to register an operator with the avs.\n   * @param operator The address of the operator to register.\n   * @param operatorSignature The signature, salt, and expiry of the operator's signature.\n   */\n  function registerOperatorToAVS(address operator, ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature) external;\n\n  /**\n   * @notice Called by an avs to deregister an operator with the avs.\n   * @param operator The address of the operator to deregister.\n   */\n  function deregisterOperatorFromAVS(address operator) external;\n\n  /**\n   * @notice Called by an AVS to emit an `AVSMetadataURIUpdated` event indicating the information has updated.\n   * @param metadataURI The URI for metadata associated with an AVS\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `AVSMetadataURIUpdated` event\n   */\n  function updateAVSMetadataURI(string calldata metadataURI) external;\n\n  /**\n   * @notice Returns whether or not the salt has already been used by the operator.\n   * @dev Salts is used in the `registerOperatorToAVS` function.\n   */\n  function operatorSaltIsSpent(address operator, bytes32 salt) external view returns (bool);\n\n  /**\n   * @notice Calculates the digest hash to be signed by an operator to register with an AVS\n   * @param operator The account registering as an operator\n   * @param avs The AVS the operator is registering to\n   * @param salt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateOperatorAVSRegistrationDigestHash(\n    address operator,\n    address avs,\n    bytes32 salt,\n    uint256 expiry\n  ) external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the Registration struct used by the contract\n  function OPERATOR_AVS_REGISTRATION_TYPEHASH() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IDelegationController.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IPool.sol';\nimport './ISignatureUtils.sol';\nimport './IPoolController.sol';\n\n/**\n * @title DelegationController\n * @notice  This is the contract for delegation in BinLayer. The main functionalities of this contract are\n * - enabling anyone to register as an operator in BinLayer\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the PoolController.sol)\n */\ninterface IDelegationController is ISignatureUtils {\n  // @notice Struct used for storing information about a single operator who has registered with BinLayer\n  struct OperatorDetails {\n    // @notice DEPRECATED -- this field is no longer used, rewards are handled in RewardsCoordinator.sol\n    address __deprecated_earningsReceiver;\n    /**\n     * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \"forced undelegations\".\n     * @dev Signature verification follows these rules:\n     * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\n     * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\n     * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \"magic value\".\n     */\n    address delegationApprover;\n    /**\n     * @notice A minimum delay -- enforced between:\n     * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\n     * and\n     * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\n     * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\n     * then they are only allowed to either increase this value or keep it the same.\n     */\n    uint32 stakerOptOutWindow;\n  }\n\n  /**\n   * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\n   * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\n   */\n  struct StakerDelegation {\n    // the staker who is delegating\n    address staker;\n    // the operator being delegated to\n    address operator;\n    // the staker's nonce\n    uint256 nonce;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  /**\n   * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\n   * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\n   */\n  struct DelegationApproval {\n    // the staker who is delegating\n    address staker;\n    // the operator being delegated to\n    address operator;\n    // the operator's provided salt\n    bytes32 salt;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  /**\n   * Struct type used to specify an withdraw. Rather than storing the entire struct, only a hash is stored.\n   * In functions that operate on existing queued withdrawals -- e.g. withdraw`, the data is resubmitted and the hash of the submitted\n   * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\n   */\n  struct Withdrawal {\n    // The address that originated the Withdrawal\n    address staker;\n    // The address that the staker was delegated to at the time that the Withdrawal was created\n    address delegatedTo;\n    // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\n    address withdrawer;\n    // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\n    uint256 nonce;\n    // Block timestamp when the Withdrawal was created\n    uint32 startTimestamp;\n    // Array of pools that the Withdrawal contains\n    IPool[] pools;\n    // Array containing the amount of shares in each Pool in the `pools` array\n    uint256[] shares;\n  }\n\n  struct UnstakeParams {\n    // Array of pools that the Unstake contains\n    IPool[] pools;\n    // Array containing the amount of shares in each Pool in the `pools` array\n    uint256[] shares;\n    // The address of the withdrawer\n    address withdrawer;\n  }\n\n  // @notice Emitted when a new operator registers in BinLayer and provides their OperatorDetails.\n  event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\n\n  /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\n  event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\n\n  /**\n   * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n   */\n  event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\n\n  /// @notice Emitted whenever an operator's shares are increased for a given pool. Note that shares is the delta in the operator's shares.\n  event OperatorSharesIncreased(address indexed operator, address staker, IPool pool, uint256 shares);\n\n  /// @notice Emitted whenever an operator's shares are decreased for a given pool. Note that shares is the delta in the operator's shares.\n  event OperatorSharesDecreased(address indexed operator, address staker, IPool pool, uint256 shares);\n\n  /// @notice Emitted when @param staker delegates to @param operator.\n  event StakerDelegated(address indexed staker, address indexed operator);\n\n  /// @notice Emitted when @param staker undelegates from @param operator.\n  event StakerUndelegated(address indexed staker, address indexed operator);\n\n  /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\n  event StakerForceUndelegated(address indexed staker, address indexed operator);\n\n  /**\n   * @notice Emitted when a new withdrawal is queued.\n   * @param withdrawalRoot Is the hash of the `withdrawal`.\n   * @param withdrawal Is the withdrawal itself.\n   */\n  event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\n\n  /// @notice Emitted when a queued withdrawal is completed\n  event WithdrawalCompleted(bytes32 withdrawalRoot);\n\n  /// @notice Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\n  event MinWithdrawalDelaySet(uint256 previousValue, uint256 newValue);\n\n  /// @notice Emitted when the `poolWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\n  event PoolWithdrawalDelaySet(IPool pool, uint256 previousValue, uint256 newValue);\n\n  event UpdateWrappedTokenGateway(address previousGateway, address currentGateway);\n\n  /**\n   * @notice Registers the caller as an operator in BinLayer.\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n   *\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external;\n\n  /**\n   * @notice Updates an operator's stored `OperatorDetails`.\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n   *\n   * @dev The caller must have previously registered as an operator in BinLayer.\n   */\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\n\n  /**\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n   * @param metadataURI The URI for metadata associated with an operator\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function updateOperatorMetadataURI(string calldata metadataURI) external;\n\n  /**\n   * @notice Caller delegates their stake to an operator.\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer.\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt A unique single use value tied to an individual signature.\n   * @dev The approverSignatureAndExpiry is used in the event that:\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\n   *                  AND\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external;\n\n  /**\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n   * @param staker The account delegating stake to an `operator` account\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   *\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n   * is the `msg.sender`, then approval is assumed.\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateToBySignature(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) external;\n\n  /**\n   * @notice Undelegates the staker from the operator who they are delegated to.\n   * @param staker The account to be undelegated.\n   * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\n   *\n   * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\n   * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\n   * @dev Reverts if the `staker` is already undelegated.\n   */\n  function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\n\n  /**\n   * Allows a staker to withdraw some shares. Withdrawn shares/pools are immediately removed\n   * from the staker. If the staker is delegated, withdrawn shares/pools are also removed from\n   * their operator.\n   *\n   * All withdrawn shares/pools are placed in a queue and can be fully withdrawn after a delay.\n   */\n  function unstakes(UnstakeParams[] calldata unstakeParams) external returns (bytes32[] memory);\n\n  /**\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n   * @param withdrawal The Withdrawal to complete.\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Pool in the `withdrawal.pools` array.\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified pools themselves\n   * and sent to the caller, through calls to `withdrawal.pools[i].withdraw`. If false, then the shares in the specified pools\n   * will simply be transferred to the caller directly.\n   * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\n   * @dev beaconChainETHPool shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n   * any beaconChainETHPool shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n   * any other pools, which will be transferred to the withdrawer.\n   */\n  function withdraw(Withdrawal calldata withdrawal, IERC20[] calldata tokens, uint256 middlewareTimesIndex, bool receiveAsTokens) external;\n\n  /**\n   * @notice Array-ified version of `withdraw`.\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n   * @param withdrawals The Withdrawals to complete.\n   * @param tokens Array of tokens for each Withdrawal. See `withdraw` for the usage of a single array.\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `withdraw` for the usage of a single index.\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `withdraw` for the usage of a single boolean.\n   * @dev See `withdraw` for relevant dev tags\n   */\n  function withdraws(\n    Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexes,\n    bool[] calldata receiveAsTokens\n  ) external;\n\n  /**\n   * @notice Increases a staker's delegated share balance in a pool.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param pool The pool in which to increase the delegated shares.\n   * @param shares The number of shares to increase.\n   *\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the PoolController.sol.\n   */\n  function increaseDelegatedShares(address staker, IPool pool, uint256 shares) external;\n\n  /**\n   * @notice Decreases a staker's delegated share balance in a pool.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param pool The pool in which to decrease the delegated shares.\n   * @param shares The number of shares to decrease.\n   *\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `pool` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the PoolController.sol.\n   */\n  function decreaseDelegatedShares(address staker, IPool pool, uint256 shares) external;\n\n  /**\n   * @notice returns the address of the operator that `staker` is delegated to.\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n   */\n  function delegatedTo(address staker) external view returns (address);\n\n  /**\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\n   */\n  function operatorDetails(address operator) external view returns (OperatorDetails memory);\n\n  /**\n   * @notice Returns the delegationApprover account for an operator\n   */\n  function delegationApprover(address operator) external view returns (address);\n\n  /**\n   * @notice Returns the stakerOptOutWindow for an operator\n   */\n  function stakerOptOutWindow(address operator) external view returns (uint256);\n\n  /**\n   * @notice Given array of pools, returns array of shares for the operator\n   */\n  function getOperatorShares(address operator, IPool[] memory pools) external view returns (uint256[] memory);\n\n  /**\n   * @notice Given a list of pools, return the minimum cooldown that must pass to withdraw\n   * from all the inputted pools. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\n   * @param pools The pools to check withdrawal delays for\n   */\n  function getWithdrawalDelay(IPool[] calldata pools) external view returns (uint256);\n\n  /**\n   * @notice returns the total number of shares in `pool` that are delegated to `operator`.\n   * @notice Mapping: operator => pool => total number of shares in the pool delegated to the operator.\n   * @dev By design, the following invariant should hold for each Pool:\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n   * = sum (delegateable shares of all stakers delegated to the operator)\n   */\n  function operatorShares(address operator, IPool pool) external view returns (uint256);\n\n  /**\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n   */\n  function isDelegated(address staker) external view returns (bool);\n\n  /**\n   * @notice Returns true is an operator has previously registered for delegation.\n   */\n  function isOperator(address operator) external view returns (bool);\n\n  /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\n  function stakerNonce(address staker) external view returns (uint256);\n\n  /**\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n   */\n  function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\n\n  /**\n   * @notice Minimum delay enforced by this contract for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   * Note that pools each have a separate withdrawal delay, which can be greater than this value. So the minimum cooldown that must pass\n   * to withdraw a pool is MAX(minWithdrawalDelay, poolWithdrawalDelay[pool])\n   */\n  function minWithdrawalDelay() external view returns (uint256);\n\n  /**\n   * @notice Minimum delay enforced by this contract per Pool for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   */\n  function poolWithdrawalDelay(IPool pool) external view returns (uint256);\n\n  /**\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n   * @param staker The signing staker\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32);\n\n  /**\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n   * @param staker The signing staker\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateStakerDelegationDigestHash(\n    address staker,\n    uint256 _stakerNonce,\n    address operator,\n    uint256 expiry\n  ) external view returns (bytes32);\n\n  /**\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n   * @param staker The account delegating their stake\n   * @param operator The account receiving delegated stake\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n   * @param approverSalt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateDelegationApprovalDigestHash(\n    address staker,\n    address operator,\n    address _delegationApprover,\n    bytes32 approverSalt,\n    uint256 expiry\n  ) external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the contract's domain\n  function DOMAIN_TYPEHASH() external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\n  function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\n  function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() external view returns (bytes32);\n\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n  function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\n\n  /// @notice Returns the keccak256 hash of `withdrawal`.\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IListaGateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.20;\n\ninterface IListaGateway {\n  function depositNativeToken() external payable;\n}\n"
    },
    "contracts/interfaces/IListaStakeManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.20;\n\ninterface IListaStakeManager {\n  function deposit() external payable;\n}\n"
    },
    "contracts/interfaces/IPausable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IPauserRegistry.sol';\n\n/**\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\n * 2) update the paused state to this new value\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\n */\n\ninterface IPausable {\n  /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\n  event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\n\n  /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\n  event Paused(address indexed account, uint256 newPausedStatus);\n\n  /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\n  event Unpaused(address indexed account, uint256 newPausedStatus);\n\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\n  function pauserRegistry() external view returns (IPauserRegistry);\n\n  /**\n   * @notice This function is used to pause an BinLayer contract's functionality.\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\n   */\n  function pause(uint256 newPausedStatus) external;\n\n  /**\n   * @notice Alias for `pause(type(uint256).max)`.\n   */\n  function pauseAll() external;\n\n  /**\n   * @notice This function is used to unpause an BinLayer contract's functionality.\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\n   */\n  function unpause(uint256 newPausedStatus) external;\n\n  /// @notice Returns the current paused status as a uint256.\n  function paused() external view returns (uint256);\n\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\n  function paused(uint8 index) external view returns (bool);\n\n  /// @notice Allows the unpauser to set a new pauser registry\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\n}\n"
    },
    "contracts/interfaces/IPauserRegistry.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @title Interface for the `PauserRegistry` contract.\n */\ninterface IPauserRegistry {\n  event PauserStatusChanged(address pauser, bool canPause);\n\n  event UnpauserChanged(address previousUnpauser, address newUnpauser);\n\n  /// @notice Mapping of addresses to whether they hold the pauser role.\n  function isPauser(address pauser) external view returns (bool);\n\n  /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\n  function unpauser() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/**\n * @title Minimal interface for an `Pool` contract.\n * @notice Custom `Pool` implementations may expand extensively on this interface.\n */\ninterface IPool {\n  /**\n   * @notice Used to deposit tokens into this Pool\n   * @param token is the ERC20 token being deposited\n   * @param amount is the amount of token being deposited\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\n   * `depositIntoPool` function, and individual share balances are recorded in the poolController as well.\n   * @return newShares is the number of new shares issued at the current exchange ratio.\n   */\n  function deposit(IERC20 token, uint256 amount) external returns (uint256);\n\n  /**\n   * @notice Used to withdraw tokens from this Pool, to the `recipient`'s address\n   * @param recipient is the address to receive the withdrawn funds\n   * @param token is the ERC20 token being transferred out\n   * @param amountShares is the amount of shares being withdrawn\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\n   * other functions, and individual share balances are recorded in the poolController as well.\n   */\n  function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlying(uint256 amountShares) external returns (uint256);\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this pool. In contrast to `userUnderlyingView`, this function **may** make state modifications\n   */\n  function userUnderlying(address user) external returns (uint256);\n\n  /**\n   * @notice convenience function for fetching the current total shares of `user` in this pool, by\n   * querying the `poolController` contract\n   */\n  function shares(address user) external view returns (uint256);\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this pool. In contrast to `userUnderlying`, this function guarantees no state modifications\n   */\n  function userUnderlyingView(address user) external view returns (uint256);\n\n  /// @notice The underlying token for shares in this Pool\n  function underlyingToken() external view returns (IERC20);\n\n  /// @notice The total number of extant shares in this Pool\n  function totalShares() external view returns (uint256);\n\n  /// @notice Returns either a brief string explaining the pool's goal & purpose, or a link to metadata that explains in more detail.\n  function explanation() external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IPoolController.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IPool.sol';\nimport './ISlasher.sol';\nimport './IDelegationController.sol';\n\n/**\n * @title Interface for the primary entrypoint for funds into BinLayer.\n * @notice See the `PoolController` contract itself for implementation details.\n */\ninterface IPoolController {\n  /**\n   * @notice Emitted when a new deposit occurs on behalf of `staker`.\n   * @param staker Is the staker who is depositing funds into BinLayer.\n   * @param pool Is the pool that `staker` has deposited into.\n   * @param token Is the token that `staker` deposited.\n   * @param shares Is the number of new shares `staker` has been granted in `pool`.\n   */\n  event Deposit(address staker, IERC20 token, IPool pool, uint256 shares);\n\n  /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a pool and value by the owner\n  event UpdatedThirdPartyTransfersForbidden(IPool pool, bool value);\n\n  /// @notice Emitted when the `poolWhitelister` is changed\n  event PoolWhitelisterChanged(address previousAddress, address newAddress);\n\n  /// @notice Emitted when a pool is added to the approved list of pools for deposit\n  event PoolAddedToDepositWhitelist(IPool pool);\n\n  /// @notice Emitted when a pool is removed from the approved list of pools for deposit\n  event PoolRemovedFromDepositWhitelist(IPool pool);\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `msg.sender`\n   * @param pool is the specified pool where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the pool by the staker\n   * @return shares The amount of new shares in the `pool` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\n   */\n  function depositIntoPool(IPool pool, IERC20 token, uint256 amount) external returns (uint256 shares);\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `pool`, with the resultant shares credited to `staker`\n   * @param staker Staker address\n   * @param pool is the specified pool where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the pool by the staker\n   * @return shares The amount of new shares in the `pool` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy.\n   */\n  function depositIntoPoolWithStaker(address staker, IPool pool, IERC20 token, uint256 amount) external returns (uint256 shares);\n\n  /**\n   * @notice Used for depositing an asset into the specified pool with the resultant shares credited to `staker`,\n   * who must sign off on the action.\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\n   * purely to help one address deposit 'for' another.\n   * @param pool is the specified pool where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the pool by the staker\n   * @param staker the staker that the deposited assets will be credited to\n   * @param expiry the timestamp at which the signature expires\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\n   * following EIP-1271 if the `staker` is a contract\n   * @return shares The amount of new shares in the `pool` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\n   * targeting stakers who may be attempting to undelegate.\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this pool\n   *\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a pool is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding pool shares are not in sync upon reentrancy\n   */\n  function depositIntoPoolWithSignature(\n    IPool pool,\n    IERC20 token,\n    uint256 amount,\n    address staker,\n    uint256 expiry,\n    bytes memory signature\n  ) external returns (uint256 shares);\n\n  /// @notice Used by the DelegationController.sol to remove a Staker's shares from a particular pool when entering the withdrawal queue\n  function removeShares(address staker, IPool pool, uint256 shares) external;\n\n  /// @notice Used by the DelegationController.sol to award a Staker some shares that have passed through the withdrawal queue\n  function addShares(address staker, IERC20 token, IPool pool, uint256 shares) external;\n\n  /// @notice Used by the DelegationController.sol to convert withdrawn shares to tokens and send them to a recipient\n  function withdrawSharesAsTokens(address recipient, IPool pool, uint256 shares, IERC20 token) external;\n\n  /// @notice Returns the current shares of `user` in `pool`\n  function stakerPoolShares(address user, IPool pool) external view returns (uint256 shares);\n\n  /**\n   * @notice Get all details on the staker's deposits and corresponding shares\n   * @return (staker's pools, shares in these pools)\n   */\n  function getDeposits(address staker) external view returns (IPool[] memory, uint256[] memory);\n\n  /// @notice Simple getter function that returns `stakerPoolList[staker].length`.\n  function stakerPoolListLength(address staker) external view returns (uint256);\n\n  /**\n   * @notice Owner-only function that adds the provided Pools to the 'whitelist' of pools that stakers can deposit into\n   * @param poolsToWhitelist Pools that will be added to the `poolIsWhitelistedForDeposit` mapping (if they aren't in it already)\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each pool\n   */\n  function addPoolsToDepositWhitelist(IPool[] calldata poolsToWhitelist, bool[] calldata thirdPartyTransfersForbiddenValues) external;\n\n  /**\n   * @notice Owner-only function that removes the provided Pools from the 'whitelist' of pools that stakers can deposit into\n   * @param poolsToRemoveFromWhitelist Pools that will be removed to the `poolIsWhitelistedForDeposit` mapping (if they are in it)\n   */\n  function removePoolsFromDepositWhitelist(IPool[] calldata poolsToRemoveFromWhitelist) external;\n\n  /// @notice Returns the single, central Delegation contract of BinLayer\n  function delegation() external view returns (IDelegationController);\n\n  /// @notice Returns the single, central Slasher contract of BinLayer\n  function slasher() external view returns (ISlasher);\n\n  /// @notice Returns the address of the `poolWhitelister`\n  function poolWhitelister() external view returns (address);\n\n  /// @notice Returns bool for whether or not `pool` is whitelisted for deposit\n  function poolIsWhitelistedForDeposit(IPool pool) external view returns (bool);\n\n  /**\n   * @notice Returns bool for whether or not `pool` enables credit transfers. i.e enabling\n   * depositIntoPoolWithSignature calls or queueing withdrawals to a different address than the staker.\n   */\n  function thirdPartyTransfersForbidden(IPool pool) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IRewardsCoordinator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './IPool.sol';\nimport './IPauserRegistry.sol';\n\n/**\n * @title Interface for the `IRewardsCoordinator` contract.\n * @notice Allows AVSs to make \"Rewards Submissions\", which get distributed amongst the AVSs' confirmed\n * Operators and the Stakers delegated to those Operators.\n * Calculations are performed based on the completed RewardsSubmission, with the results posted in\n * a Merkle root against which Stakers & Operators can make claims.\n */\ninterface IRewardsCoordinator {\n  /// STRUCTS ///\n  /**\n   * @notice A linear combination of pools and multipliers for AVSs to weigh\n   * BinLayer pools.\n   * @param pool The BinLayer pool to be used for the rewards submission\n   * @param multiplier The weight of the pool in the rewards submission\n   */\n  struct PoolAndMultiplier {\n    IPool pool;\n    uint96 multiplier;\n  }\n\n  /**\n   * Sliding Window for valid RewardsSubmission startTimestamp\n   *\n   * Scenario A: GENESIS_REWARDS_TIMESTAMP IS WITHIN RANGE\n   *         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n   *             <--------------------valid range for startTimestamp------------------------>\n   *             ^\n   *         GENESIS_REWARDS_TIMESTAMP\n   *\n   *\n   * Scenario B: GENESIS_REWARDS_TIMESTAMP IS OUT OF RANGE\n   *         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n   *         <------------------------valid range for startTimestamp------------------------>\n   *     ^\n   * GENESIS_REWARDS_TIMESTAMP\n   * @notice RewardsSubmission struct submitted by AVSs when making rewards for their operators and stakers\n   * RewardsSubmission can be for a time range within the valid window for startTimestamp and must be within max duration.\n   * See `createAVSRewardsSubmission()` for more details.\n   * @param poolsAndMultipliers The pools and their relative weights\n   * cannot have duplicate pools and need to be sorted in ascending address order\n   * @param token The rewards token to be distributed\n   * @param amount The total amount of tokens to be distributed\n   * @param startTimestamp The timestamp (seconds) at which the submission range is considered for distribution\n   * could start in the past or in the future but within a valid range. See the diagram above.\n   * @param duration The duration of the submission range in seconds. Must be <= MAX_REWARDS_DURATION\n   */\n  struct RewardsSubmission {\n    PoolAndMultiplier[] poolsAndMultipliers;\n    IERC20 token;\n    uint256 amount;\n    uint32 startTimestamp;\n    uint32 duration;\n  }\n\n  /**\n   * @notice A distribution root is a merkle root of the distribution of earnings for a given period.\n   * The RewardsCoordinator stores all historical distribution roots so that earners can claim their earnings against older roots\n   * if they wish but the merkle tree contains the cumulative earnings of all earners and tokens for a given period so earners (or their claimers if set)\n   * only need to claim against the latest root to claim all available earnings.\n   * @param root The merkle root of the distribution\n   * @param rewardsCalculationEndTimestamp The timestamp (seconds) until which rewards have been calculated\n   * @param activatedAt The timestamp (seconds) at which the root can be claimed against\n   */\n  struct DistributionRoot {\n    bytes32 root;\n    uint32 rewardsCalculationEndTimestamp;\n    uint32 activatedAt;\n    bool disabled;\n  }\n\n  /**\n   * @notice Internal leaf in the merkle tree for the earner's account leaf\n   * @param earner The address of the earner\n   * @param earnerTokenRoot The merkle root of the earner's token subtree\n   * Each leaf in the earner's token subtree is a TokenTreeMerkleLeaf\n   */\n  struct EarnerTreeMerkleLeaf {\n    address earner;\n    bytes32 earnerTokenRoot;\n  }\n\n  /**\n   * @notice The actual leaves in the distribution merkle tree specifying the token earnings\n   * for the respective earner's subtree. Each leaf is a claimable amount of a token for an earner.\n   * @param token The token for which the earnings are being claimed\n   * @param cumulativeEarnings The cumulative earnings of the earner for the token\n   */\n  struct TokenTreeMerkleLeaf {\n    IERC20 token;\n    uint256 cumulativeEarnings;\n  }\n\n  /**\n   * @notice A claim against a distribution root called by an\n   * earners claimer (could be the earner themselves). Each token claim will claim the difference\n   * between the cumulativeEarnings of the earner and the cumulativeClaimed of the claimer.\n   * Each claim can specify which of the earner's earned tokens they want to claim.\n   * See `processClaim()` for more details.\n   * @param rootIndex The index of the root in the list of DistributionRoots\n   * @param earnerIndex The index of the earner's account root in the merkle tree\n   * @param earnerTreeProof The proof of the earner's EarnerTreeMerkleLeaf against the merkle root\n   * @param earnerLeaf The earner's EarnerTreeMerkleLeaf struct, providing the earner address and earnerTokenRoot\n   * @param tokenIndices The indices of the token leaves in the earner's subtree\n   * @param tokenTreeProofs The proofs of the token leaves against the earner's earnerTokenRoot\n   * @param tokenLeaves The token leaves to be claimed\n   * @dev The merkle tree is structured with the merkle root at the top and EarnerTreeMerkleLeaf as internal leaves\n   * in the tree. Each earner leaf has its own subtree with TokenTreeMerkleLeaf as leaves in the subtree.\n   * To prove a claim against a specified rootIndex(which specifies the distributionRoot being used),\n   * the claim will first verify inclusion of the earner leaf in the tree against _distributionRoots[rootIndex].root.\n   * Then for each token, it will verify inclusion of the token leaf in the earner's subtree against the earner's earnerTokenRoot.\n   */\n  struct RewardsMerkleClaim {\n    uint32 rootIndex;\n    uint32 earnerIndex;\n    bytes earnerTreeProof;\n    EarnerTreeMerkleLeaf earnerLeaf;\n    uint32[] tokenIndices;\n    bytes[] tokenTreeProofs;\n    TokenTreeMerkleLeaf[] tokenLeaves;\n  }\n\n  /// EVENTS ///\n\n  /// @notice emitted when an AVS creates a valid RewardsSubmission\n  event AVSRewardsSubmissionCreated(\n    address indexed avs,\n    uint256 indexed submissionNonce,\n    bytes32 indexed rewardsSubmissionHash,\n    RewardsSubmission rewardsSubmission\n  );\n  /// @notice emitted when a valid RewardsSubmission is created for all stakers by a valid submitter\n  event RewardsSubmissionForAllCreated(\n    address indexed submitter,\n    uint256 indexed submissionNonce,\n    bytes32 indexed rewardsSubmissionHash,\n    RewardsSubmission rewardsSubmission\n  );\n  /// @notice rewardsUpdater is responsible for submiting DistributionRoots, only owner can set rewardsUpdater\n  event RewardsUpdaterSet(address indexed oldRewardsUpdater, address indexed newRewardsUpdater);\n  event RewardsForAllSubmitterSet(address indexed rewardsForAllSubmitter, bool indexed oldValue, bool indexed newValue);\n  event ActivationDelaySet(uint32 oldActivationDelay, uint32 newActivationDelay);\n  event GlobalCommissionBipsSet(uint16 oldGlobalCommissionBips, uint16 newGlobalCommissionBips);\n  event ClaimerForSet(address indexed earner, address indexed oldClaimer, address indexed claimer);\n  /// @notice rootIndex is the specific array index of the newly created root in the storage array\n  event DistributionRootSubmitted(\n    uint32 indexed rootIndex,\n    bytes32 indexed root,\n    uint32 indexed rewardsCalculationEndTimestamp,\n    uint32 activatedAt\n  );\n  event DistributionRootDisabled(uint32 indexed rootIndex);\n  /// @notice root is one of the submitted distribution roots that was claimed against\n  event RewardsClaimed(\n    bytes32 root,\n    address indexed earner,\n    address indexed claimer,\n    address indexed recipient,\n    IERC20 token,\n    uint256 claimedAmount\n  );\n\n  /**\n   *\n   *                         VIEW FUNCTIONS\n   *\n   */\n\n  /// @notice The address of the entity that can update the contract with new merkle roots\n  function rewardsUpdater() external view returns (address);\n\n  /**\n   * @notice The interval in seconds at which the calculation for a RewardsSubmission distribution is done.\n   * @dev Rewards Submission durations must be multiples of this interval.\n   */\n  function CALCULATION_INTERVAL_SECONDS() external view returns (uint32);\n\n  /// @notice The maximum amount of time (seconds) that a RewardsSubmission can span over\n  function MAX_REWARDS_DURATION() external view returns (uint32);\n\n  /// @notice max amount of time (seconds) that a submission can start in the past\n  function MAX_RETROACTIVE_LENGTH() external view returns (uint32);\n\n  /// @notice max amount of time (seconds) that a submission can start in the future\n  function MAX_FUTURE_LENGTH() external view returns (uint32);\n\n  /// @notice absolute min timestamp (seconds) that a submission can start at\n  function GENESIS_REWARDS_TIMESTAMP() external view returns (uint32);\n\n  /// @notice Delay in timestamp (seconds) before a posted root can be claimed against\n  function activationDelay() external view returns (uint32);\n\n  /// @notice Mapping: earner => the address of the entity who can call `processClaim` on behalf of the earner\n  function claimerFor(address earner) external view returns (address);\n\n  /// @notice Mapping: claimer => token => total amount claimed\n  function cumulativeClaimed(address claimer, IERC20 token) external view returns (uint256);\n\n  /// @notice the commission for all operators across all avss\n  function globalOperatorCommissionBips() external view returns (uint16);\n\n  /// @notice the commission for a specific operator for a specific avs\n  /// NOTE: Currently unused and simply returns the globalOperatorCommissionBips value but will be used in future release\n  function operatorCommissionBips(address operator, address avs) external view returns (uint16);\n\n  /// @notice return the hash of the earner's leaf\n  function calculateEarnerLeafHash(EarnerTreeMerkleLeaf calldata leaf) external pure returns (bytes32);\n\n  /// @notice returns the hash of the earner's token leaf\n  function calculateTokenLeafHash(TokenTreeMerkleLeaf calldata leaf) external pure returns (bytes32);\n\n  /// @notice returns 'true' if the claim would currently pass the check in `processClaims`\n  /// but will revert if not valid\n  function checkClaim(RewardsMerkleClaim calldata claim) external view returns (bool);\n\n  /// @notice The timestamp until which RewardsSubmissions have been calculated\n  function currRewardsCalculationEndTimestamp() external view returns (uint32);\n\n  /// @notice loop through distribution roots from reverse and return hash\n  function getRootIndexFromHash(bytes32 rootHash) external view returns (uint32);\n\n  /// @notice returns the number of distribution roots posted\n  function getDistributionRootsLength() external view returns (uint256);\n\n  /// @notice returns the distributionRoot at the specified index\n  function getDistributionRootAtIndex(uint256 index) external view returns (DistributionRoot memory);\n\n  /// @notice returns the current distributionRoot\n  function getCurrentDistributionRoot() external view returns (DistributionRoot memory);\n\n  /**\n   *\n   *                         EXTERNAL FUNCTIONS\n   *\n   */\n\n  /**\n   * @notice Creates a new rewards submission on behalf of an AVS, to be split amongst the\n   * set of stakers delegated to operators who are registered to the `avs`\n   * @param rewardsSubmissions The rewards submissions being created\n   * @dev Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being made\n   * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n   * @dev The tokens are sent to the `RewardsCoordinator` contract\n   * @dev pools must be in ascending order of addresses to check for duplicates\n   * @dev This function will revert if the `rewardsSubmission` is malformed,\n   * e.g. if the `pools` and `weights` arrays are of non-equal lengths\n   */\n  function createAVSRewardsSubmission(RewardsSubmission[] calldata rewardsSubmissions) external;\n\n  /**\n   * @notice similar to `createAVSRewardsSubmission` except the rewards are split amongst *all* stakers\n   * rather than just those delegated to operators who are registered to a single avs and is\n   * a permissioned call based on isRewardsForAllSubmitter mapping.\n   */\n  function createRewardsForAllSubmission(RewardsSubmission[] calldata rewardsSubmission) external;\n\n  /**\n   * @notice Claim rewards against a given root (read from _distributionRoots[claim.rootIndex]).\n   * Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for,\n   * they can simply claim against the latest root and the contract will calculate the difference between\n   * their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\n   * @param claim The RewardsMerkleClaim to be processed.\n   * Contains the root index, earner, token leaves, and required proofs\n   * @param recipient The address recipient that receives the ERC20 rewards\n   * @dev only callable by the valid claimer, that is\n   * if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only\n   * claimerFor[claim.earner] can claim the rewards.\n   */\n  function processClaim(RewardsMerkleClaim calldata claim, address recipient) external;\n\n  /**\n   * @notice Creates a new distribution root. activatedAt is set to block.timestamp + activationDelay\n   * @param root The merkle root of the distribution\n   * @param rewardsCalculationEndTimestamp The timestamp (seconds) until which rewards have been calculated\n   * @dev Only callable by the rewardsUpdater\n   */\n  function submitRoot(bytes32 root, uint32 rewardsCalculationEndTimestamp) external;\n\n  /**\n   * @notice allow the rewardsUpdater to disable/cancel a pending root submission in case of an error\n   * @param rootIndex The index of the root to be disabled\n   */\n  function disableRoot(uint32 rootIndex) external;\n\n  /**\n   * @notice Sets the address of the entity that can call `processClaim` on behalf of the earner (msg.sender)\n   * @param claimer The address of the entity that can claim rewards on behalf of the earner\n   * @dev Only callable by the `earner`\n   */\n  function setClaimerFor(address claimer) external;\n\n  /**\n   * @notice Sets the delay in timestamp before a posted root can be claimed against\n   * @param _activationDelay Delay in timestamp (seconds) before a posted root can be claimed against\n   * @dev Only callable by the contract owner\n   */\n  function setActivationDelay(uint32 _activationDelay) external;\n\n  /**\n   * @notice Sets the global commission for all operators across all avss\n   * @param _globalCommissionBips The commission for all operators across all avss\n   * @dev Only callable by the contract owner\n   */\n  function setGlobalOperatorCommission(uint16 _globalCommissionBips) external;\n\n  /**\n   * @notice Sets the permissioned `rewardsUpdater` address which can post new roots\n   * @dev Only callable by the contract owner\n   */\n  function setRewardsUpdater(address _rewardsUpdater) external;\n\n  /**\n   * @notice Sets the permissioned `rewardsForAllSubmitter` address which can submit createRewardsForAllSubmission\n   * @dev Only callable by the contract owner\n   * @param _submitter The address of the rewardsForAllSubmitter\n   * @param _newValue The new value for isRewardsForAllSubmitter\n   */\n  function setRewardsForAllSubmitter(address _submitter, bool _newValue) external;\n}\n"
    },
    "contracts/interfaces/ISignatureUtils.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @title The interface for common signature utilities.\n */\ninterface ISignatureUtils {\n  // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\n  struct SignatureWithExpiry {\n    // the signature itself, formatted as a single bytes object\n    bytes signature;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\n  struct SignatureWithSaltAndExpiry {\n    // the signature itself, formatted as a single bytes object\n    bytes signature;\n    // the salt used to generate the signature\n    bytes32 salt;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n}\n"
    },
    "contracts/interfaces/ISlasher.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IPoolController.sol';\nimport './IDelegationController.sol';\n\n/**\n * @title Interface for the primary 'slashing' contract for BinLayer.\n * @notice See the `Slasher` contract itself for implementation details.\n */\ninterface ISlasher {\n  // struct used to store information about the current state of an operator's obligations to middlewares they are serving\n  struct MiddlewareTimes {\n    // The update timestamp for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\n    uint32 stalestUpdateTimestamp;\n    // The latest 'serveUntilTimestamp' from all of the middleware that the operator is serving\n    uint32 latestServeUntilTimestamp;\n  }\n\n  // struct used to store details relevant to a single middleware that an operator has opted-in to serving\n  struct MiddlewareDetails {\n    // the timestamp at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\n    uint32 registrationMayBeginAtTimestamp;\n    // the timestamp before which the contract is allowed to slash the user\n    uint32 contractCanSlashOperatorUntilTimestamp;\n    // the timestamp at which the middleware's view of the operator's stake was most recently updated\n    uint32 latestUpdateTimestamp;\n  }\n\n  /// @notice Emitted when a middleware times is added to `operator`'s array.\n  event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateTimestamp, uint32 latestServeUntilTimestamp);\n\n  /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\n  event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\n\n  /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilTimestamp`.\n  event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilTimestamp);\n\n  /**\n   * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\n   * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\n   */\n  event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\n\n  /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within BinLayer.\n  event FrozenStatusReset(address indexed previouslySlashedAddress);\n\n  /**\n   * @notice Gives the `contractAddress` permission to slash the funds of the caller.\n   * @dev Typically, this function must be called prior to registering for a middleware.\n   */\n  function optIntoSlashing(address contractAddress) external;\n\n  /**\n   * @notice Used for 'slashing' a certain operator.\n   * @param toBeFrozen The operator to be frozen.\n   * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\n   * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\n   */\n  function freezeOperator(address toBeFrozen) external;\n\n  /**\n   * @notice Removes the 'frozen' status from each of the `frozenAddresses`\n   * @dev Callable only by the contract owner (i.e. governance).\n   */\n  function resetFrozenStatus(address[] calldata frozenAddresses) external;\n\n  /**\n   * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\n   *         is slashable until serveUntil\n   * @param operator the operator whose stake update is being recorded\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\n   * @dev adds the middleware's slashing contract to the operator's linked list\n   */\n  function recordFirstStakeUpdate(address operator, uint32 serveUntilTimestamp) external;\n\n  /**\n   * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\n   *         to make sure the operator's stake at updateTimestamp is slashable until serveUntil\n   * @param operator the operator whose stake update is being recorded\n   * @param updateTimestamp the timestamp for which the stake update is being recorded\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at updateTimestamp is slashable\n   * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\n   * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\n   *      but it is anticipated to be rare and not detrimental.\n   */\n  function recordStakeUpdate(address operator, uint32 updateTimestamp, uint32 serveUntilTimestamp, uint256 insertAfter) external;\n\n  /**\n   * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\n   *         is slashable until serveUntil\n   * @param operator the operator whose stake update is being recorded\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\n   * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\n   * slash `operator` once `serveUntil` is reached\n   */\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilTimestamp) external;\n\n  /// @notice The PoolController.sol contract of BinLayer\n  function poolController() external view returns (IPoolController);\n\n  /// @notice The DelegationController.sol contract of BinLayer\n  function delegation() external view returns (IDelegationController);\n\n  /**\n   * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\n   * slashing of their funds, and cannot cannot deposit or withdraw from the poolController until the slashing process is completed\n   * and the staker's status is reset (to 'unfrozen').\n   * @param staker The staker of interest.\n   * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\n   * to an operator who has their status set to frozen. Otherwise returns 'false'.\n   */\n  function isFrozen(address staker) external view returns (bool);\n\n  /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\n  function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\n\n  /// @notice Returns the timestamp until which `serviceContract` is allowed to slash the `operator`.\n  function contractCanSlashOperatorUntilTimestamp(address operator, address serviceContract) external view returns (uint32);\n\n  /// @notice Returns the timestamp at which the `serviceContract` last updated its view of the `operator`'s stake\n  function latestUpdateTimestamp(address operator, address serviceContract) external view returns (uint32);\n\n  /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\n  function getCorrectValueForInsertAfter(address operator, uint32 updateTimestamp) external view returns (uint256);\n\n  /**\n   * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartTimestamp`, with `middlewareTimesIndex` used\n   * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\n   * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\n   * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartTimestamp`, *or* in the event\n   * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\n   * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\n   * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartTimestamp`.\n   * @param withdrawalStartTimestamp The timestamp at which the withdrawal was initiated.\n   * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\n   * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\n   */\n  function canWithdraw(address operator, uint32 withdrawalStartTimestamp, uint256 middlewareTimesIndex) external returns (bool);\n\n  /**\n   * operator =>\n   *  [\n   *      (\n   *          the least recent update timestamp of all of the middlewares it's serving/served,\n   *          latest time that the stake bonded at that update needed to serve until\n   *      )\n   *  ]\n   */\n  function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) external view returns (MiddlewareTimes memory);\n\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\n  function middlewareTimesLength(address operator) external view returns (uint256);\n\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateTimestamp`.\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address operator, uint32 index) external view returns (uint32);\n\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\n  function getMiddlewareTimesIndexServeUntilTimestamp(address operator, uint32 index) external view returns (uint32);\n\n  /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\n  function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\n\n  /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\n  function operatorWhitelistedContractsLinkedListEntry(address operator, address node) external view returns (bool, uint256, uint256);\n}\n"
    },
    "contracts/interfaces/IWrappedToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.20;\n\ninterface IWrappedToken {\n  function balanceOf(address account) external view returns (uint256);\n\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IWrappedTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.20;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {IDelegationController} from '../interfaces/IDelegationController.sol';\n\ninterface IWrappedTokenGateway {\n  function depositNativeToken(address staker) external payable;\n\n  function withdrawNativeTokens(\n    IDelegationController.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens\n  ) external;\n}\n"
    },
    "contracts/libraries/EIP1271SignatureUtils.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts/interfaces/IERC1271.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\n\n/**\n * @title Library of utilities for making EIP1271-compliant signature checks.\n */\nlibrary EIP1271SignatureUtils {\n  // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n  bytes4 internal constant EIP1271_MAGICVALUE = 0x1626ba7e;\n\n  /**\n   * @notice Checks @param signature is a valid signature of @param digestHash from @param signer.\n   * If the `signer` contains no code -- i.e. it is not (yet, at least) a contract address, then checks using standard ECDSA logic\n   * Otherwise, passes on the signature to the signer to verify the signature and checks that it returns the `EIP1271_MAGICVALUE`.\n   */\n  function checkSignature_EIP1271(address signer, bytes32 digestHash, bytes memory signature) internal view {\n    /**\n     * check validity of signature:\n     * 1) if `signer` is an EOA, then `signature` must be a valid ECDSA signature from `signer`,\n     * indicating their intention for this action\n     * 2) if `signer` is a contract, then `signature` must will be checked according to EIP-1271\n     */\n    if (Address.isContract(signer)) {\n      require(\n        IERC1271(signer).isValidSignature(digestHash, signature) == EIP1271_MAGICVALUE,\n        'EIP1271SignatureUtils.checkSignature_EIP1271: ERC1271 signature verification failed'\n      );\n    } else {\n      require(ECDSA.recover(digestHash, signature) == signer, 'EIP1271SignatureUtils.checkSignature_EIP1271: signature not from signer');\n    }\n  }\n}\n"
    },
    "contracts/libraries/Merkle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary Merkle {\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\n     */\n    function verifyInclusionKeccak(\n        bytes memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint256 index\n    ) internal pure returns (bool) {\n        return processInclusionProofKeccak(proof, leaf, index) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * _Available since v4.4._\n     *\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\n     */\n    function processInclusionProofKeccak(\n        bytes memory proof,\n        bytes32 leaf,\n        uint256 index\n    ) internal pure returns (bytes32) {\n        require(\n            proof.length != 0 && proof.length % 32 == 0,\n            \"Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32\"\n        );\n        bytes32 computedHash = leaf;\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            if (index % 2 == 0) {\n                // if ith bit of index is 0, then computedHash is a left sibling\n                assembly {\n                    mstore(0x00, computedHash)\n                    mstore(0x20, mload(add(proof, i)))\n                    computedHash := keccak256(0x00, 0x40)\n                    index := div(index, 2)\n                }\n            } else {\n                // if ith bit of index is 1, then computedHash is a right sibling\n                assembly {\n                    mstore(0x00, mload(add(proof, i)))\n                    mstore(0x20, computedHash)\n                    computedHash := keccak256(0x00, 0x40)\n                    index := div(index, 2)\n                }\n            }\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * Note this is for a Merkle tree using the sha256 hash function\n     */\n    function verifyInclusionSha256(\n        bytes memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint256 index\n    ) internal view returns (bool) {\n        return processInclusionProofSha256(proof, leaf, index) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * _Available since v4.4._\n     *\n     * Note this is for a Merkle tree using the sha256 hash function\n     */\n    function processInclusionProofSha256(\n        bytes memory proof,\n        bytes32 leaf,\n        uint256 index\n    ) internal view returns (bytes32) {\n        require(\n            proof.length != 0 && proof.length % 32 == 0,\n            \"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\"\n        );\n        bytes32[1] memory computedHash = [leaf];\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            if (index % 2 == 0) {\n                // if ith bit of index is 0, then computedHash is a left sibling\n                assembly {\n                    mstore(0x00, mload(computedHash))\n                    mstore(0x20, mload(add(proof, i)))\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\n                        revert(0, 0)\n                    }\n                    index := div(index, 2)\n                }\n            } else {\n                // if ith bit of index is 1, then computedHash is a right sibling\n                assembly {\n                    mstore(0x00, mload(add(proof, i)))\n                    mstore(0x20, mload(computedHash))\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\n                        revert(0, 0)\n                    }\n                    index := div(index, 2)\n                }\n            }\n        }\n        return computedHash[0];\n    }\n\n    /**\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\n     @param leaves the leaves of the merkle tree\n     @return The computed Merkle root of the tree.\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\n     */\n    function merkleizeSha256(bytes32[] memory leaves) internal pure returns (bytes32) {\n        //there are half as many nodes in the layer above the leaves\n        uint256 numNodesInLayer = leaves.length / 2;\n        //create a layer to store the internal nodes\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\n        //fill the layer with the pairwise hashes of the leaves\n        for (uint256 i = 0; i < numNodesInLayer; i++) {\n            layer[i] = sha256(abi.encodePacked(leaves[2 * i], leaves[2 * i + 1]));\n        }\n        //the next layer above has half as many nodes\n        numNodesInLayer /= 2;\n        //while we haven't computed the root\n        while (numNodesInLayer != 0) {\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\n            for (uint256 i = 0; i < numNodesInLayer; i++) {\n                layer[i] = sha256(abi.encodePacked(layer[2 * i], layer[2 * i + 1]));\n            }\n            //the next layer above has half as many nodes\n            numNodesInLayer /= 2;\n        }\n        //the first node in the layer is the root\n        return layer[0];\n    }\n}\n"
    },
    "contracts/libraries/StructuredLinkedList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.20;\n\n/**\n * @title StructuredLinkedList\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev An utility library for using sorted linked list data structures in your Solidity project.\n * @notice Adapted from https://github.com/vittominacori/solidity-linked-list/blob/master/contracts/StructuredLinkedList.sol\n */\nlibrary StructuredLinkedList {\n  uint256 private constant _NULL = 0;\n  uint256 private constant _HEAD = 0;\n\n  bool private constant _PREV = false;\n  bool private constant _NEXT = true;\n\n  struct List {\n    uint256 size;\n    mapping(uint256 => mapping(bool => uint256)) list;\n  }\n\n  /**\n   * @dev Checks if the list exists\n   * @param self stored linked list from contract\n   * @return bool true if list exists, false otherwise\n   */\n  function listExists(List storage self) internal view returns (bool) {\n    // if the head nodes previous or next pointers both point to itself, then there are no items in the list\n    if (self.list[_HEAD][_PREV] != _HEAD || self.list[_HEAD][_NEXT] != _HEAD) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Checks if the node exists\n   * @param self stored linked list from contract\n   * @param _node a node to search for\n   * @return bool true if node exists, false otherwise\n   */\n  function nodeExists(List storage self, uint256 _node) internal view returns (bool) {\n    if (self.list[_node][_PREV] == _HEAD && self.list[_node][_NEXT] == _HEAD) {\n      if (self.list[_HEAD][_NEXT] == _node) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Returns the number of elements in the list\n   * @param self stored linked list from contract\n   * @return uint256\n   */\n  function sizeOf(List storage self) internal view returns (uint256) {\n    return self.size;\n  }\n\n  /**\n   * @dev Gets the head of the list\n   * @param self stored linked list from contract\n   * @return uint256 the head of the list\n   */\n  function getHead(List storage self) internal view returns (uint256) {\n    return self.list[_HEAD][_NEXT];\n  }\n\n  /**\n   * @dev Returns the links of a node as a tuple\n   * @param self stored linked list from contract\n   * @param _node id of the node to get\n   * @return bool, uint256, uint256 true if node exists or false otherwise, previous node, next node\n   */\n  function getNode(List storage self, uint256 _node) internal view returns (bool, uint256, uint256) {\n    if (!nodeExists(self, _node)) {\n      return (false, 0, 0);\n    } else {\n      return (true, self.list[_node][_PREV], self.list[_node][_NEXT]);\n    }\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `_direction`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @param _direction direction to step in\n   * @return bool, uint256 true if node exists or false otherwise, node in _direction\n   */\n  function getAdjacent(List storage self, uint256 _node, bool _direction) internal view returns (bool, uint256) {\n    if (!nodeExists(self, _node)) {\n      return (false, 0);\n    } else {\n      uint256 adjacent = self.list[_node][_direction];\n      return (adjacent != _HEAD, adjacent);\n    }\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `_NEXT`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @return bool, uint256 true if node exists or false otherwise, next node\n   */\n  function getNextNode(List storage self, uint256 _node) internal view returns (bool, uint256) {\n    return getAdjacent(self, _node, _NEXT);\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `_PREV`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @return bool, uint256 true if node exists or false otherwise, previous node\n   */\n  function getPreviousNode(List storage self, uint256 _node) internal view returns (bool, uint256) {\n    return getAdjacent(self, _node, _PREV);\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `_NEXT`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @return bool true if success, false otherwise\n   */\n  function insertAfter(List storage self, uint256 _node, uint256 _new) internal returns (bool) {\n    return _insert(self, _node, _new, _NEXT);\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `_PREV`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @return bool true if success, false otherwise\n   */\n  function insertBefore(List storage self, uint256 _node, uint256 _new) internal returns (bool) {\n    return _insert(self, _node, _new, _PREV);\n  }\n\n  /**\n   * @dev Removes an entry from the linked list\n   * @param self stored linked list from contract\n   * @param _node node to remove from the list\n   * @return uint256 the removed node\n   */\n  function remove(List storage self, uint256 _node) internal returns (uint256) {\n    if ((_node == _NULL) || (!nodeExists(self, _node))) {\n      return 0;\n    }\n    _createLink(self, self.list[_node][_PREV], self.list[_node][_NEXT], _NEXT);\n    delete self.list[_node][_PREV];\n    delete self.list[_node][_NEXT];\n\n    self.size -= 1; // NOT: SafeMath library should be used here to decrement.\n\n    return _node;\n  }\n\n  /**\n   * @dev Pushes an entry to the head of the linked list\n   * @param self stored linked list from contract\n   * @param _node new entry to push to the head\n   * @return bool true if success, false otherwise\n   */\n  function pushFront(List storage self, uint256 _node) internal returns (bool) {\n    return _push(self, _node, _NEXT);\n  }\n\n  /**\n   * @dev Pushes an entry to the tail of the linked list\n   * @param self stored linked list from contract\n   * @param _node new entry to push to the tail\n   * @return bool true if success, false otherwise\n   */\n  function pushBack(List storage self, uint256 _node) internal returns (bool) {\n    return _push(self, _node, _PREV);\n  }\n\n  /**\n   * @dev Pops the first entry from the head of the linked list\n   * @param self stored linked list from contract\n   * @return uint256 the removed node\n   */\n  function popFront(List storage self) internal returns (uint256) {\n    return _pop(self, _NEXT);\n  }\n\n  /**\n   * @dev Pops the first entry from the tail of the linked list\n   * @param self stored linked list from contract\n   * @return uint256 the removed node\n   */\n  function popBack(List storage self) internal returns (uint256) {\n    return _pop(self, _PREV);\n  }\n\n  /**\n   * @dev Pushes an entry to the head of the linked list\n   * @param self stored linked list from contract\n   * @param _node new entry to push to the head\n   * @param _direction push to the head (_NEXT) or tail (_PREV)\n   * @return bool true if success, false otherwise\n   */\n  function _push(List storage self, uint256 _node, bool _direction) private returns (bool) {\n    return _insert(self, _HEAD, _node, _direction);\n  }\n\n  /**\n   * @dev Pops the first entry from the linked list\n   * @param self stored linked list from contract\n   * @param _direction pop from the head (_NEXT) or the tail (_PREV)\n   * @return uint256 the removed node\n   */\n  function _pop(List storage self, bool _direction) private returns (uint256) {\n    uint256 adj;\n    (, adj) = getAdjacent(self, _HEAD, _direction);\n    return remove(self, adj);\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @param _direction direction to insert node in\n   * @return bool true if success, false otherwise\n   */\n  function _insert(List storage self, uint256 _node, uint256 _new, bool _direction) private returns (bool) {\n    if (!nodeExists(self, _new) && nodeExists(self, _node)) {\n      uint256 c = self.list[_node][_direction];\n      _createLink(self, _node, _new, _direction);\n      _createLink(self, _new, c, _direction);\n\n      self.size += 1; // NOT: SafeMath library should be used here to increment.\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @dev Creates a bidirectional link between two nodes on direction `_direction`\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _link node to link to in the _direction\n   * @param _direction direction to insert node in\n   */\n  function _createLink(List storage self, uint256 _node, uint256 _link, bool _direction) private {\n    self.list[_link][!_direction] = _node;\n    self.list[_node][_direction] = _link;\n  }\n}\n"
    },
    "contracts/periphery/ListaGateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.20;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IListaStakeManager} from '../interfaces/IListaStakeManager.sol';\nimport {IPool} from '../interfaces/IPool.sol';\nimport {IPoolController} from '../interfaces/IPoolController.sol';\nimport {IDelegationController} from '../interfaces/IDelegationController.sol';\nimport {IListaGateway} from '../interfaces/IListaGateway.sol';\n\ncontract ListaGateway is IListaGateway, Ownable {\n  using SafeERC20 for IERC20;\n\n  IERC20 internal immutable slisBNB;\n  IListaStakeManager internal immutable listaStakeManager;\n  IPool internal immutable pool;\n  IPoolController internal immutable poolController;\n\n  constructor(address _slisBNB, address _owner, IListaStakeManager _listaStakeManager, IPool _pool, IPoolController _poolController) {\n    slisBNB = IERC20(_slisBNB);\n    listaStakeManager = _listaStakeManager;\n    pool = _pool;\n    poolController = _poolController;\n    _transferOwnership(_owner);\n    IERC20(_slisBNB).approve(address(poolController), type(uint256).max);\n  }\n\n  function depositNativeToken() external payable {\n    uint256 beforeBalance = slisBNB.balanceOf(address(this));\n    listaStakeManager.deposit{value: msg.value}();\n    uint256 afterBalance = slisBNB.balanceOf(address(this));\n    uint256 amountToStake = afterBalance - beforeBalance;\n    poolController.depositIntoPoolWithStaker(msg.sender, pool, slisBNB, amountToStake);\n  }\n\n  /**\n   * @dev transfer Native to an address, revert if it fails.\n   * @param to recipient of the transfer\n   * @param value the amount to send\n   */\n  function _safeTransferNative(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'NATIVE_TRANSFER_FAILED');\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @dev transfer native token from the utility contract, for native token recovery in case of stuck native\n   * due to selfdestructs or Native transfers to the pre-computed contract address before deployment.\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyNativeTransfer(address to, uint256 amount) external onlyOwner {\n    _safeTransferNative(to, amount);\n  }\n\n  /**\n   * @dev Get Lista contracts address used by ListaGateway\n   */\n  function getListaContracts() external view returns (IListaStakeManager _listaStakeManager, IERC20 _slisBNB) {\n    _listaStakeManager = listaStakeManager;\n    _slisBNB = slisBNB;\n  }\n\n  /**\n   * @dev Get slisBNB pool address used by ListaGateway\n   */\n  function getPoolAddress() external view returns (address) {\n    return address(pool);\n  }\n\n  /**\n   * @dev Only ListaStakeManager contract is allowed to transfer native token here. Prevent other addresses to send native token to this contract.\n   */\n  receive() external payable {\n    require(msg.sender == address(listaStakeManager), 'Receive not allowed');\n  }\n\n  /**\n   * @dev Revert fallback calls\n   */\n  fallback() external payable {\n    revert('Fallback not allowed');\n  }\n}\n"
    },
    "contracts/periphery/WrappedTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.20;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IWrappedToken} from '../interfaces/IWrappedToken.sol';\nimport {IPool} from '../interfaces/IPool.sol';\nimport {IPoolController} from '../interfaces/IPoolController.sol';\nimport {IDelegationController} from '../interfaces/IDelegationController.sol';\nimport {IWrappedTokenGateway} from '../interfaces/IWrappedTokenGateway.sol';\nimport {Errors} from '../helpers/Errors.sol';\n\ncontract WrappedTokenGateway is IWrappedTokenGateway, Ownable {\n  using SafeERC20 for IERC20;\n\n  IWrappedToken internal immutable wrappedToken;\n  IPool internal immutable pool;\n  IPoolController internal immutable poolController;\n  IDelegationController internal immutable delegationController;\n\n  constructor(\n    address _wrappedToken,\n    address _owner,\n    IPool _pool,\n    IPoolController _poolController,\n    IDelegationController _delegationController\n  ) {\n    wrappedToken = IWrappedToken(_wrappedToken);\n    pool = _pool;\n    poolController = _poolController;\n    delegationController = _delegationController;\n    _transferOwnership(_owner);\n    IWrappedToken(_wrappedToken).approve(address(poolController), type(uint256).max);\n  }\n\n  function depositNativeToken(address staker) external payable {\n    wrappedToken.deposit{value: msg.value}();\n    poolController.depositIntoPoolWithStaker(staker, pool, IERC20(address(wrappedToken)), msg.value);\n  }\n\n  function withdrawNativeTokens(\n    IDelegationController.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens\n  ) external {\n    for (uint256 i = 0; i < withdrawals.length; i++) {\n      require(withdrawals[i].staker == msg.sender, Errors.WITHDRAWER_MUST_BE_STAKER);\n      for (uint256 j = 0; j < withdrawals[i].pools.length; j++) {\n        require(withdrawals[i].pools[j] == pool, Errors.ONLY_SUPPORT_WRAPPED_TOKEN_POOL);\n      }\n    }\n    uint256 beforeBalance = wrappedToken.balanceOf(address(this));\n    delegationController.withdraws(withdrawals, tokens, middlewareTimesIndexs, receiveAsTokens);\n    uint256 afterBalance = wrappedToken.balanceOf(address(this));\n    uint256 amountToWithdraw = afterBalance - beforeBalance;\n    wrappedToken.withdraw(amountToWithdraw);\n    _safeTransferNative(msg.sender, amountToWithdraw);\n  }\n\n  /**\n   * @dev transfer Native to an address, revert if it fails.\n   * @param to recipient of the transfer\n   * @param value the amount to send\n   */\n  function _safeTransferNative(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'NATIVE_TRANSFER_FAILED');\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @dev transfer native token from the utility contract, for native token recovery in case of stuck native\n   * due to selfdestructs or Native transfers to the pre-computed contract address before deployment.\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyNativeTransfer(address to, uint256 amount) external onlyOwner {\n    _safeTransferNative(to, amount);\n  }\n\n  /**\n   * @dev Get WrappedToken address used by WrappedTokenGateway\n   */\n  function getWrappedTokenAddress() external view returns (address) {\n    return address(wrappedToken);\n  }\n\n  /**\n   * @dev Get WrappedToken pool address used by WrappedTokenGateway\n   */\n  function getPoolAddress() external view returns (address) {\n    return address(pool);\n  }\n\n  /**\n   * @dev Only WrappedToken contract is allowed to transfer native token here. Prevent other addresses to send native token to this contract.\n   */\n  receive() external payable {\n    require(msg.sender == address(wrappedToken), 'Receive not allowed');\n  }\n\n  /**\n   * @dev Revert fallback calls\n   */\n  fallback() external payable {\n    revert('Fallback not allowed');\n  }\n}\n"
    },
    "contracts/permissions/Pausable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\n\npragma solidity 0.8.20;\n\nimport '../interfaces/IPausable.sol';\nimport '../helpers/Errors.sol';\n\n/**\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\n * 2) update the paused state to this new value\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\n */\ncontract Pausable is IPausable {\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\n  IPauserRegistry public pauserRegistry;\n\n  /// @dev whether or not the contract is currently paused\n  uint256 private _paused;\n\n  uint256 internal constant UNPAUSE_ALL = 0;\n  uint256 internal constant PAUSE_ALL = type(uint256).max;\n\n  /// @notice\n  modifier onlyPauser() {\n    require(pauserRegistry.isPauser(msg.sender), Errors.NOT_PAUSER);\n    _;\n  }\n\n  modifier onlyUnpauser() {\n    require(msg.sender == pauserRegistry.unpauser(), Errors.NOT_UNPAUSER);\n    _;\n  }\n\n  /// @notice Throws if the contract is paused, i.e. if any of the bits in `_paused` is flipped to 1.\n  modifier whenNotPaused() {\n    require(_paused == 0, Errors.CONTRACT_PAUSED);\n    _;\n  }\n\n  /// @notice Throws if the `indexed`th bit of `_paused` is 1, i.e. if the `index`th pause switch is flipped.\n  modifier onlyWhenNotPaused(uint8 index) {\n    require(!paused(index), Errors.INDEX_PAUSED);\n    _;\n  }\n\n  /// @notice One-time function for setting the `pauserRegistry` and initializing the value of `_paused`.\n  function _initializePauser(IPauserRegistry _pauserRegistry, uint256 initPausedStatus) internal {\n    require(address(pauserRegistry) == address(0) && address(_pauserRegistry) != address(0), Errors.INITIALIZE_ONCE);\n    _paused = initPausedStatus;\n    emit Paused(msg.sender, initPausedStatus);\n    _setPauserRegistry(_pauserRegistry);\n  }\n\n  /**\n   * @notice This function is used to pause an BinLayer contract's functionality.\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\n   */\n  function pause(uint256 newPausedStatus) external onlyPauser {\n    // verify that the `newPausedStatus` does not *unflip* any bits (i.e. doesn't unpause anything, all 1 bits remain)\n    require((_paused & newPausedStatus) == _paused, Errors.INVALID_UNPAUSE);\n    _paused = newPausedStatus;\n    emit Paused(msg.sender, newPausedStatus);\n  }\n\n  /**\n   * @notice Alias for `pause(type(uint256).max)`.\n   */\n  function pauseAll() external onlyPauser {\n    _paused = type(uint256).max;\n    emit Paused(msg.sender, type(uint256).max);\n  }\n\n  /**\n   * @notice This function is used to unpause an BinLayer contract's functionality.\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\n   */\n  function unpause(uint256 newPausedStatus) external onlyUnpauser {\n    // verify that the `newPausedStatus` does not *flip* any bits (i.e. doesn't pause anything, all 0 bits remain)\n    require(((~_paused) & (~newPausedStatus)) == (~_paused), Errors.INVALID_PAUSE);\n    _paused = newPausedStatus;\n    emit Unpaused(msg.sender, newPausedStatus);\n  }\n\n  /// @notice Returns the current paused status as a uint256.\n  function paused() public view virtual returns (uint256) {\n    return _paused;\n  }\n\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\n  function paused(uint8 index) public view virtual returns (bool) {\n    uint256 mask = 1 << index;\n    return ((_paused & mask) == mask);\n  }\n\n  /// @notice Allows the unpauser to set a new pauser registry\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external onlyUnpauser {\n    _setPauserRegistry(newPauserRegistry);\n  }\n\n  /// internal function for setting pauser registry\n  function _setPauserRegistry(IPauserRegistry newPauserRegistry) internal {\n    require(address(newPauserRegistry) != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n    emit PauserRegistrySet(pauserRegistry, newPauserRegistry);\n    pauserRegistry = newPauserRegistry;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/pools/PoolBase.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IPoolController.sol';\nimport '../permissions/Pausable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol';\n\n/**\n * @title Base implementation of `IPool` interface, designed to be inherited from by more complex strategies.\n * @notice Simple, basic, \"do-nothing\" Pool that holds a single underlying token and returns it on withdrawals.\n * Implements minimal versions of the IPool functions, this contract is designed to be inherited by\n * more complex strategies, which can then override its functions as necessary.\n * @dev Note that some functions have their mutability restricted; developers inheriting from this contract cannot broaden\n * the mutability without modifying this contract itself.\n * @dev This contract is expressly *not* intended for use with 'fee-on-transfer'-type tokens.\n * Setting the `underlyingToken` to be a fee-on-transfer token may result in improper accounting.\n * @notice This contract functions similarly to an ERC4626 vault, only without issuing a token.\n * To mitigate against the common \"inflation attack\" vector, we have chosen to use the 'virtual shares' mitigation route,\n * similar to [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC4626.sol).\n * We acknowledge that this mitigation has the known downside of the virtual shares causing some losses to users, which are pronounced\n * particularly in the case of the share exchange rate changing signficantly, either positively or negatively.\n * For a fairly thorough discussion of this issue and our chosen mitigation pool, we recommend reading through\n * [this thread](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706) on the OpenZeppelin repo.\n * We specifically use a share offset of `SHARES_OFFSET` and a balance offset of `BALANCE_OFFSET`.\n */\ncontract PoolBase is Initializable, Pausable, IPool {\n  using SafeERC20 for IERC20;\n\n  uint8 internal constant PAUSED_DEPOSITS = 0;\n  uint8 internal constant PAUSED_WITHDRAWALS = 1;\n\n  /**\n   * @notice virtual shares used as part of the mitigation of the common 'share inflation' attack vector.\n   * Constant value chosen to reasonably reduce attempted share inflation by the first depositor, while still\n   * incurring reasonably small losses to depositors\n   */\n  uint256 internal constant SHARES_OFFSET = 1e3;\n  /**\n   * @notice virtual balance used as part of the mitigation of the common 'share inflation' attack vector\n   * Constant value chosen to reasonably reduce attempted share inflation by the first depositor, while still\n   * incurring reasonably small losses to depositors\n   */\n  uint256 internal constant BALANCE_OFFSET = 1e3;\n\n  /// @notice BinLayer's PoolController.sol contract\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n  IPoolController public immutable poolController;\n\n  /// @notice The underlying token for shares in this Pool\n  IERC20 public underlyingToken;\n\n  /// @notice The total number of extant shares in this Pool\n  uint256 public totalShares;\n\n  /// @notice Simply checks that the `msg.sender` is the `poolController`, which is an address stored immutably at construction.\n  modifier onlyPoolController() {\n    require(msg.sender == address(poolController), Errors.ONLY_POOL_CONTROLLER);\n    _;\n  }\n\n  /// @notice Since this contract is designed to be initializable, the constructor simply sets `poolController`, the only immutable variable.\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor(IPoolController _poolController) {\n    poolController = _poolController;\n    _disableInitializers();\n  }\n\n  function initializeBase(IERC20 _underlyingToken, IPauserRegistry _pauserRegistry) public virtual initializer {\n    _initializePoolBase(_underlyingToken, _pauserRegistry);\n  }\n\n  /// @notice Sets the `underlyingToken` and `pauserRegistry` for the pool.\n  function _initializePoolBase(IERC20 _underlyingToken, IPauserRegistry _pauserRegistry) internal onlyInitializing {\n    underlyingToken = _underlyingToken;\n    _initializePauser(_pauserRegistry, UNPAUSE_ALL);\n  }\n\n  /**\n   * @notice Used to deposit tokens into this Pool\n   * @param token is the ERC20 token being deposited\n   * @param amount is the amount of token being deposited\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\n   * `depositIntoPool` function, and individual share balances are recorded in the poolController as well.\n   * @dev Note that the assumption is made that `amount` of `token` has already been transferred directly to this contract\n   * (as performed in the PoolController.sol's deposit functions). In particular, setting the `underlyingToken` of this contract\n   * to be a fee-on-transfer token will break the assumption that the amount this contract *received* of the token is equal to\n   * the amount that was input when the transfer was performed (i.e. the amount transferred 'out' of the depositor's balance).\n   * @dev Note that any validation of `token` is done inside `_beforeDeposit`. This can be overridden if needed.\n   * @return newShares is the number of new shares issued at the current exchange ratio.\n   */\n  function deposit(\n    IERC20 token,\n    uint256 amount\n  ) external virtual override onlyWhenNotPaused(PAUSED_DEPOSITS) onlyPoolController returns (uint256 newShares) {\n    // call hook to allow for any pre-deposit logic\n    _beforeDeposit(token, amount);\n\n    // copy `totalShares` value to memory, prior to any change\n    uint256 priorTotalShares = totalShares;\n\n    /**\n     * @notice calculation of newShares *mirrors* `underlyingToShares(amount)`, but is different since the balance of `underlyingToken`\n     * has already been increased due to the `poolController` transferring tokens to this pool prior to calling this function\n     */\n    // account for virtual shares and balance\n    uint256 virtualShareAmount = priorTotalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate the prior virtual balance to account for the tokens that were already transferred to this contract\n    uint256 virtualPriorTokenBalance = virtualTokenBalance - amount;\n    newShares = (amount * virtualShareAmount) / virtualPriorTokenBalance;\n\n    // extra check for correctness / against edge case where share rate can be massively inflated as a 'griefing' sort of attack\n    require(newShares != 0, Errors.ZERO_SHARES_NOT_VALID);\n\n    // update total share amount to account for deposit\n    totalShares = (priorTotalShares + newShares);\n    return newShares;\n  }\n\n  /**\n   * @notice Used to withdraw tokens from this Pool, to the `recipient`'s address\n   * @param recipient is the address to receive the withdrawn funds\n   * @param token is the ERC20 token being transferred out\n   * @param amountShares is the amount of shares being withdrawn\n   * @dev This function is only callable by the poolController contract. It is invoked inside of the poolController's\n   * other functions, and individual share balances are recorded in the poolController as well.\n   * @dev Note that any validation of `token` is done inside `_beforeWithdrawal`. This can be overridden if needed.\n   */\n  function withdraw(\n    address recipient,\n    IERC20 token,\n    uint256 amountShares\n  ) external virtual override onlyWhenNotPaused(PAUSED_WITHDRAWALS) onlyPoolController {\n    // call hook to allow for any pre-withdrawal logic\n    _beforeWithdrawal(recipient, token, amountShares);\n\n    // copy `totalShares` value to memory, prior to any change\n    uint256 priorTotalShares = totalShares;\n\n    require(amountShares <= priorTotalShares, Errors.WITHDRAW_AMOUNT_SHARES_TOO_HIGH);\n\n    // account for virtual shares and balance\n    uint256 virtualPriorTotalShares = priorTotalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\n    uint256 amountToSend = (virtualTokenBalance * amountShares) / virtualPriorTotalShares;\n\n    // Decrease the `totalShares` value to reflect the withdrawal\n    totalShares = priorTotalShares - amountShares;\n\n    _afterWithdrawal(recipient, token, amountToSend);\n  }\n\n  /**\n   * @notice Called in the external `deposit` function, before any logic is executed. Expected to be overridden if strategies want such logic.\n   * @param token The token being deposited\n   * @param amount The amount of `token` being deposited\n   */\n  function _beforeDeposit(IERC20 token, uint256 amount) internal virtual {\n    require(token == underlyingToken, Errors.DEPOSIT_ONLY_UNDERLYING_TOKEN);\n  }\n\n  /**\n   * @notice Called in the external `withdraw` function, before any logic is executed.  Expected to be overridden if strategies want such logic.\n   * @param recipient The address that will receive the withdrawn tokens\n   * @param token The token being withdrawn\n   * @param amountShares The amount of shares being withdrawn\n   */\n  function _beforeWithdrawal(address recipient, IERC20 token, uint256 amountShares) internal virtual {\n    require(token == underlyingToken, Errors.WITHDRAW_ONLY_UNDERLYING_TOKEN);\n  }\n\n  /**\n   * @notice Transfers tokens to the recipient after a withdrawal is processed\n   * @dev Called in the external `withdraw` function after all logic is executed\n   * @param recipient The destination of the tokens\n   * @param token The ERC20 being transferred\n   * @param amountToSend The amount of `token` to transfer\n   */\n  function _afterWithdrawal(address recipient, IERC20 token, uint256 amountToSend) internal virtual {\n    token.safeTransfer(recipient, amountToSend);\n  }\n\n  /**\n   * @notice Currently returns a brief string explaining the pool's goal & purpose, but for more complex\n   * strategies, may be a link to metadata that explains in more detail.\n   */\n  function explanation() external pure virtual override returns (string memory) {\n    return 'Base Pool implementation to inherit from for more complex implementations';\n  }\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlyingView(uint256 amountShares) public view virtual override returns (uint256) {\n    // account for virtual shares and balance\n    uint256 virtualTotalShares = totalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\n    return (virtualTokenBalance * amountShares) / virtualTotalShares;\n  }\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this pool.\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlying(uint256 amountShares) public view virtual override returns (uint256) {\n    return sharesToUnderlyingView(amountShares);\n  }\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToSharesView(uint256 amountUnderlying) public view virtual returns (uint256) {\n    // account for virtual shares and balance\n    uint256 virtualTotalShares = totalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\n    return (amountUnderlying * virtualTotalShares) / virtualTokenBalance;\n  }\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this pool.\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into pool shares\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToShares(uint256 amountUnderlying) external view virtual returns (uint256) {\n    return underlyingToSharesView(amountUnderlying);\n  }\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this pool. In contrast to `userUnderlying`, this function guarantees no state modifications\n   */\n  function userUnderlyingView(address user) external view virtual returns (uint256) {\n    return sharesToUnderlyingView(shares(user));\n  }\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this pool. In contrast to `userUnderlyingView`, this function **may** make state modifications\n   */\n  function userUnderlying(address user) external virtual returns (uint256) {\n    return sharesToUnderlying(shares(user));\n  }\n\n  /**\n   * @notice convenience function for fetching the current total shares of `user` in this pool, by\n   * querying the `poolController` contract\n   */\n  function shares(address user) public view virtual returns (uint256) {\n    return poolController.stakerPoolShares(user, IPool(address(this)));\n  }\n\n  /// @notice Internal function used to fetch this contract's current balance of `underlyingToken`.\n  // slither-disable-next-line dead-code\n  function _tokenBalance() internal view virtual returns (uint256) {\n    return underlyingToken.balanceOf(address(this));\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/pools/PoolBaseTVLLimits.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './PoolBase.sol';\n\n/**\n * @title A Pool implementation inheriting from `PoolBase.sol` that limits the total amount of deposits it will accept.\n * @dev Note that this implementation still converts between any amount of shares or underlying tokens in its view functions;\n * these functions purposefully do not take the TVL limit into account.\n */\ncontract PoolBaseTVLLimits is PoolBase {\n  /// The maximum deposit (in underlyingToken) that this pool will accept per deposit\n  uint256 public maxPerDeposit;\n\n  /// The maximum deposits (in underlyingToken) that this pool will hold\n  uint256 public maxTotalDeposits;\n\n  /// @notice Emitted when `maxPerDeposit` value is updated from `previousValue` to `newValue`\n  event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue);\n\n  /// @notice Emitted when `maxTotalDeposits` value is updated from `previousValue` to `newValue`\n  event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue);\n\n  /// solhint-disable-next-line no-empty-blocks\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor(IPoolController _poolController) PoolBase(_poolController) {}\n\n  function initialize(\n    uint256 _maxPerDeposit,\n    uint256 _maxTotalDeposits,\n    IERC20 _underlyingToken,\n    IPauserRegistry _pauserRegistry\n  ) public virtual initializer {\n    _setTVLLimits(_maxPerDeposit, _maxTotalDeposits);\n    _initializePoolBase(_underlyingToken, _pauserRegistry);\n  }\n\n  /**\n   * @notice Sets the maximum deposits (in underlyingToken) that this pool will hold and accept per deposit\n   * @param newMaxTotalDeposits The new maximum deposits\n   * @dev Callable only by the unpauser of this contract\n   * @dev We note that there is a potential race condition between a call to this function that lowers either or both of these limits and call(s)\n   * to `deposit`, that may result in some calls to `deposit` reverting.\n   */\n  function setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) external onlyUnpauser {\n    _setTVLLimits(newMaxPerDeposit, newMaxTotalDeposits);\n  }\n\n  /// @notice Simple getter function that returns the current values of `maxPerDeposit` and `maxTotalDeposits`.\n  function getTVLLimits() external view returns (uint256, uint256) {\n    return (maxPerDeposit, maxTotalDeposits);\n  }\n\n  /// @notice Internal setter for TVL limits\n  function _setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) internal {\n    emit MaxPerDepositUpdated(maxPerDeposit, newMaxPerDeposit);\n    emit MaxTotalDepositsUpdated(maxTotalDeposits, newMaxTotalDeposits);\n    require(newMaxPerDeposit <= newMaxTotalDeposits, Errors.MAX_PER_DEPOSIT_EXCEEDS_MAX_TOTAL);\n    maxPerDeposit = newMaxPerDeposit;\n    maxTotalDeposits = newMaxTotalDeposits;\n  }\n\n  /**\n   * @notice Called in the external `deposit` function, before any logic is executed. Makes sure that deposits don't exceed configured maximum.\n   * @dev Unused token param is the token being deposited. This is already checked in the `deposit` function.\n   * @dev Note that the `maxTotalDeposits` is purely checked against the current `_tokenBalance()`, since by this point in the deposit flow, the\n   * tokens should have already been transferred to this Pool by the PoolController.sol\n   * @dev We note as well that this makes it possible for various race conditions to occur:\n   * a) multiple simultaneous calls to `deposit` may result in some of these calls reverting due to `maxTotalDeposits` being reached.\n   * b) transferring funds directly to this Pool (although not generally in someone's economic self interest) in order to reach `maxTotalDeposits`\n   * is a route by which someone can cause calls to `deposit` to revert.\n   * c) increases in the token balance of this contract through other effects – including token rebasing – may cause similar issues to (a) and (b).\n   * @param amount The amount of `token` being deposited\n   */\n  function _beforeDeposit(IERC20 token, uint256 amount) internal virtual override {\n    require(amount <= maxPerDeposit, Errors.MAX_PER_DEPOSIT_LIMIT_EXCEEDED);\n    require(_tokenBalance() <= maxTotalDeposits, Errors.MAX_DEPOSITS_EXCEEDED);\n\n    super._beforeDeposit(token, amount);\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1500
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}