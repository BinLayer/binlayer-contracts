{
  "address": "0xB12699f228cE32f74DCd46b5265D16B9e1B25DfD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IStrategy",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "contract IStrategyManager",
          "name": "_strategyManager",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationManager",
          "name": "_delegationManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "depositNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyNativeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWrappedTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegatedTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IStrategy[]",
              "name": "strategies",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDelegationManager.Withdrawal[]",
          "name": "withdrawals",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[][]",
          "name": "tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "middlewareTimesIndexs",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "receiveAsTokens",
          "type": "bool[]"
        }
      ],
      "name": "withdrawNativeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeda6497cc5ba4ad516682ca6ebb5defcdb60d19a50493939474795d0fb54c88b",
  "receipt": {
    "to": null,
    "from": "0x1Ee532cf775be02E0B306571e3555321FC75988d",
    "contractAddress": "0xB12699f228cE32f74DCd46b5265D16B9e1B25DfD",
    "transactionIndex": 3,
    "gasUsed": "1240087",
    "logsBloom": "0x
    "blockHash": "0x2465cc6ae38b8469c16f873b8a56f8893ac0af09818239c3a72aa0e289e46a84",
    "transactionHash": "0xeda6497cc5ba4ad516682ca6ebb5defcdb60d19a50493939474795d0fb54c88b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40803883,
        "transactionHash": "0xeda6497cc5ba4ad516682ca6ebb5defcdb60d19a50493939474795d0fb54c88b",
        "address": "0xB12699f228cE32f74DCd46b5265D16B9e1B25DfD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x2465cc6ae38b8469c16f873b8a56f8893ac0af09818239c3a72aa0e289e46a84"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40803883,
        "transactionHash": "0xeda6497cc5ba4ad516682ca6ebb5defcdb60d19a50493939474795d0fb54c88b",
        "address": "0xB12699f228cE32f74DCd46b5265D16B9e1B25DfD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d",
          "0x0000000000000000000000008f2cfed2bac25d698bc66be1e67d6a96deedca76"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x2465cc6ae38b8469c16f873b8a56f8893ac0af09818239c3a72aa0e289e46a84"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40803883,
        "transactionHash": "0xeda6497cc5ba4ad516682ca6ebb5defcdb60d19a50493939474795d0fb54c88b",
        "address": "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b12699f228ce32f74dcd46b5265d16b9e1b25dfd",
          "0x000000000000000000000000d914b20bcfcdbb396697a957fc28a77947593be5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 33,
        "blockHash": "0x2465cc6ae38b8469c16f873b8a56f8893ac0af09818239c3a72aa0e289e46a84"
      }
    ],
    "blockNumber": 40803883,
    "cumulativeGasUsed": "3069590",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
    "0x8F2CfED2bac25D698bC66BE1E67d6A96DEEDca76",
    "0xE72A7b6bf9bEAA55449986e402329c262954a675",
    "0xd914b20BcFcdBb396697a957fc28a77947593bE5",
    "0xcC4b428124C226c87872d0932b7549DA0531e364"
  ],
  "numDeployments": 1,
  "solcInputHash": "73a843c7df9a0737c5f562139718a87a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyManager\",\"name\":\"_strategyManager\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationManager\",\"name\":\"_delegationManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"depositNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyNativeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManager.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"middlewareTimesIndexs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"receiveAsTokens\",\"type\":\"bool[]\"}],\"name\":\"withdrawNativeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyNativeTransfer(address,uint256)\":{\"details\":\"transfer native token from the utility contract, for native token recovery in case of stuck native due to selfdestructs or Native transfers to the pre-computed contract address before deployment.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\"}},\"emergencyTokenTransfer(address,address,uint256)\":{\"details\":\"transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\",\"token\":\"token to transfer\"}},\"getStrategyAddress()\":{\"details\":\"Get WrappedToken strategy address used by WrappedTokenGateway\"},\"getWrappedTokenAddress()\":{\"details\":\"Get WrappedToken address used by WrappedTokenGateway\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/WrappedTokenGateway.sol\":\"WrappedTokenGateway\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IStrategy.sol';\\nimport './ISignatureUtils.sol';\\nimport './IStrategyManager.sol';\\n\\n/**\\n * @title DelegationManager\\n * @notice  This is the contract for delegation in BinLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in BinLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager is ISignatureUtils {\\n  // @notice Struct used for storing information about a single operator who has registered with BinLayer\\n  struct OperatorDetails {\\n    // @notice address to receive the rewards that the operator earns via serving applications built on BinLayer.\\n    address earningsReceiver;\\n    /**\\n     * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n     * @dev Signature verification follows these rules:\\n     * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n     * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n     * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n     */\\n    address delegationApprover;\\n    /**\\n     * @notice A minimum delay -- enforced between:\\n     * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n     * and\\n     * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n     * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n     * then they are only allowed to either increase this value or keep it the same.\\n     */\\n    uint32 stakerOptOutWindow;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n   * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n   */\\n  struct StakerDelegation {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the staker's nonce\\n    uint256 nonce;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n   * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n   */\\n  struct DelegationApproval {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the operator's provided salt\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n   * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\\n   * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n   */\\n  struct Withdrawal {\\n    // The address that originated the Withdrawal\\n    address staker;\\n    // The address that the staker was delegated to at the time that the Withdrawal was created\\n    address delegatedTo;\\n    // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n    address withdrawer;\\n    // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n    uint256 nonce;\\n    // Block timestamp when the Withdrawal was created\\n    uint32 startTimestamp;\\n    // Array of strategies that the Withdrawal contains\\n    IStrategy[] strategies;\\n    // Array containing the amount of shares in each Strategy in the `strategies` array\\n    uint256[] shares;\\n  }\\n\\n  struct QueuedWithdrawalParams {\\n    // Array of strategies that the QueuedWithdrawal contains\\n    IStrategy[] strategies;\\n    // Array containing the amount of shares in each Strategy in the `strategies` array\\n    uint256[] shares;\\n    // The address of the withdrawer\\n    address withdrawer;\\n  }\\n\\n  // @notice Emitted when a new operator registers in BinLayer and provides their OperatorDetails.\\n  event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\\n\\n  /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n  event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\\n\\n  /**\\n   * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n   */\\n  event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\\n\\n  /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n  /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n  /// @notice Emitted when @param staker delegates to @param operator.\\n  event StakerDelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker undelegates from @param operator.\\n  event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n  event StakerForceUndelegated(address indexed staker, address indexed operator);\\n\\n  /**\\n   * @notice Emitted when a new withdrawal is queued.\\n   * @param withdrawalRoot Is the hash of the `withdrawal`.\\n   * @param withdrawal Is the withdrawal itself.\\n   */\\n  event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n  /// @notice Emitted when a queued withdrawal is completed\\n  event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n  /// @notice Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event MinWithdrawalDelaySet(uint256 previousValue, uint256 newValue);\\n\\n  /// @notice Emitted when the `strategyWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event StrategyWithdrawalDelaySet(IStrategy strategy, uint256 previousValue, uint256 newValue);\\n\\n  event UpdateWrappedTokenGateway(address previousGateway, address currentGateway);\\n\\n  /**\\n   * @notice Registers the caller as an operator in BinLayer.\\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n   *\\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Updates an operator's stored `OperatorDetails`.\\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n   *\\n   * @dev The caller must have previously registered as an operator in BinLayer.\\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n   */\\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\\n\\n  /**\\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n   * @param metadataURI The URI for metadata associated with an operator\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Caller delegates their stake to an operator.\\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n   * @param approverSalt A unique single use value tied to an individual signature.\\n   * @dev The approverSignatureAndExpiry is used in the event that:\\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n   *                  AND\\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external;\\n\\n  /**\\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n   * @param staker The account delegating stake to an `operator` account\\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on BinLayer.\\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n   *\\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n   * is the `msg.sender`, then approval is assumed.\\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateToBySignature(\\n    address staker,\\n    address operator,\\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\\n    SignatureWithExpiry memory approverSignatureAndExpiry,\\n    bytes32 approverSalt\\n  ) external;\\n\\n  /**\\n   * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager\\n   * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\\n   * @param staker The account to be undelegated.\\n   * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n   *\\n   * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n   * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n   * @dev Reverts if the `staker` is already undelegated.\\n   */\\n  function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\\n\\n  /**\\n   * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\\n   * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\\n   * their operator.\\n   *\\n   * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\\n   */\\n  function queueWithdrawals(QueuedWithdrawalParams[] calldata queuedWithdrawalParams) external returns (bytes32[] memory);\\n\\n  /**\\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n   * @param withdrawal The Withdrawal to complete.\\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\\n   * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n   * will simply be transferred to the caller directly.\\n   * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n   * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n   * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n   * any other strategies, which will be transferred to the withdrawer.\\n   */\\n  function completeQueuedWithdrawal(\\n    Withdrawal calldata withdrawal,\\n    IERC20[] calldata tokens,\\n    uint256 middlewareTimesIndex,\\n    bool receiveAsTokens\\n  ) external;\\n\\n  /**\\n   * @notice Array-ified version of `completeQueuedWithdrawal`.\\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n   * @param withdrawals The Withdrawals to complete.\\n   * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\\n   * @dev See `completeQueuedWithdrawal` for relevant dev tags\\n   */\\n  function completeQueuedWithdrawals(\\n    Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexes,\\n    bool[] calldata receiveAsTokens\\n  ) external;\\n\\n  /**\\n   * @notice Increases a staker's delegated share balance in a strategy.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param strategy The strategy in which to increase the delegated shares.\\n   * @param shares The number of shares to increase.\\n   *\\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the StrategyManager or EigenPodManager.\\n   */\\n  function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n  /**\\n   * @notice Decreases a staker's delegated share balance in a strategy.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param strategy The strategy in which to decrease the delegated shares.\\n   * @param shares The number of shares to decrease.\\n   *\\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the StrategyManager or EigenPodManager.\\n   */\\n  function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n  /**\\n   * @notice returns the address of the operator that `staker` is delegated to.\\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n   */\\n  function delegatedTo(address staker) external view returns (address);\\n\\n  /**\\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\\n   */\\n  function operatorDetails(address operator) external view returns (OperatorDetails memory);\\n\\n  /*\\n   * @notice Returns the earnings receiver address for an operator\\n   */\\n  function earningsReceiver(address operator) external view returns (address);\\n\\n  /**\\n   * @notice Returns the delegationApprover account for an operator\\n   */\\n  function delegationApprover(address operator) external view returns (address);\\n\\n  /**\\n   * @notice Returns the stakerOptOutWindow for an operator\\n   */\\n  function stakerOptOutWindow(address operator) external view returns (uint256);\\n\\n  /**\\n   * @notice Given array of strategies, returns array of shares for the operator\\n   */\\n  function getOperatorShares(address operator, IStrategy[] memory strategies) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Given a list of strategies, return the minimum cooldown that must pass to withdraw\\n   * from all the inputted strategies. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\\n   * @param strategies The strategies to check withdrawal delays for\\n   */\\n  function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n   * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\\n   * @dev By design, the following invariant should hold for each Strategy:\\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n   * = sum (delegateable shares of all stakers delegated to the operator)\\n   */\\n  function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n   */\\n  function isDelegated(address staker) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true is an operator has previously registered for delegation.\\n   */\\n  function isOperator(address operator) external view returns (bool);\\n\\n  /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n  function stakerNonce(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n   */\\n  function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum cooldown that must pass\\n   * to withdraw a strategy is MAX(minWithdrawalDelay, strategyWithdrawalDelay[strategy])\\n   */\\n  function minWithdrawalDelay() external view returns (uint256);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   */\\n  function strategyWithdrawalDelay(IStrategy strategy) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n   * @param staker The signing staker\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n   * @param staker The signing staker\\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateStakerDelegationDigestHash(\\n    address staker,\\n    uint256 _stakerNonce,\\n    address operator,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n   * @param staker The account delegating their stake\\n   * @param operator The account receiving delegated stake\\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n   * @param approverSalt A unique and single use value associated with the approver signature.\\n   * @param expiry Time after which the approver's signature becomes invalid\\n   */\\n  function calculateDelegationApprovalDigestHash(\\n    address staker,\\n    address operator,\\n    address _delegationApprover,\\n    bytes32 approverSalt,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n  function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n  function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\\n   *\\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n   * for more detailed information please read EIP-712.\\n   */\\n  function domainSeparator() external view returns (bytes32);\\n\\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n  function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\\n\\n  /// @notice Returns the keccak256 hash of `withdrawal`.\\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x060f42bdc248bba590745270397adb9805777f8c6d134ca88a4280da5b0e715a\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title The interface for common signature utilities.\\n */\\ninterface ISignatureUtils {\\n  // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithSaltAndExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the salt used to generate the signature\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n}\\n\",\"keccak256\":\"0xd2f901c14d08037588427527905fafbe1610b68a38d62c93925ea0f258f226a4\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISlasher.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IStrategyManager.sol';\\nimport './IDelegationManager.sol';\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for BinLayer.\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n  // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n  struct MiddlewareTimes {\\n    // The update timestamp for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n    uint32 stalestUpdateTimestamp;\\n    // The latest 'serveUntilTimestamp' from all of the middleware that the operator is serving\\n    uint32 latestServeUntilTimestamp;\\n  }\\n\\n  // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n  struct MiddlewareDetails {\\n    // the timestamp at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n    uint32 registrationMayBeginAtTimestamp;\\n    // the timestamp before which the contract is allowed to slash the user\\n    uint32 contractCanSlashOperatorUntilTimestamp;\\n    // the timestamp at which the middleware's view of the operator's stake was most recently updated\\n    uint32 latestUpdateTimestamp;\\n  }\\n\\n  /// @notice Emitted when a middleware times is added to `operator`'s array.\\n  event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateTimestamp, uint32 latestServeUntilTimestamp);\\n\\n  /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n  event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n\\n  /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilTimestamp`.\\n  event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilTimestamp);\\n\\n  /**\\n   * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n   * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n   */\\n  event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\\n\\n  /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within BinLayer.\\n  event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n  /**\\n   * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n   * @dev Typically, this function must be called prior to registering for a middleware.\\n   */\\n  function optIntoSlashing(address contractAddress) external;\\n\\n  /**\\n   * @notice Used for 'slashing' a certain operator.\\n   * @param toBeFrozen The operator to be frozen.\\n   * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n   * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n   */\\n  function freezeOperator(address toBeFrozen) external;\\n\\n  /**\\n   * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n   * @dev Callable only by the contract owner (i.e. governance).\\n   */\\n  function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev adds the middleware's slashing contract to the operator's linked list\\n   */\\n  function recordFirstStakeUpdate(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n   *         to make sure the operator's stake at updateTimestamp is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param updateTimestamp the timestamp for which the stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at updateTimestamp is slashable\\n   * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n   * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n   *      but it is anticipated to be rare and not detrimental.\\n   */\\n  function recordStakeUpdate(address operator, uint32 updateTimestamp, uint32 serveUntilTimestamp, uint256 insertAfter) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n   * slash `operator` once `serveUntil` is reached\\n   */\\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /// @notice The StrategyManager contract of BinLayer\\n  function strategyManager() external view returns (IStrategyManager);\\n\\n  /// @notice The DelegationManager contract of BinLayer\\n  function delegation() external view returns (IDelegationManager);\\n\\n  /**\\n   * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n   * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n   * and the staker's status is reset (to 'unfrozen').\\n   * @param staker The staker of interest.\\n   * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n   * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n   */\\n  function isFrozen(address staker) external view returns (bool);\\n\\n  /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n  function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n  /// @notice Returns the timestamp until which `serviceContract` is allowed to slash the `operator`.\\n  function contractCanSlashOperatorUntilTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice Returns the timestamp at which the `serviceContract` last updated its view of the `operator`'s stake\\n  function latestUpdateTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n  function getCorrectValueForInsertAfter(address operator, uint32 updateTimestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartTimestamp`, with `middlewareTimesIndex` used\\n   * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n   * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n   * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartTimestamp`, *or* in the event\\n   * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n   * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n   * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartTimestamp`.\\n   * @param withdrawalStartTimestamp The timestamp at which the withdrawal was initiated.\\n   * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n   * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n   */\\n  function canWithdraw(address operator, uint32 withdrawalStartTimestamp, uint256 middlewareTimesIndex) external returns (bool);\\n\\n  /**\\n   * operator =>\\n   *  [\\n   *      (\\n   *          the least recent update timestamp of all of the middlewares it's serving/served,\\n   *          latest time that the stake bonded at that update needed to serve until\\n   *      )\\n   *  ]\\n   */\\n  function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) external view returns (MiddlewareTimes memory);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n  function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateTimestamp`.\\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n  function getMiddlewareTimesIndexServeUntilTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n  function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n  function operatorWhitelistedContractsLinkedListEntry(address operator, address node) external view returns (bool, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xf4d05322d31de185a4f3761538375a9461dc15c4a37582e0a1cbf1ed07105594\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n  /**\\n   * @notice Used to deposit tokens into this Strategy\\n   * @param token is the ERC20 token being deposited\\n   * @param amount is the amount of token being deposited\\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n   * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n   * @return newShares is the number of new shares issued at the current exchange ratio.\\n   */\\n  function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\\n   * @param recipient is the address to receive the withdrawn funds\\n   * @param token is the ERC20 token being transferred out\\n   * @param amountShares is the amount of shares being withdrawn\\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n   * other functions, and individual share balances are recorded in the strategyManager as well.\\n   */\\n  function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n   */\\n  function userUnderlying(address user) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n   * querying the `strategyManager` contract\\n   */\\n  function shares(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n   */\\n  function userUnderlyingView(address user) external view returns (uint256);\\n\\n  /// @notice The underlying token for shares in this Strategy\\n  function underlyingToken() external view returns (IERC20);\\n\\n  /// @notice The total number of extant shares in this Strategy\\n  function totalShares() external view returns (uint256);\\n\\n  /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n  function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3435d819a62bf13c8f41498f27fb2117adb2095890b75b86005af1ed238a78bb\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IStrategy.sol';\\nimport './ISlasher.sol';\\nimport './IDelegationManager.sol';\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into BinLayer.\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n  /**\\n   * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n   * @param staker Is the staker who is depositing funds into BinLayer.\\n   * @param strategy Is the strategy that `staker` has deposited into.\\n   * @param token Is the token that `staker` deposited.\\n   * @param shares Is the number of new shares `staker` has been granted in `strategy`.\\n   */\\n  event Deposit(address staker, IERC20 token, IStrategy strategy, uint256 shares);\\n\\n  /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\\n  event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\\n\\n  /// @notice Emitted when the `strategyWhitelister` is changed\\n  event StrategyWhitelisterChanged(address previousAddress, address newAddress);\\n\\n  /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\\n  event StrategyAddedToDepositWhitelist(IStrategy strategy);\\n\\n  /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\\n  event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\\n\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n   * @param strategy is the specified strategy where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the strategy by the staker\\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `staker`\\n   * @param staker Staker address\\n   * @param strategy is the specified strategy where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the strategy by the staker\\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoStrategyWithStaker(\\n    address staker,\\n    IStrategy strategy,\\n    IERC20 token,\\n    uint256 amount\\n  ) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n   * who must sign off on the action.\\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n   * purely to help one address deposit 'for' another.\\n   * @param strategy is the specified strategy where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the strategy by the staker\\n   * @param staker the staker that the deposited assets will be credited to\\n   * @param expiry the timestamp at which the signature expires\\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n   * following EIP-1271 if the `staker` is a contract\\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n   * targeting stakers who may be attempting to undelegate.\\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\\n   *\\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n   */\\n  function depositIntoStrategyWithSignature(\\n    IStrategy strategy,\\n    IERC20 token,\\n    uint256 amount,\\n    address staker,\\n    uint256 expiry,\\n    bytes memory signature\\n  ) external returns (uint256 shares);\\n\\n  /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\\n  function removeShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\\n  function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\\n  function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external;\\n\\n  /// @notice Returns the current shares of `user` in `strategy`\\n  function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Get all details on the staker's deposits and corresponding shares\\n   * @return (staker's strategies, shares in these strategies)\\n   */\\n  function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n  /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n  function stakerStrategyListLength(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n   * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\\n   */\\n  function addStrategiesToDepositWhitelist(\\n    IStrategy[] calldata strategiesToWhitelist,\\n    bool[] calldata thirdPartyTransfersForbiddenValues\\n  ) external;\\n\\n  /**\\n   * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n   * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n   */\\n  function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\\n\\n  /// @notice Returns the single, central Delegation contract of BinLayer\\n  function delegation() external view returns (IDelegationManager);\\n\\n  /// @notice Returns the single, central Slasher contract of BinLayer\\n  function slasher() external view returns (ISlasher);\\n\\n  /// @notice Returns the address of the `strategyWhitelister`\\n  function strategyWhitelister() external view returns (address);\\n\\n  /**\\n   * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\\n   * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\\n   */\\n  function thirdPartyTransfersForbidden(IStrategy strategy) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5c8847f82df9b922c73085e105fd62e461e72b4b0ed344776dd81c732d1137ad\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IWrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.20;\\n\\ninterface IWrappedToken {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb6fa6ac6816f5cdead583c8a34c6fc7a2f11300ff6c40a4b84ec0e30929841e7\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IWrappedTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\\n\\ninterface IWrappedTokenGateway {\\n  function depositNativeToken(address staker) external payable;\\n\\n  function withdrawNativeTokens(\\n    IDelegationManager.Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexs,\\n    bool[] calldata receiveAsTokens\\n  ) external;\\n}\\n\",\"keccak256\":\"0x30ea8b09e286962c1075dc00e12b5caddd796f0c274a6aa611cae0b51970a72b\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/WrappedTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IWrappedToken} from '../interfaces/IWrappedToken.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IStrategyManager} from '../interfaces/IStrategyManager.sol';\\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\\nimport {IWrappedTokenGateway} from '../interfaces/IWrappedTokenGateway.sol';\\n\\ncontract WrappedTokenGateway is IWrappedTokenGateway, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  IWrappedToken internal immutable wrappedToken;\\n  IStrategy internal immutable strategy;\\n  IStrategyManager internal immutable strategyManager;\\n  IDelegationManager internal immutable delegationManager;\\n\\n  constructor(\\n    address _wrappedToken,\\n    address _owner,\\n    IStrategy _strategy,\\n    IStrategyManager _strategyManager,\\n    IDelegationManager _delegationManager\\n  ) {\\n    wrappedToken = IWrappedToken(_wrappedToken);\\n    strategy = _strategy;\\n    strategyManager = _strategyManager;\\n    delegationManager = _delegationManager;\\n    transferOwnership(_owner);\\n    IWrappedToken(_wrappedToken).approve(address(strategyManager), type(uint256).max);\\n  }\\n\\n  function depositNativeToken(address staker) external payable {\\n    wrappedToken.deposit{value: msg.value}();\\n    strategyManager.depositIntoStrategyWithStaker(staker, strategy, IERC20(address(wrappedToken)), msg.value);\\n  }\\n\\n  function withdrawNativeTokens(\\n    IDelegationManager.Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexs,\\n    bool[] calldata receiveAsTokens\\n  ) external {\\n    for (uint256 i = 0; i < withdrawals.length; i++) {\\n      require(withdrawals[i].staker == msg.sender, 'Withdrawer must be staker');\\n      for (uint256 j = 0; j < withdrawals[i].strategies.length; j++) {\\n        require(withdrawals[i].strategies[j] == strategy, 'Only support wrapped token strategy');\\n      }\\n    }\\n    uint256 beforeBalance = wrappedToken.balanceOf(address(this));\\n    delegationManager.completeQueuedWithdrawals(withdrawals, tokens, middlewareTimesIndexs, receiveAsTokens);\\n    uint256 afterBalance = wrappedToken.balanceOf(address(this));\\n    uint256 amountToWithdraw = afterBalance - beforeBalance;\\n    wrappedToken.withdraw(amountToWithdraw);\\n    _safeTransferNative(msg.sender, amountToWithdraw);\\n  }\\n\\n  /**\\n   * @dev transfer Native to an address, revert if it fails.\\n   * @param to recipient of the transfer\\n   * @param value the amount to send\\n   */\\n  function _safeTransferNative(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, 'NATIVE_TRANSFER_FAILED');\\n  }\\n\\n  /**\\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n   * direct transfers to the contract address.\\n   * @param token token to transfer\\n   * @param to recipient of the transfer\\n   * @param amount amount to send\\n   */\\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\\n    IERC20(token).safeTransfer(to, amount);\\n  }\\n\\n  /**\\n   * @dev transfer native token from the utility contract, for native token recovery in case of stuck native\\n   * due to selfdestructs or Native transfers to the pre-computed contract address before deployment.\\n   * @param to recipient of the transfer\\n   * @param amount amount to send\\n   */\\n  function emergencyNativeTransfer(address to, uint256 amount) external onlyOwner {\\n    _safeTransferNative(to, amount);\\n  }\\n\\n  /**\\n   * @dev Get WrappedToken address used by WrappedTokenGateway\\n   */\\n  function getWrappedTokenAddress() external view returns (address) {\\n    return address(wrappedToken);\\n  }\\n\\n  /**\\n   * @dev Get WrappedToken strategy address used by WrappedTokenGateway\\n   */\\n  function getStrategyAddress() external view returns (address) {\\n    return address(strategy);\\n  }\\n\\n  /**\\n   * @dev Only WrappedToken contract is allowed to transfer native token here. Prevent other addresses to send native token to this contract.\\n   */\\n  receive() external payable {\\n    require(msg.sender == address(wrappedToken), 'Receive not allowed');\\n  }\\n\\n  /**\\n   * @dev Revert fallback calls\\n   */\\n  fallback() external payable {\\n    revert('Fallback not allowed');\\n  }\\n}\\n\",\"keccak256\":\"0xa549716ad445b5446721f3a3c5ae408be98dd0f2947ddcc831921c25e73daec3\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620017b2380380620017b2833981016040819052620000359162000238565b6200004033620000f1565b6001600160a01b0380861660805283811660a05282811660c052811660e0526200006a8462000141565b60c05160405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529086169063095ea7b3906044016020604051808303816000875af1158015620000bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e59190620002b8565b505050505050620002e3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200014b620001c4565b6001600160a01b038116620001b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001c181620000f1565b50565b6000546001600160a01b03163314620002205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001ad565b565b6001600160a01b0381168114620001c157600080fd5b600080600080600060a086880312156200025157600080fd5b85516200025e8162000222565b6020870151909550620002718162000222565b6040870151909450620002848162000222565b6060870151909350620002978162000222565b6080870151909250620002aa8162000222565b809150509295509295909350565b600060208284031215620002cb57600080fd5b81518015158114620002dc57600080fd5b9392505050565b60805160a05160c05160e05161145e620003546000396000610718015260006103bf01526000818161024601528181610369015261053901526000818160aa01528181610195015281816102c20152818161039101528181610672015281816107a40152610858015261145e6000f3fe60806040526004361061009a5760003560e01c80638da5cb5b11610069578063c14f54d71161004e578063c14f54d714610237578063d9d468161461026a578063f2fde38b1461028a5761011e565b80638da5cb5b146101f9578063a3d5b255146102175761011e565b80631653a0c7146101665780631dceb71f1461018657806320e2d818146101d1578063715018a6146101e45761011e565b3661011e57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461011c5760405162461bcd60e51b815260206004820152601360248201527f52656365697665206e6f7420616c6c6f7765640000000000000000000000000060448201526064015b60405180910390fd5b005b60405162461bcd60e51b815260206004820152601460248201527f46616c6c6261636b206e6f7420616c6c6f7765640000000000000000000000006044820152606401610113565b34801561017257600080fd5b5061011c610181366004610dff565b6102aa565b34801561019257600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200160405180910390f35b61011c6101df366004610e2b565b6102c0565b3480156101f057600080fd5b5061011c610430565b34801561020557600080fd5b506000546001600160a01b03166101b5565b34801561022357600080fd5b5061011c610232366004610e4f565b610444565b34801561024357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101b5565b34801561027657600080fd5b5061011c610285366004610edc565b610465565b34801561029657600080fd5b5061011c6102a5366004610e2b565b6108d3565b6102b2610963565b6102bc82826109bd565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b50506040517fe46842b70000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000811660448301523460648301527f000000000000000000000000000000000000000000000000000000000000000016935063e46842b7925060840190506020604051808303816000875af115801561040c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc9190610fa0565b610438610963565b6104426000610a7a565b565b61044c610963565b6104606001600160a01b0384168383610ae2565b505050565b60005b87811015610659573389898381811061048357610483610fb9565b90506020028101906104959190610fcf565b6104a3906020810190610e2b565b6001600160a01b0316146104f95760405162461bcd60e51b815260206004820152601960248201527f57697468647261776572206d757374206265207374616b6572000000000000006044820152606401610113565b60005b89898381811061050e5761050e610fb9565b90506020028101906105209190610fcf565b61052e9060a0810190610fef565b9050811015610646577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a8a8481811061057357610573610fb9565b90506020028101906105859190610fcf565b6105939060a0810190610fef565b838181106105a3576105a3610fb9565b90506020020160208101906105b89190610e2b565b6001600160a01b0316146106345760405162461bcd60e51b815260206004820152602360248201527f4f6e6c7920737570706f7274207772617070656420746f6b656e20737472617460448201527f65677900000000000000000000000000000000000000000000000000000000006064820152608401610113565b8061063e8161104f565b9150506104fc565b50806106518161104f565b915050610468565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190610fa0565b6040517f334043960000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063334043969061075b908c908c908c908c908c908c908c908c90600401611229565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190610fa0565b905060006108268383611389565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156108a457600080fd5b505af11580156108b8573d6000803e3d6000fd5b505050506108c633826109bd565b5050505050505050505050565b6108db610963565b6001600160a01b0381166109575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610113565b61096081610a7a565b50565b6000546001600160a01b031633146104425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610113565b604080516000808252602082019092526001600160a01b0384169083906040516109e791906113c6565b60006040518083038185875af1925050503d8060008114610a24576040519150601f19603f3d011682016040523d82523d6000602084013e610a29565b606091505b50509050806104605760405162461bcd60e51b815260206004820152601660248201527f4e41544956455f5452414e534645525f4641494c4544000000000000000000006044820152606401610113565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261046092869291600091610ba0918516908490610c33565b9050805160001480610bc1575080806020019051810190610bc191906113d8565b6104605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610113565b6060610c428484600085610c4a565b949350505050565b606082471015610cc25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610113565b600080866001600160a01b03168587604051610cde91906113c6565b60006040518083038185875af1925050503d8060008114610d1b576040519150601f19603f3d011682016040523d82523d6000602084013e610d20565b606091505b5091509150610d3187838387610d3c565b979650505050505050565b60608315610dab578251600003610da4576001600160a01b0385163b610da45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610113565b5081610c42565b610c428383815115610dc05781518083602001fd5b8060405162461bcd60e51b815260040161011391906113f5565b6001600160a01b038116811461096057600080fd5b8035610dfa81610dda565b919050565b60008060408385031215610e1257600080fd5b8235610e1d81610dda565b946020939093013593505050565b600060208284031215610e3d57600080fd5b8135610e4881610dda565b9392505050565b600080600060608486031215610e6457600080fd5b8335610e6f81610dda565b92506020840135610e7f81610dda565b929592945050506040919091013590565b60008083601f840112610ea257600080fd5b50813567ffffffffffffffff811115610eba57600080fd5b6020830191508360208260051b8501011115610ed557600080fd5b9250929050565b6000806000806000806000806080898b031215610ef857600080fd5b883567ffffffffffffffff80821115610f1057600080fd5b610f1c8c838d01610e90565b909a50985060208b0135915080821115610f3557600080fd5b610f418c838d01610e90565b909850965060408b0135915080821115610f5a57600080fd5b610f668c838d01610e90565b909650945060608b0135915080821115610f7f57600080fd5b50610f8c8b828c01610e90565b999c989b5096995094979396929594505050565b600060208284031215610fb257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000823560de19833603018112610fe557600080fd5b9190910192915050565b6000808335601e1984360301811261100657600080fd5b83018035915067ffffffffffffffff82111561102157600080fd5b6020019150600581901b3603821315610ed557600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161106157611061611039565b5060010190565b803563ffffffff81168114610dfa57600080fd5b6000808335601e1984360301811261109357600080fd5b830160208101925035905067ffffffffffffffff8111156110b357600080fd5b8060051b3603821315610ed557600080fd5b8183526000602080850194508260005b858110156111035781356110e881610dda565b6001600160a01b0316875295820195908201906001016110d5565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561114057600080fd5b8260051b80836020870137939093016020019392505050565b81835260006020808501808196508560051b81019150846000805b888110156111d6578385038a5261118b838961107c565b808752878701845b828110156111c15783356111a681610dda565b6001600160a01b031682529289019290890190600101611193565b509b88019b9650505091850191600101611174565b509298975050505050505050565b801515811461096057600080fd5b8183526000602080850194508260005b85811015611103578135611215816111e4565b151587529582019590820190600101611202565b60808082528101889052600060a060058a901b830181019083018b835b8c81101561133a57858403609f190183528135368f900360de1901811261126c57600080fd5b8e0160e0813561127b81610dda565b6001600160a01b0316865260208281013561129581610dda565b6001600160a01b03168188015260406112af848201610def565b6001600160a01b031690880152606083810135908801526112d260808401611068565b63ffffffff1660808801526112ea60a084018461107c565b8360a08a01526112fd848a0182846110c5565b9350505060c061130f8185018561107c565b9450888403828a015261132384868361110e565b985050509485019493909301925050600101611246565b505050828103602084015261135081898b611159565b9050828103604084015261136581878961110e565b9050828103606084015261137a8185876111f2565b9b9a5050505050505050505050565b8181038181111561139c5761139c611039565b92915050565b60005b838110156113bd5781810151838201526020016113a5565b50506000910152565b60008251610fe58184602087016113a2565b6000602082840312156113ea57600080fd5b8151610e48816111e4565b60208152600082518060208401526114148160408501602087016113a2565b601f01601f1916919091016040019291505056fea2646970667358221220415a76f2d8d0a3a543cd82a33736ec09104a2b5d78ab8bf47d371c8e0ac3942364736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyNativeTransfer(address,uint256)": {
        "details": "transfer native token from the utility contract, for native token recovery in case of stuck native due to selfdestructs or Native transfers to the pre-computed contract address before deployment.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer"
        }
      },
      "emergencyTokenTransfer(address,address,uint256)": {
        "details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer",
          "token": "token to transfer"
        }
      },
      "getStrategyAddress()": {
        "details": "Get WrappedToken strategy address used by WrappedTokenGateway"
      },
      "getWrappedTokenAddress()": {
        "details": "Get WrappedToken address used by WrappedTokenGateway"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 775,
        "contract": "contracts/periphery/WrappedTokenGateway.sol:WrappedTokenGateway",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}