// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PoolController

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PoolControllerMetaData contains all meta data concerning the PoolController contract.
var PoolControllerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_delegation\",\"type\":\"address\",\"internalType\":\"contractIDelegationController\"},{\"name\":\"_slasher\",\"type\":\"address\",\"internalType\":\"contractISlasher\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DEPOSIT_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DOMAIN_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addPoolsToDepositWhitelist\",\"inputs\":[{\"name\":\"poolsToWhitelist\",\"type\":\"address[]\",\"internalType\":\"contractIPool[]\"},{\"name\":\"thirdPartyTransfersForbiddenValues\",\"type\":\"bool[]\",\"internalType\":\"bool[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addShares\",\"inputs\":[{\"name\":\"staker\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"pool\",\"type\":\"address\",\"internalType\":\"contractIPool\"},{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationController\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"depositIntoPool\",\"inputs\":[{\"name\":\"pool\",\"type\":\"address\",\"internalType\":\"contractIPool\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"depositIntoPoolWithSignature\",\"inputs\":[{\"name\":\"pool\",\"type\":\"address\",\"internalType\":\"contractIPool\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"staker\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"depositIntoPoolWithStaker\",\"inputs\":[{\"name\":\"staker\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pool\",\"type\":\"address\",\"internalType\":\"contractIPool\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"domainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getDeposits\",\"inputs\":[{\"name\":\"staker\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"contractIPool[]\"},{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"initialOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"initialPoolWhitelister\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_pauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"initialPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"poolIsWhitelistedForDeposit\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"poolWhitelister\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removePoolsFromDepositWhitelist\",\"inputs\":[{\"name\":\"poolsToRemoveFromWhitelist\",\"type\":\"address[]\",\"internalType\":\"contractIPool[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeShares\",\"inputs\":[{\"name\":\"staker\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pool\",\"type\":\"address\",\"internalType\":\"contractIPool\"},{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPoolWhitelister\",\"inputs\":[{\"name\":\"newPoolWhitelister\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setThirdPartyTransfersForbidden\",\"inputs\":[{\"name\":\"pool\",\"type\":\"address\",\"internalType\":\"contractIPool\"},{\"name\":\"value\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slasher\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractISlasher\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stakerPoolList\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stakerPoolListLength\",\"inputs\":[{\"name\":\"staker\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stakerPoolShares\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"thirdPartyTransfersForbidden\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawSharesAsTokens\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pool\",\"type\":\"address\",\"internalType\":\"contractIPool\"},{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Deposit\",\"inputs\":[{\"name\":\"staker\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIERC20\"},{\"name\":\"pool\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPool\"},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PoolAddedToDepositWhitelist\",\"inputs\":[{\"name\":\"pool\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PoolRemovedFromDepositWhitelist\",\"inputs\":[{\"name\":\"pool\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PoolWhitelisterChanged\",\"inputs\":[{\"name\":\"previousAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdatedThirdPartyTransfersForbidden\",\"inputs\":[{\"name\":\"pool\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPool\"},{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false}]",
	Bin: "0x60e06040523480156200001157600080fd5b50604051620037af380380620037af833981016040819052620000349162000137565b6001600160a01b03808316608052811660a052620000516200005d565b50504660c05262000176565b600054610100900460ff1615620000ca5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146200011c576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013457600080fd5b50565b600080604083850312156200014b57600080fd5b825162000158816200011e565b60208401519092506200016b816200011e565b809150509250929050565b60805160a05160c0516135ed620001c260003960006118a50152600061044f0152600081816105100152818161101c015281816114800152818161150a0152611ec601526135ed6000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80638da5cb5b1161012a578063c608c7f3116100bd578063df5cf7231161008c578063f2fde38b11610071578063f2fde38b1461055b578063f698da251461056e578063fabc1cbc1461057657600080fd5b8063df5cf7231461050b578063df8c804c1461053257600080fd5b8063c608c7f3146104af578063cf756fdf146104c2578063d02eaed6146104d5578063d8f41f74146104e857600080fd5b8063a3a97381116100f9578063a3a9738114610437578063b13442711461044a578063b6230d5f14610471578063c4623ea11461049c57600080fd5b80638da5cb5b146103cf57806394f649dd146103e05780639b4da03d14610401578063a185a29a1461042457600080fd5b8063595c6a67116101bd578063715018a61161018c578063856abb2911610171578063856abb2914610396578063886f1195146103a95780638c80d4e5146103bc57600080fd5b8063715018a61461036e5780637ecebe001461037657600080fd5b8063595c6a67146103185780635ac86ab7146103205780635c975abb146103535780636fcafe5a1461035b57600080fd5b806320606b70116101f957806320606b70146102a457806348825e94146102cb5780634e5a4263146102f2578063537217911461030557600080fd5b8063062860d81461022b5780630e4ed53d1461025b57806310d67a2f1461027c578063136439dd14610291575b600080fd5b61023e610239366004612ecf565b610589565b6040516001600160a01b0390911681526020015b60405180910390f35b61026e610269366004612f2a565b6105c1565b604051908152602001610252565b61028f61028a366004613043565b610859565b005b61028f61029f366004613060565b610945565b61026e7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61026e7fd2ee2c5c89e2092219910cac00a6b58dafa6023064069c5f341afca15176bb2981565b61028f610300366004613087565b610ab7565b61028f610313366004613105565b610b26565b61028f610cf5565b61034361032e366004613147565b609854600160ff9092169190911b9081161490565b6040519015158152602001610252565b60985461026e565b61026e61036936600461316a565b610e2c565b61028f610eb8565b61026e610384366004613043565b60cb6020526000908152604090205481565b61026e6103a43660046131ab565b610ecc565b60975461023e906001600160a01b031681565b61028f6103ca36600461316a565b610fdd565b6033546001600160a01b031661023e565b6103f36103ee366004613043565b611066565b6040516102529291906131fc565b61034361040f366004613043565b60d06020526000908152604090205460ff1681565b61028f610432366004613280565b6111e6565b61028f610445366004613043565b611430565b61023e7f000000000000000000000000000000000000000000000000000000000000000081565b61026e61047f3660046132ec565b60cd60209081526000928352604080842090915290825290205481565b61028f6104aa3660046131ab565b611441565b61028f6104bd36600461331a565b6114cb565b61028f6104d03660046131ab565b6115d2565b60cc5461023e906001600160a01b031681565b6103436104f6366004613043565b60cf6020526000908152604090205460ff1681565b61023e7f000000000000000000000000000000000000000000000000000000000000000081565b61026e610540366004613043565b6001600160a01b0316600090815260ce602052604090205490565b61028f610569366004613043565b611814565b61026e6118a1565b61028f610584366004613060565b61197c565b60ce60205281600052604060002081815481106105a557600080fd5b6000918252602090912001546001600160a01b03169150829050565b6098546000908190600190811614156040518060400160405280600181526020017f35000000000000000000000000000000000000000000000000000000000000008152509061062d5760405162461bcd60e51b815260040161062491906133db565b60405180910390fd5b50610636611af4565b6001600160a01b038816600090815260d06020908152604091829020548251808401909352600283527f31320000000000000000000000000000000000000000000000000000000000009183019190915260ff16156106a85760405162461bcd60e51b815260040161062491906133db565b5060408051808201909152600281527f31330000000000000000000000000000000000000000000000000000000000006020820152428510156106fe5760405162461bcd60e51b815260040161062491906133db565b506001600160a01b03858116600081815260cb602090815260408083205481517fd2ee2c5c89e2092219910cac00a6b58dafa6023064069c5f341afca15176bb2993810193909352908201939093528b84166060820152928a16608084015260a0830189905260c0830182905260e08301879052909161010001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206001600160a01b038a16600090815260cb90935290822060018501905591506107d56118a1565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050610833888288611b4d565b61083f888c8c8c611d5d565b945050505061084e6001606555565b509695505050505050565b609760009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d091906133ee565b6001600160a01b0316336001600160a01b0316146040518060400160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250906109385760405162461bcd60e51b815260040161062491906133db565b5061094281611f32565b50565b6097546040517f46fbf68e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca919061340b565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525090610a1e5760405162461bcd60e51b815260040161062491906133db565b5060985460408051808201909152600181527f370000000000000000000000000000000000000000000000000000000000000060208201529082811614610a785760405162461bcd60e51b815260040161062491906133db565b50609881905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b60cc5460408051808201909152600181527f39000000000000000000000000000000000000000000000000000000000000006020820152906001600160a01b03163314610b175760405162461bcd60e51b815260040161062491906133db565b50610b22828261200f565b5050565b60cc5460408051808201909152600181527f39000000000000000000000000000000000000000000000000000000000000006020820152906001600160a01b03163314610b865760405162461bcd60e51b815260040161062491906133db565b508060005b81811015610cef5760cf6000858584818110610ba957610ba9613428565b9050602002016020810190610bbe9190613043565b6001600160a01b0316815260208101919091526040016000205460ff1615610ce757600060cf6000868685818110610bf857610bf8613428565b9050602002016020810190610c0d9190613043565b6001600160a01b03168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790557f8ac71de5f0eed990ceee2d31cbfe4280db9f27a8f0bf5567c507309de33ed723848483818110610c8657610c86613428565b9050602002016020810190610c9b9190613043565b6040516001600160a01b03909116815260200160405180910390a1610ce7848483818110610ccb57610ccb613428565b9050602002016020810190610ce09190613043565b600061200f565b600101610b8b565b50505050565b6097546040517f46fbf68e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a919061340b565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525090610dce5760405162461bcd60e51b815260040161062491906133db565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff609881905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6098546000908190600190811614156040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525090610e8f5760405162461bcd60e51b815260040161062491906133db565b50610e98611af4565b610ea433868686611d5d565b9150610eb06001606555565b509392505050565b610ec061209b565b610eca60006120f5565b565b6098546000908190600190811614156040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525090610f2f5760405162461bcd60e51b815260040161062491906133db565b50610f38611af4565b6001600160a01b0386163314610fbc576001600160a01b038516600090815260d06020908152604091829020548251808401909352600283527f31320000000000000000000000000000000000000000000000000000000000009183019190915260ff1615610fba5760405162461bcd60e51b815260040161062491906133db565b505b610fc886868686611d5d565b9150610fd46001606555565b50949350505050565b60408051808201909152600281527f31310000000000000000000000000000000000000000000000000000000000006020820152336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461105a5760405162461bcd60e51b815260040161062491906133db565b50610cef83838361215f565b6001600160a01b038116600090815260ce60205260408120546060918291908167ffffffffffffffff81111561109e5761109e612efb565b6040519080825280602002602001820160405280156110c7578160200160208202803683370190505b50905060005b82811015611158576001600160a01b038616600090815260cd6020908152604080832060ce909252822080549192918490811061110c5761110c613428565b60009182526020808320909101546001600160a01b03168352820192909252604001902054825183908390811061114557611145613428565b60209081029190910101526001016110cd565b5060ce6000866001600160a01b03166001600160a01b0316815260200190815260200160002081818054806020026020016040519081016040528092919081815260200182805480156111d457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b6575b50505050509150935093505050915091565b60cc5460408051808201909152600181527f39000000000000000000000000000000000000000000000000000000000000006020820152906001600160a01b031633146112465760405162461bcd60e51b815260040161062491906133db565b5060408051808201909152600281527f3134000000000000000000000000000000000000000000000000000000000000602082015283821461129b5760405162461bcd60e51b815260040161062491906133db565b508260005b818110156114285760cf60008787848181106112be576112be613428565b90506020020160208101906112d39190613043565b6001600160a01b0316815260208101919091526040016000205460ff1661142057600160cf600088888581811061130c5761130c613428565b90506020020160208101906113219190613043565b6001600160a01b03168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790557f39daccb429428846b0171894bd4200a7051a1c25c7b82ee455a39f89d72e634c86868381811061139a5761139a613428565b90506020020160208101906113af9190613043565b6040516001600160a01b03909116815260200160405180910390a16114208686838181106113df576113df613428565b90506020020160208101906113f49190613043565b85858481811061140657611406613428565b905060200201602081019061141b9190613457565b61200f565b6001016112a0565b505050505050565b61143861209b565b6109428161228c565b60408051808201909152600281527f31310000000000000000000000000000000000000000000000000000000000006020820152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114be5760405162461bcd60e51b815260040161062491906133db565b50610cef8484848461230d565b60408051808201909152600281527f31310000000000000000000000000000000000000000000000000000000000006020820152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115485760405162461bcd60e51b815260040161062491906133db565b506040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015282811660248301526044820184905284169063d9caed1290606401600060405180830381600087803b1580156115b457600080fd5b505af11580156115c8573d6000803e3d6000fd5b5050505050505050565b600054610100900460ff16158080156115f25750600054600160ff909116105b8061160c5750303b15801561160c575060005460ff166001145b61167e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610624565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156116dc57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b604080518082018252600881527f42696e4c6179657200000000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc3e1ab4858383d79d3a0e54f9365ec1da08f828fcebd1952f7ea695e26718a6081840152466060820152306080808301919091528351808303909101815260a0909101909252815191012060ca5561178e612542565b61179883836125c7565b6117a1856120f5565b6117aa8461228c565b801561180d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b61181c61209b565b6001600160a01b0381166118985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610624565b610942816120f5565b60007f000000000000000000000000000000000000000000000000000000000000000046036118d1575060ca5490565b50604080518082018252600881527f42696e4c6179657200000000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc3e1ab4858383d79d3a0e54f9365ec1da08f828fcebd1952f7ea695e26718a6081840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b609760009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f391906133ee565b6001600160a01b0316336001600160a01b0316146040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525090611a5b5760405162461bcd60e51b815260040161062491906133db565b506098541981196098541916146040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525090611abc5760405162461bcd60e51b815260040161062491906133db565b50609881905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610aac565b600260655403611b465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610624565b6002606555565b6001600160a01b0383163b15611ca7576040517f1626ba7e00000000000000000000000000000000000000000000000000000000808252906001600160a01b03851690631626ba7e90611ba69086908690600401613474565b602060405180830381865afa158015611bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be7919061348d565b7fffffffff000000000000000000000000000000000000000000000000000000001614611ca25760405162461bcd60e51b815260206004820152605360248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a2045524331323731207369676e61747572652060648201527f766572696669636174696f6e206661696c656400000000000000000000000000608482015260a401610624565b505050565b826001600160a01b0316611cbb8383612680565b6001600160a01b031614611ca25760405162461bcd60e51b815260206004820152604760248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a207369676e6174757265206e6f742066726f6d60648201527f207369676e657200000000000000000000000000000000000000000000000000608482015260a401610624565b6001600160a01b038316600090815260cf60209081526040808320548151808301909252600282527f313000000000000000000000000000000000000000000000000000000000000092820192909252859160ff16611dcf5760405162461bcd60e51b815260040161062491906133db565b50611de56001600160a01b0385163387866126a6565b6040517f47e7ef240000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590528616906347e7ef24906044016020604051808303816000875af1158015611e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7191906134cf565b9150611e7f8685878561230d565b6040517f28a573ae0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906328a573ae90606401600060405180830381600087803b158015611f0a57600080fd5b505af1158015611f1e573d6000803e3d6000fd5b5050505050949350505050565b6001606555565b60408051808201909152600181527f330000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b038216611f8d5760405162461bcd60e51b815260040161062491906133db565b50609754604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b604080516001600160a01b038416815282151560208201527f77d930df4937793473a95024d87a98fd2ccb9e92d3c2463b3dacd65d3e6a5786910160405180910390a16001600160a01b0391909116600090815260d06020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6033546001600160a01b03163314610eca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610624565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051808201909152600281527f31350000000000000000000000000000000000000000000000000000000000006020820152600090826121b45760405162461bcd60e51b815260040161062491906133db565b506001600160a01b03808516600090815260cd60209081526040808320938716835292815290829020548251808401909352600283527f31370000000000000000000000000000000000000000000000000000000000009183019190915290818411156122345760405162461bcd60e51b815260040161062491906133db565b506001600160a01b03808616600090815260cd602090815260408083209388168352929052908120918490039182905581900361227f57612275858561272e565b6001915050612285565b60009150505b9392505050565b60cc54604080516001600160a01b03928316815291831660208301527fb10a4c4f1bee1e88074ca37b6c3ce3990495d771d4f7735a5fed00a773af424f910160405180910390a160cc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60408051808201909152600181527f330000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b0385166123685760405162461bcd60e51b815260040161062491906133db565b5060408051808201909152600281527f31350000000000000000000000000000000000000000000000000000000000006020820152816123bb5760405162461bcd60e51b815260040161062491906133db565b506001600160a01b03808516600090815260cd6020908152604080832093861683529290529081205490036124ae576001600160a01b038416600090815260ce6020908152604091829020548251808401909352600283527f313600000000000000000000000000000000000000000000000000000000000083830152106124565760405162461bcd60e51b815260040161062491906133db565b506001600160a01b03848116600090815260ce602090815260408220805460018101825590835291200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169184169190911790555b6001600160a01b03808516600090815260cd60209081526040808320938616835292905290812080548392906124e5908490613517565b9091555050604080516001600160a01b03868116825285811660208301528416818301526060810183905290517f7cfff908a4b583f36430b25d75964c458d8ede8a99bd61be750e97ee1b2f3a969181900360800190a150505050565b600054610100900460ff166125bf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610624565b610eca612922565b6097546001600160a01b03161580156125e857506001600160a01b03821615155b6040518060400160405280600181526020017f36000000000000000000000000000000000000000000000000000000000000008152509061263c5760405162461bcd60e51b815260040161062491906133db565b50609881905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2610b2282611f32565b600080600061268f858561299f565b9150915061269c816129e4565b5090505b92915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610cef908590612b49565b6001600160a01b038216600090815260ce6020526040812054905b81811015612848576001600160a01b03848116600090815260ce602052604090208054918516918390811061278057612780613428565b6000918252602090912001546001600160a01b031603612840576001600160a01b038416600090815260ce6020526040902080546127c09060019061352a565b815481106127d0576127d0613428565b60009182526020808320909101546001600160a01b03878116845260ce909252604090922080549190921691908390811061280d5761280d613428565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612848565b600101612749565b60408051808201909152600281527f3138000000000000000000000000000000000000000000000000000000000000602082015281830361289c5760405162461bcd60e51b815260040161062491906133db565b506001600160a01b038416600090815260ce602052604090208054806128c4576128c461353d565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550505050565b600054610100900460ff16611f2b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610624565b60008082516041036129d55760208301516040840151606085015160001a6129c987828585612c31565b945094505050506129dd565b506000905060025b9250929050565b60008160048111156129f8576129f861356c565b03612a005750565b6001816004811115612a1457612a1461356c565b03612a615760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610624565b6002816004811115612a7557612a7561356c565b03612ac25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610624565b6003816004811115612ad657612ad661356c565b036109425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610624565b6000612b9e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d139092919063ffffffff16565b9050805160001480612bbf575080806020019051810190612bbf919061340b565b611ca25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610624565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612c685750600090506003612d0a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612cbc573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116612d0357600060019250925050612d0a565b9150600090505b94509492505050565b6060612d228484600085612d2a565b949350505050565b606082471015612da25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610624565b600080866001600160a01b03168587604051612dbe919061359b565b60006040518083038185875af1925050503d8060008114612dfb576040519150601f19603f3d011682016040523d82523d6000602084013e612e00565b606091505b5091509150612e1187838387612e1c565b979650505050505050565b60608315612e8b578251600003612e84576001600160a01b0385163b612e845760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610624565b5081612d22565b612d228383815115612ea05781518083602001fd5b8060405162461bcd60e51b815260040161062491906133db565b6001600160a01b038116811461094257600080fd5b60008060408385031215612ee257600080fd5b8235612eed81612eba565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060008060008060c08789031215612f4357600080fd5b8635612f4e81612eba565b95506020870135612f5e81612eba565b9450604087013593506060870135612f7581612eba565b92506080870135915060a087013567ffffffffffffffff80821115612f9957600080fd5b818901915089601f830112612fad57600080fd5b813581811115612fbf57612fbf612efb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561300557613005612efb565b816040528281528c602084870101111561301e57600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60006020828403121561305557600080fd5b813561228581612eba565b60006020828403121561307257600080fd5b5035919050565b801515811461094257600080fd5b6000806040838503121561309a57600080fd5b82356130a581612eba565b915060208301356130b581613079565b809150509250929050565b60008083601f8401126130d257600080fd5b50813567ffffffffffffffff8111156130ea57600080fd5b6020830191508360208260051b85010111156129dd57600080fd5b6000806020838503121561311857600080fd5b823567ffffffffffffffff81111561312f57600080fd5b61313b858286016130c0565b90969095509350505050565b60006020828403121561315957600080fd5b813560ff8116811461228557600080fd5b60008060006060848603121561317f57600080fd5b833561318a81612eba565b9250602084013561319a81612eba565b929592945050506040919091013590565b600080600080608085870312156131c157600080fd5b84356131cc81612eba565b935060208501356131dc81612eba565b925060408501356131ec81612eba565b9396929550929360600135925050565b604080825283519082018190526000906020906060840190828701845b8281101561323e5781516001600160a01b031684529284019290840190600101613219565b5050508381038285015284518082528583019183019060005b8181101561327357835183529284019291840191600101613257565b5090979650505050505050565b6000806000806040858703121561329657600080fd5b843567ffffffffffffffff808211156132ae57600080fd5b6132ba888389016130c0565b909650945060208701359150808211156132d357600080fd5b506132e0878288016130c0565b95989497509550505050565b600080604083850312156132ff57600080fd5b823561330a81612eba565b915060208301356130b581612eba565b6000806000806080858703121561333057600080fd5b843561333b81612eba565b9350602085013561334b81612eba565b925060408501359150606085013561336281612eba565b939692955090935050565b60005b83811015613388578181015183820152602001613370565b50506000910152565b600081518084526133a981602086016020860161336d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006122856020830184613391565b60006020828403121561340057600080fd5b815161228581612eba565b60006020828403121561341d57600080fd5b815161228581613079565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561346957600080fd5b813561228581613079565b828152604060208201526000612d226040830184613391565b60006020828403121561349f57600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461228557600080fd5b6000602082840312156134e157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156126a0576126a06134e8565b818103818111156126a0576126a06134e8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082516135ad81846020870161336d565b919091019291505056fea2646970667358221220b4a3866c2bf598fde899638567fd63540ad4d7d735cd485425f48e138e49f49c64736f6c63430008140033",
}

// PoolControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use PoolControllerMetaData.ABI instead.
var PoolControllerABI = PoolControllerMetaData.ABI

// PoolControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PoolControllerMetaData.Bin instead.
var PoolControllerBin = PoolControllerMetaData.Bin

// DeployPoolController deploys a new Ethereum contract, binding an instance of PoolController to it.
func DeployPoolController(auth *bind.TransactOpts, backend bind.ContractBackend, _delegation common.Address, _slasher common.Address) (common.Address, *types.Transaction, *PoolController, error) {
	parsed, err := PoolControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PoolControllerBin), backend, _delegation, _slasher)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PoolController{PoolControllerCaller: PoolControllerCaller{contract: contract}, PoolControllerTransactor: PoolControllerTransactor{contract: contract}, PoolControllerFilterer: PoolControllerFilterer{contract: contract}}, nil
}

// PoolController is an auto generated Go binding around an Ethereum contract.
type PoolController struct {
	PoolControllerCaller     // Read-only binding to the contract
	PoolControllerTransactor // Write-only binding to the contract
	PoolControllerFilterer   // Log filterer for contract events
}

// PoolControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type PoolControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PoolControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PoolControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PoolControllerSession struct {
	Contract     *PoolController   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PoolControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PoolControllerCallerSession struct {
	Contract *PoolControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// PoolControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PoolControllerTransactorSession struct {
	Contract     *PoolControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// PoolControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type PoolControllerRaw struct {
	Contract *PoolController // Generic contract binding to access the raw methods on
}

// PoolControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PoolControllerCallerRaw struct {
	Contract *PoolControllerCaller // Generic read-only contract binding to access the raw methods on
}

// PoolControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PoolControllerTransactorRaw struct {
	Contract *PoolControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPoolController creates a new instance of PoolController, bound to a specific deployed contract.
func NewPoolController(address common.Address, backend bind.ContractBackend) (*PoolController, error) {
	contract, err := bindPoolController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PoolController{PoolControllerCaller: PoolControllerCaller{contract: contract}, PoolControllerTransactor: PoolControllerTransactor{contract: contract}, PoolControllerFilterer: PoolControllerFilterer{contract: contract}}, nil
}

// NewPoolControllerCaller creates a new read-only instance of PoolController, bound to a specific deployed contract.
func NewPoolControllerCaller(address common.Address, caller bind.ContractCaller) (*PoolControllerCaller, error) {
	contract, err := bindPoolController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PoolControllerCaller{contract: contract}, nil
}

// NewPoolControllerTransactor creates a new write-only instance of PoolController, bound to a specific deployed contract.
func NewPoolControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*PoolControllerTransactor, error) {
	contract, err := bindPoolController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PoolControllerTransactor{contract: contract}, nil
}

// NewPoolControllerFilterer creates a new log filterer instance of PoolController, bound to a specific deployed contract.
func NewPoolControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*PoolControllerFilterer, error) {
	contract, err := bindPoolController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PoolControllerFilterer{contract: contract}, nil
}

// bindPoolController binds a generic wrapper to an already deployed contract.
func bindPoolController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PoolControllerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PoolController *PoolControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PoolController.Contract.PoolControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PoolController *PoolControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PoolController.Contract.PoolControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PoolController *PoolControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PoolController.Contract.PoolControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PoolController *PoolControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PoolController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PoolController *PoolControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PoolController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PoolController *PoolControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PoolController.Contract.contract.Transact(opts, method, params...)
}

// DEPOSITTYPEHASH is a free data retrieval call binding the contract method 0x48825e94.
//
// Solidity: function DEPOSIT_TYPEHASH() view returns(bytes32)
func (_PoolController *PoolControllerCaller) DEPOSITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "DEPOSIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEPOSITTYPEHASH is a free data retrieval call binding the contract method 0x48825e94.
//
// Solidity: function DEPOSIT_TYPEHASH() view returns(bytes32)
func (_PoolController *PoolControllerSession) DEPOSITTYPEHASH() ([32]byte, error) {
	return _PoolController.Contract.DEPOSITTYPEHASH(&_PoolController.CallOpts)
}

// DEPOSITTYPEHASH is a free data retrieval call binding the contract method 0x48825e94.
//
// Solidity: function DEPOSIT_TYPEHASH() view returns(bytes32)
func (_PoolController *PoolControllerCallerSession) DEPOSITTYPEHASH() ([32]byte, error) {
	return _PoolController.Contract.DEPOSITTYPEHASH(&_PoolController.CallOpts)
}

// DOMAINTYPEHASH is a free data retrieval call binding the contract method 0x20606b70.
//
// Solidity: function DOMAIN_TYPEHASH() view returns(bytes32)
func (_PoolController *PoolControllerCaller) DOMAINTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "DOMAIN_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINTYPEHASH is a free data retrieval call binding the contract method 0x20606b70.
//
// Solidity: function DOMAIN_TYPEHASH() view returns(bytes32)
func (_PoolController *PoolControllerSession) DOMAINTYPEHASH() ([32]byte, error) {
	return _PoolController.Contract.DOMAINTYPEHASH(&_PoolController.CallOpts)
}

// DOMAINTYPEHASH is a free data retrieval call binding the contract method 0x20606b70.
//
// Solidity: function DOMAIN_TYPEHASH() view returns(bytes32)
func (_PoolController *PoolControllerCallerSession) DOMAINTYPEHASH() ([32]byte, error) {
	return _PoolController.Contract.DOMAINTYPEHASH(&_PoolController.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_PoolController *PoolControllerCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_PoolController *PoolControllerSession) Delegation() (common.Address, error) {
	return _PoolController.Contract.Delegation(&_PoolController.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_PoolController *PoolControllerCallerSession) Delegation() (common.Address, error) {
	return _PoolController.Contract.Delegation(&_PoolController.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_PoolController *PoolControllerCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_PoolController *PoolControllerSession) DomainSeparator() ([32]byte, error) {
	return _PoolController.Contract.DomainSeparator(&_PoolController.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_PoolController *PoolControllerCallerSession) DomainSeparator() ([32]byte, error) {
	return _PoolController.Contract.DomainSeparator(&_PoolController.CallOpts)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address staker) view returns(address[], uint256[])
func (_PoolController *PoolControllerCaller) GetDeposits(opts *bind.CallOpts, staker common.Address) ([]common.Address, []*big.Int, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "getDeposits", staker)

	if err != nil {
		return *new([]common.Address), *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return out0, out1, err

}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address staker) view returns(address[], uint256[])
func (_PoolController *PoolControllerSession) GetDeposits(staker common.Address) ([]common.Address, []*big.Int, error) {
	return _PoolController.Contract.GetDeposits(&_PoolController.CallOpts, staker)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address staker) view returns(address[], uint256[])
func (_PoolController *PoolControllerCallerSession) GetDeposits(staker common.Address) ([]common.Address, []*big.Int, error) {
	return _PoolController.Contract.GetDeposits(&_PoolController.CallOpts, staker)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PoolController *PoolControllerCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PoolController *PoolControllerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _PoolController.Contract.Nonces(&_PoolController.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PoolController *PoolControllerCallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _PoolController.Contract.Nonces(&_PoolController.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PoolController *PoolControllerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PoolController *PoolControllerSession) Owner() (common.Address, error) {
	return _PoolController.Contract.Owner(&_PoolController.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PoolController *PoolControllerCallerSession) Owner() (common.Address, error) {
	return _PoolController.Contract.Owner(&_PoolController.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_PoolController *PoolControllerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_PoolController *PoolControllerSession) Paused(index uint8) (bool, error) {
	return _PoolController.Contract.Paused(&_PoolController.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_PoolController *PoolControllerCallerSession) Paused(index uint8) (bool, error) {
	return _PoolController.Contract.Paused(&_PoolController.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_PoolController *PoolControllerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_PoolController *PoolControllerSession) Paused0() (*big.Int, error) {
	return _PoolController.Contract.Paused0(&_PoolController.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_PoolController *PoolControllerCallerSession) Paused0() (*big.Int, error) {
	return _PoolController.Contract.Paused0(&_PoolController.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_PoolController *PoolControllerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_PoolController *PoolControllerSession) PauserRegistry() (common.Address, error) {
	return _PoolController.Contract.PauserRegistry(&_PoolController.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_PoolController *PoolControllerCallerSession) PauserRegistry() (common.Address, error) {
	return _PoolController.Contract.PauserRegistry(&_PoolController.CallOpts)
}

// PoolIsWhitelistedForDeposit is a free data retrieval call binding the contract method 0xd8f41f74.
//
// Solidity: function poolIsWhitelistedForDeposit(address ) view returns(bool)
func (_PoolController *PoolControllerCaller) PoolIsWhitelistedForDeposit(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "poolIsWhitelistedForDeposit", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PoolIsWhitelistedForDeposit is a free data retrieval call binding the contract method 0xd8f41f74.
//
// Solidity: function poolIsWhitelistedForDeposit(address ) view returns(bool)
func (_PoolController *PoolControllerSession) PoolIsWhitelistedForDeposit(arg0 common.Address) (bool, error) {
	return _PoolController.Contract.PoolIsWhitelistedForDeposit(&_PoolController.CallOpts, arg0)
}

// PoolIsWhitelistedForDeposit is a free data retrieval call binding the contract method 0xd8f41f74.
//
// Solidity: function poolIsWhitelistedForDeposit(address ) view returns(bool)
func (_PoolController *PoolControllerCallerSession) PoolIsWhitelistedForDeposit(arg0 common.Address) (bool, error) {
	return _PoolController.Contract.PoolIsWhitelistedForDeposit(&_PoolController.CallOpts, arg0)
}

// PoolWhitelister is a free data retrieval call binding the contract method 0xd02eaed6.
//
// Solidity: function poolWhitelister() view returns(address)
func (_PoolController *PoolControllerCaller) PoolWhitelister(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "poolWhitelister")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoolWhitelister is a free data retrieval call binding the contract method 0xd02eaed6.
//
// Solidity: function poolWhitelister() view returns(address)
func (_PoolController *PoolControllerSession) PoolWhitelister() (common.Address, error) {
	return _PoolController.Contract.PoolWhitelister(&_PoolController.CallOpts)
}

// PoolWhitelister is a free data retrieval call binding the contract method 0xd02eaed6.
//
// Solidity: function poolWhitelister() view returns(address)
func (_PoolController *PoolControllerCallerSession) PoolWhitelister() (common.Address, error) {
	return _PoolController.Contract.PoolWhitelister(&_PoolController.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_PoolController *PoolControllerCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_PoolController *PoolControllerSession) Slasher() (common.Address, error) {
	return _PoolController.Contract.Slasher(&_PoolController.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_PoolController *PoolControllerCallerSession) Slasher() (common.Address, error) {
	return _PoolController.Contract.Slasher(&_PoolController.CallOpts)
}

// StakerPoolList is a free data retrieval call binding the contract method 0x062860d8.
//
// Solidity: function stakerPoolList(address , uint256 ) view returns(address)
func (_PoolController *PoolControllerCaller) StakerPoolList(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "stakerPoolList", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerPoolList is a free data retrieval call binding the contract method 0x062860d8.
//
// Solidity: function stakerPoolList(address , uint256 ) view returns(address)
func (_PoolController *PoolControllerSession) StakerPoolList(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _PoolController.Contract.StakerPoolList(&_PoolController.CallOpts, arg0, arg1)
}

// StakerPoolList is a free data retrieval call binding the contract method 0x062860d8.
//
// Solidity: function stakerPoolList(address , uint256 ) view returns(address)
func (_PoolController *PoolControllerCallerSession) StakerPoolList(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _PoolController.Contract.StakerPoolList(&_PoolController.CallOpts, arg0, arg1)
}

// StakerPoolListLength is a free data retrieval call binding the contract method 0xdf8c804c.
//
// Solidity: function stakerPoolListLength(address staker) view returns(uint256)
func (_PoolController *PoolControllerCaller) StakerPoolListLength(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "stakerPoolListLength", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakerPoolListLength is a free data retrieval call binding the contract method 0xdf8c804c.
//
// Solidity: function stakerPoolListLength(address staker) view returns(uint256)
func (_PoolController *PoolControllerSession) StakerPoolListLength(staker common.Address) (*big.Int, error) {
	return _PoolController.Contract.StakerPoolListLength(&_PoolController.CallOpts, staker)
}

// StakerPoolListLength is a free data retrieval call binding the contract method 0xdf8c804c.
//
// Solidity: function stakerPoolListLength(address staker) view returns(uint256)
func (_PoolController *PoolControllerCallerSession) StakerPoolListLength(staker common.Address) (*big.Int, error) {
	return _PoolController.Contract.StakerPoolListLength(&_PoolController.CallOpts, staker)
}

// StakerPoolShares is a free data retrieval call binding the contract method 0xb6230d5f.
//
// Solidity: function stakerPoolShares(address , address ) view returns(uint256)
func (_PoolController *PoolControllerCaller) StakerPoolShares(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "stakerPoolShares", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakerPoolShares is a free data retrieval call binding the contract method 0xb6230d5f.
//
// Solidity: function stakerPoolShares(address , address ) view returns(uint256)
func (_PoolController *PoolControllerSession) StakerPoolShares(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _PoolController.Contract.StakerPoolShares(&_PoolController.CallOpts, arg0, arg1)
}

// StakerPoolShares is a free data retrieval call binding the contract method 0xb6230d5f.
//
// Solidity: function stakerPoolShares(address , address ) view returns(uint256)
func (_PoolController *PoolControllerCallerSession) StakerPoolShares(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _PoolController.Contract.StakerPoolShares(&_PoolController.CallOpts, arg0, arg1)
}

// ThirdPartyTransfersForbidden is a free data retrieval call binding the contract method 0x9b4da03d.
//
// Solidity: function thirdPartyTransfersForbidden(address ) view returns(bool)
func (_PoolController *PoolControllerCaller) ThirdPartyTransfersForbidden(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _PoolController.contract.Call(opts, &out, "thirdPartyTransfersForbidden", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ThirdPartyTransfersForbidden is a free data retrieval call binding the contract method 0x9b4da03d.
//
// Solidity: function thirdPartyTransfersForbidden(address ) view returns(bool)
func (_PoolController *PoolControllerSession) ThirdPartyTransfersForbidden(arg0 common.Address) (bool, error) {
	return _PoolController.Contract.ThirdPartyTransfersForbidden(&_PoolController.CallOpts, arg0)
}

// ThirdPartyTransfersForbidden is a free data retrieval call binding the contract method 0x9b4da03d.
//
// Solidity: function thirdPartyTransfersForbidden(address ) view returns(bool)
func (_PoolController *PoolControllerCallerSession) ThirdPartyTransfersForbidden(arg0 common.Address) (bool, error) {
	return _PoolController.Contract.ThirdPartyTransfersForbidden(&_PoolController.CallOpts, arg0)
}

// AddPoolsToDepositWhitelist is a paid mutator transaction binding the contract method 0xa185a29a.
//
// Solidity: function addPoolsToDepositWhitelist(address[] poolsToWhitelist, bool[] thirdPartyTransfersForbiddenValues) returns()
func (_PoolController *PoolControllerTransactor) AddPoolsToDepositWhitelist(opts *bind.TransactOpts, poolsToWhitelist []common.Address, thirdPartyTransfersForbiddenValues []bool) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "addPoolsToDepositWhitelist", poolsToWhitelist, thirdPartyTransfersForbiddenValues)
}

// AddPoolsToDepositWhitelist is a paid mutator transaction binding the contract method 0xa185a29a.
//
// Solidity: function addPoolsToDepositWhitelist(address[] poolsToWhitelist, bool[] thirdPartyTransfersForbiddenValues) returns()
func (_PoolController *PoolControllerSession) AddPoolsToDepositWhitelist(poolsToWhitelist []common.Address, thirdPartyTransfersForbiddenValues []bool) (*types.Transaction, error) {
	return _PoolController.Contract.AddPoolsToDepositWhitelist(&_PoolController.TransactOpts, poolsToWhitelist, thirdPartyTransfersForbiddenValues)
}

// AddPoolsToDepositWhitelist is a paid mutator transaction binding the contract method 0xa185a29a.
//
// Solidity: function addPoolsToDepositWhitelist(address[] poolsToWhitelist, bool[] thirdPartyTransfersForbiddenValues) returns()
func (_PoolController *PoolControllerTransactorSession) AddPoolsToDepositWhitelist(poolsToWhitelist []common.Address, thirdPartyTransfersForbiddenValues []bool) (*types.Transaction, error) {
	return _PoolController.Contract.AddPoolsToDepositWhitelist(&_PoolController.TransactOpts, poolsToWhitelist, thirdPartyTransfersForbiddenValues)
}

// AddShares is a paid mutator transaction binding the contract method 0xc4623ea1.
//
// Solidity: function addShares(address staker, address token, address pool, uint256 shares) returns()
func (_PoolController *PoolControllerTransactor) AddShares(opts *bind.TransactOpts, staker common.Address, token common.Address, pool common.Address, shares *big.Int) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "addShares", staker, token, pool, shares)
}

// AddShares is a paid mutator transaction binding the contract method 0xc4623ea1.
//
// Solidity: function addShares(address staker, address token, address pool, uint256 shares) returns()
func (_PoolController *PoolControllerSession) AddShares(staker common.Address, token common.Address, pool common.Address, shares *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.AddShares(&_PoolController.TransactOpts, staker, token, pool, shares)
}

// AddShares is a paid mutator transaction binding the contract method 0xc4623ea1.
//
// Solidity: function addShares(address staker, address token, address pool, uint256 shares) returns()
func (_PoolController *PoolControllerTransactorSession) AddShares(staker common.Address, token common.Address, pool common.Address, shares *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.AddShares(&_PoolController.TransactOpts, staker, token, pool, shares)
}

// DepositIntoPool is a paid mutator transaction binding the contract method 0x6fcafe5a.
//
// Solidity: function depositIntoPool(address pool, address token, uint256 amount) returns(uint256 shares)
func (_PoolController *PoolControllerTransactor) DepositIntoPool(opts *bind.TransactOpts, pool common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "depositIntoPool", pool, token, amount)
}

// DepositIntoPool is a paid mutator transaction binding the contract method 0x6fcafe5a.
//
// Solidity: function depositIntoPool(address pool, address token, uint256 amount) returns(uint256 shares)
func (_PoolController *PoolControllerSession) DepositIntoPool(pool common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.DepositIntoPool(&_PoolController.TransactOpts, pool, token, amount)
}

// DepositIntoPool is a paid mutator transaction binding the contract method 0x6fcafe5a.
//
// Solidity: function depositIntoPool(address pool, address token, uint256 amount) returns(uint256 shares)
func (_PoolController *PoolControllerTransactorSession) DepositIntoPool(pool common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.DepositIntoPool(&_PoolController.TransactOpts, pool, token, amount)
}

// DepositIntoPoolWithSignature is a paid mutator transaction binding the contract method 0x0e4ed53d.
//
// Solidity: function depositIntoPoolWithSignature(address pool, address token, uint256 amount, address staker, uint256 expiry, bytes signature) returns(uint256 shares)
func (_PoolController *PoolControllerTransactor) DepositIntoPoolWithSignature(opts *bind.TransactOpts, pool common.Address, token common.Address, amount *big.Int, staker common.Address, expiry *big.Int, signature []byte) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "depositIntoPoolWithSignature", pool, token, amount, staker, expiry, signature)
}

// DepositIntoPoolWithSignature is a paid mutator transaction binding the contract method 0x0e4ed53d.
//
// Solidity: function depositIntoPoolWithSignature(address pool, address token, uint256 amount, address staker, uint256 expiry, bytes signature) returns(uint256 shares)
func (_PoolController *PoolControllerSession) DepositIntoPoolWithSignature(pool common.Address, token common.Address, amount *big.Int, staker common.Address, expiry *big.Int, signature []byte) (*types.Transaction, error) {
	return _PoolController.Contract.DepositIntoPoolWithSignature(&_PoolController.TransactOpts, pool, token, amount, staker, expiry, signature)
}

// DepositIntoPoolWithSignature is a paid mutator transaction binding the contract method 0x0e4ed53d.
//
// Solidity: function depositIntoPoolWithSignature(address pool, address token, uint256 amount, address staker, uint256 expiry, bytes signature) returns(uint256 shares)
func (_PoolController *PoolControllerTransactorSession) DepositIntoPoolWithSignature(pool common.Address, token common.Address, amount *big.Int, staker common.Address, expiry *big.Int, signature []byte) (*types.Transaction, error) {
	return _PoolController.Contract.DepositIntoPoolWithSignature(&_PoolController.TransactOpts, pool, token, amount, staker, expiry, signature)
}

// DepositIntoPoolWithStaker is a paid mutator transaction binding the contract method 0x856abb29.
//
// Solidity: function depositIntoPoolWithStaker(address staker, address pool, address token, uint256 amount) returns(uint256 shares)
func (_PoolController *PoolControllerTransactor) DepositIntoPoolWithStaker(opts *bind.TransactOpts, staker common.Address, pool common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "depositIntoPoolWithStaker", staker, pool, token, amount)
}

// DepositIntoPoolWithStaker is a paid mutator transaction binding the contract method 0x856abb29.
//
// Solidity: function depositIntoPoolWithStaker(address staker, address pool, address token, uint256 amount) returns(uint256 shares)
func (_PoolController *PoolControllerSession) DepositIntoPoolWithStaker(staker common.Address, pool common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.DepositIntoPoolWithStaker(&_PoolController.TransactOpts, staker, pool, token, amount)
}

// DepositIntoPoolWithStaker is a paid mutator transaction binding the contract method 0x856abb29.
//
// Solidity: function depositIntoPoolWithStaker(address staker, address pool, address token, uint256 amount) returns(uint256 shares)
func (_PoolController *PoolControllerTransactorSession) DepositIntoPoolWithStaker(staker common.Address, pool common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.DepositIntoPoolWithStaker(&_PoolController.TransactOpts, staker, pool, token, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address initialOwner, address initialPoolWhitelister, address _pauserRegistry, uint256 initialPausedStatus) returns()
func (_PoolController *PoolControllerTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address, initialPoolWhitelister common.Address, _pauserRegistry common.Address, initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "initialize", initialOwner, initialPoolWhitelister, _pauserRegistry, initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address initialOwner, address initialPoolWhitelister, address _pauserRegistry, uint256 initialPausedStatus) returns()
func (_PoolController *PoolControllerSession) Initialize(initialOwner common.Address, initialPoolWhitelister common.Address, _pauserRegistry common.Address, initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.Initialize(&_PoolController.TransactOpts, initialOwner, initialPoolWhitelister, _pauserRegistry, initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address initialOwner, address initialPoolWhitelister, address _pauserRegistry, uint256 initialPausedStatus) returns()
func (_PoolController *PoolControllerTransactorSession) Initialize(initialOwner common.Address, initialPoolWhitelister common.Address, _pauserRegistry common.Address, initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.Initialize(&_PoolController.TransactOpts, initialOwner, initialPoolWhitelister, _pauserRegistry, initialPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_PoolController *PoolControllerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_PoolController *PoolControllerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.Pause(&_PoolController.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_PoolController *PoolControllerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.Pause(&_PoolController.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_PoolController *PoolControllerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_PoolController *PoolControllerSession) PauseAll() (*types.Transaction, error) {
	return _PoolController.Contract.PauseAll(&_PoolController.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_PoolController *PoolControllerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _PoolController.Contract.PauseAll(&_PoolController.TransactOpts)
}

// RemovePoolsFromDepositWhitelist is a paid mutator transaction binding the contract method 0x53721791.
//
// Solidity: function removePoolsFromDepositWhitelist(address[] poolsToRemoveFromWhitelist) returns()
func (_PoolController *PoolControllerTransactor) RemovePoolsFromDepositWhitelist(opts *bind.TransactOpts, poolsToRemoveFromWhitelist []common.Address) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "removePoolsFromDepositWhitelist", poolsToRemoveFromWhitelist)
}

// RemovePoolsFromDepositWhitelist is a paid mutator transaction binding the contract method 0x53721791.
//
// Solidity: function removePoolsFromDepositWhitelist(address[] poolsToRemoveFromWhitelist) returns()
func (_PoolController *PoolControllerSession) RemovePoolsFromDepositWhitelist(poolsToRemoveFromWhitelist []common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.RemovePoolsFromDepositWhitelist(&_PoolController.TransactOpts, poolsToRemoveFromWhitelist)
}

// RemovePoolsFromDepositWhitelist is a paid mutator transaction binding the contract method 0x53721791.
//
// Solidity: function removePoolsFromDepositWhitelist(address[] poolsToRemoveFromWhitelist) returns()
func (_PoolController *PoolControllerTransactorSession) RemovePoolsFromDepositWhitelist(poolsToRemoveFromWhitelist []common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.RemovePoolsFromDepositWhitelist(&_PoolController.TransactOpts, poolsToRemoveFromWhitelist)
}

// RemoveShares is a paid mutator transaction binding the contract method 0x8c80d4e5.
//
// Solidity: function removeShares(address staker, address pool, uint256 shares) returns()
func (_PoolController *PoolControllerTransactor) RemoveShares(opts *bind.TransactOpts, staker common.Address, pool common.Address, shares *big.Int) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "removeShares", staker, pool, shares)
}

// RemoveShares is a paid mutator transaction binding the contract method 0x8c80d4e5.
//
// Solidity: function removeShares(address staker, address pool, uint256 shares) returns()
func (_PoolController *PoolControllerSession) RemoveShares(staker common.Address, pool common.Address, shares *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.RemoveShares(&_PoolController.TransactOpts, staker, pool, shares)
}

// RemoveShares is a paid mutator transaction binding the contract method 0x8c80d4e5.
//
// Solidity: function removeShares(address staker, address pool, uint256 shares) returns()
func (_PoolController *PoolControllerTransactorSession) RemoveShares(staker common.Address, pool common.Address, shares *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.RemoveShares(&_PoolController.TransactOpts, staker, pool, shares)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PoolController *PoolControllerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PoolController *PoolControllerSession) RenounceOwnership() (*types.Transaction, error) {
	return _PoolController.Contract.RenounceOwnership(&_PoolController.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PoolController *PoolControllerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PoolController.Contract.RenounceOwnership(&_PoolController.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_PoolController *PoolControllerTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_PoolController *PoolControllerSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.SetPauserRegistry(&_PoolController.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_PoolController *PoolControllerTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.SetPauserRegistry(&_PoolController.TransactOpts, newPauserRegistry)
}

// SetPoolWhitelister is a paid mutator transaction binding the contract method 0xa3a97381.
//
// Solidity: function setPoolWhitelister(address newPoolWhitelister) returns()
func (_PoolController *PoolControllerTransactor) SetPoolWhitelister(opts *bind.TransactOpts, newPoolWhitelister common.Address) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "setPoolWhitelister", newPoolWhitelister)
}

// SetPoolWhitelister is a paid mutator transaction binding the contract method 0xa3a97381.
//
// Solidity: function setPoolWhitelister(address newPoolWhitelister) returns()
func (_PoolController *PoolControllerSession) SetPoolWhitelister(newPoolWhitelister common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.SetPoolWhitelister(&_PoolController.TransactOpts, newPoolWhitelister)
}

// SetPoolWhitelister is a paid mutator transaction binding the contract method 0xa3a97381.
//
// Solidity: function setPoolWhitelister(address newPoolWhitelister) returns()
func (_PoolController *PoolControllerTransactorSession) SetPoolWhitelister(newPoolWhitelister common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.SetPoolWhitelister(&_PoolController.TransactOpts, newPoolWhitelister)
}

// SetThirdPartyTransfersForbidden is a paid mutator transaction binding the contract method 0x4e5a4263.
//
// Solidity: function setThirdPartyTransfersForbidden(address pool, bool value) returns()
func (_PoolController *PoolControllerTransactor) SetThirdPartyTransfersForbidden(opts *bind.TransactOpts, pool common.Address, value bool) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "setThirdPartyTransfersForbidden", pool, value)
}

// SetThirdPartyTransfersForbidden is a paid mutator transaction binding the contract method 0x4e5a4263.
//
// Solidity: function setThirdPartyTransfersForbidden(address pool, bool value) returns()
func (_PoolController *PoolControllerSession) SetThirdPartyTransfersForbidden(pool common.Address, value bool) (*types.Transaction, error) {
	return _PoolController.Contract.SetThirdPartyTransfersForbidden(&_PoolController.TransactOpts, pool, value)
}

// SetThirdPartyTransfersForbidden is a paid mutator transaction binding the contract method 0x4e5a4263.
//
// Solidity: function setThirdPartyTransfersForbidden(address pool, bool value) returns()
func (_PoolController *PoolControllerTransactorSession) SetThirdPartyTransfersForbidden(pool common.Address, value bool) (*types.Transaction, error) {
	return _PoolController.Contract.SetThirdPartyTransfersForbidden(&_PoolController.TransactOpts, pool, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PoolController *PoolControllerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PoolController *PoolControllerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.TransferOwnership(&_PoolController.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PoolController *PoolControllerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.TransferOwnership(&_PoolController.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_PoolController *PoolControllerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_PoolController *PoolControllerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.Unpause(&_PoolController.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_PoolController *PoolControllerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _PoolController.Contract.Unpause(&_PoolController.TransactOpts, newPausedStatus)
}

// WithdrawSharesAsTokens is a paid mutator transaction binding the contract method 0xc608c7f3.
//
// Solidity: function withdrawSharesAsTokens(address recipient, address pool, uint256 shares, address token) returns()
func (_PoolController *PoolControllerTransactor) WithdrawSharesAsTokens(opts *bind.TransactOpts, recipient common.Address, pool common.Address, shares *big.Int, token common.Address) (*types.Transaction, error) {
	return _PoolController.contract.Transact(opts, "withdrawSharesAsTokens", recipient, pool, shares, token)
}

// WithdrawSharesAsTokens is a paid mutator transaction binding the contract method 0xc608c7f3.
//
// Solidity: function withdrawSharesAsTokens(address recipient, address pool, uint256 shares, address token) returns()
func (_PoolController *PoolControllerSession) WithdrawSharesAsTokens(recipient common.Address, pool common.Address, shares *big.Int, token common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.WithdrawSharesAsTokens(&_PoolController.TransactOpts, recipient, pool, shares, token)
}

// WithdrawSharesAsTokens is a paid mutator transaction binding the contract method 0xc608c7f3.
//
// Solidity: function withdrawSharesAsTokens(address recipient, address pool, uint256 shares, address token) returns()
func (_PoolController *PoolControllerTransactorSession) WithdrawSharesAsTokens(recipient common.Address, pool common.Address, shares *big.Int, token common.Address) (*types.Transaction, error) {
	return _PoolController.Contract.WithdrawSharesAsTokens(&_PoolController.TransactOpts, recipient, pool, shares, token)
}

// PoolControllerDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the PoolController contract.
type PoolControllerDepositIterator struct {
	Event *PoolControllerDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerDeposit represents a Deposit event raised by the PoolController contract.
type PoolControllerDeposit struct {
	Staker common.Address
	Token  common.Address
	Pool   common.Address
	Shares *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x7cfff908a4b583f36430b25d75964c458d8ede8a99bd61be750e97ee1b2f3a96.
//
// Solidity: event Deposit(address staker, address token, address pool, uint256 shares)
func (_PoolController *PoolControllerFilterer) FilterDeposit(opts *bind.FilterOpts) (*PoolControllerDepositIterator, error) {

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PoolControllerDepositIterator{contract: _PoolController.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x7cfff908a4b583f36430b25d75964c458d8ede8a99bd61be750e97ee1b2f3a96.
//
// Solidity: event Deposit(address staker, address token, address pool, uint256 shares)
func (_PoolController *PoolControllerFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PoolControllerDeposit) (event.Subscription, error) {

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerDeposit)
				if err := _PoolController.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x7cfff908a4b583f36430b25d75964c458d8ede8a99bd61be750e97ee1b2f3a96.
//
// Solidity: event Deposit(address staker, address token, address pool, uint256 shares)
func (_PoolController *PoolControllerFilterer) ParseDeposit(log types.Log) (*PoolControllerDeposit, error) {
	event := new(PoolControllerDeposit)
	if err := _PoolController.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PoolController contract.
type PoolControllerInitializedIterator struct {
	Event *PoolControllerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerInitialized represents a Initialized event raised by the PoolController contract.
type PoolControllerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PoolController *PoolControllerFilterer) FilterInitialized(opts *bind.FilterOpts) (*PoolControllerInitializedIterator, error) {

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PoolControllerInitializedIterator{contract: _PoolController.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PoolController *PoolControllerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PoolControllerInitialized) (event.Subscription, error) {

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerInitialized)
				if err := _PoolController.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PoolController *PoolControllerFilterer) ParseInitialized(log types.Log) (*PoolControllerInitialized, error) {
	event := new(PoolControllerInitialized)
	if err := _PoolController.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PoolController contract.
type PoolControllerOwnershipTransferredIterator struct {
	Event *PoolControllerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerOwnershipTransferred represents a OwnershipTransferred event raised by the PoolController contract.
type PoolControllerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PoolController *PoolControllerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PoolControllerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PoolControllerOwnershipTransferredIterator{contract: _PoolController.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PoolController *PoolControllerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PoolControllerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerOwnershipTransferred)
				if err := _PoolController.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PoolController *PoolControllerFilterer) ParseOwnershipTransferred(log types.Log) (*PoolControllerOwnershipTransferred, error) {
	event := new(PoolControllerOwnershipTransferred)
	if err := _PoolController.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the PoolController contract.
type PoolControllerPausedIterator struct {
	Event *PoolControllerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerPaused represents a Paused event raised by the PoolController contract.
type PoolControllerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_PoolController *PoolControllerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*PoolControllerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &PoolControllerPausedIterator{contract: _PoolController.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_PoolController *PoolControllerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *PoolControllerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerPaused)
				if err := _PoolController.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_PoolController *PoolControllerFilterer) ParsePaused(log types.Log) (*PoolControllerPaused, error) {
	event := new(PoolControllerPaused)
	if err := _PoolController.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the PoolController contract.
type PoolControllerPauserRegistrySetIterator struct {
	Event *PoolControllerPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerPauserRegistrySet represents a PauserRegistrySet event raised by the PoolController contract.
type PoolControllerPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_PoolController *PoolControllerFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*PoolControllerPauserRegistrySetIterator, error) {

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &PoolControllerPauserRegistrySetIterator{contract: _PoolController.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_PoolController *PoolControllerFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *PoolControllerPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerPauserRegistrySet)
				if err := _PoolController.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_PoolController *PoolControllerFilterer) ParsePauserRegistrySet(log types.Log) (*PoolControllerPauserRegistrySet, error) {
	event := new(PoolControllerPauserRegistrySet)
	if err := _PoolController.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerPoolAddedToDepositWhitelistIterator is returned from FilterPoolAddedToDepositWhitelist and is used to iterate over the raw logs and unpacked data for PoolAddedToDepositWhitelist events raised by the PoolController contract.
type PoolControllerPoolAddedToDepositWhitelistIterator struct {
	Event *PoolControllerPoolAddedToDepositWhitelist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerPoolAddedToDepositWhitelistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerPoolAddedToDepositWhitelist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerPoolAddedToDepositWhitelist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerPoolAddedToDepositWhitelistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerPoolAddedToDepositWhitelistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerPoolAddedToDepositWhitelist represents a PoolAddedToDepositWhitelist event raised by the PoolController contract.
type PoolControllerPoolAddedToDepositWhitelist struct {
	Pool common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPoolAddedToDepositWhitelist is a free log retrieval operation binding the contract event 0x39daccb429428846b0171894bd4200a7051a1c25c7b82ee455a39f89d72e634c.
//
// Solidity: event PoolAddedToDepositWhitelist(address pool)
func (_PoolController *PoolControllerFilterer) FilterPoolAddedToDepositWhitelist(opts *bind.FilterOpts) (*PoolControllerPoolAddedToDepositWhitelistIterator, error) {

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "PoolAddedToDepositWhitelist")
	if err != nil {
		return nil, err
	}
	return &PoolControllerPoolAddedToDepositWhitelistIterator{contract: _PoolController.contract, event: "PoolAddedToDepositWhitelist", logs: logs, sub: sub}, nil
}

// WatchPoolAddedToDepositWhitelist is a free log subscription operation binding the contract event 0x39daccb429428846b0171894bd4200a7051a1c25c7b82ee455a39f89d72e634c.
//
// Solidity: event PoolAddedToDepositWhitelist(address pool)
func (_PoolController *PoolControllerFilterer) WatchPoolAddedToDepositWhitelist(opts *bind.WatchOpts, sink chan<- *PoolControllerPoolAddedToDepositWhitelist) (event.Subscription, error) {

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "PoolAddedToDepositWhitelist")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerPoolAddedToDepositWhitelist)
				if err := _PoolController.contract.UnpackLog(event, "PoolAddedToDepositWhitelist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoolAddedToDepositWhitelist is a log parse operation binding the contract event 0x39daccb429428846b0171894bd4200a7051a1c25c7b82ee455a39f89d72e634c.
//
// Solidity: event PoolAddedToDepositWhitelist(address pool)
func (_PoolController *PoolControllerFilterer) ParsePoolAddedToDepositWhitelist(log types.Log) (*PoolControllerPoolAddedToDepositWhitelist, error) {
	event := new(PoolControllerPoolAddedToDepositWhitelist)
	if err := _PoolController.contract.UnpackLog(event, "PoolAddedToDepositWhitelist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerPoolRemovedFromDepositWhitelistIterator is returned from FilterPoolRemovedFromDepositWhitelist and is used to iterate over the raw logs and unpacked data for PoolRemovedFromDepositWhitelist events raised by the PoolController contract.
type PoolControllerPoolRemovedFromDepositWhitelistIterator struct {
	Event *PoolControllerPoolRemovedFromDepositWhitelist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerPoolRemovedFromDepositWhitelistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerPoolRemovedFromDepositWhitelist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerPoolRemovedFromDepositWhitelist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerPoolRemovedFromDepositWhitelistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerPoolRemovedFromDepositWhitelistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerPoolRemovedFromDepositWhitelist represents a PoolRemovedFromDepositWhitelist event raised by the PoolController contract.
type PoolControllerPoolRemovedFromDepositWhitelist struct {
	Pool common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPoolRemovedFromDepositWhitelist is a free log retrieval operation binding the contract event 0x8ac71de5f0eed990ceee2d31cbfe4280db9f27a8f0bf5567c507309de33ed723.
//
// Solidity: event PoolRemovedFromDepositWhitelist(address pool)
func (_PoolController *PoolControllerFilterer) FilterPoolRemovedFromDepositWhitelist(opts *bind.FilterOpts) (*PoolControllerPoolRemovedFromDepositWhitelistIterator, error) {

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "PoolRemovedFromDepositWhitelist")
	if err != nil {
		return nil, err
	}
	return &PoolControllerPoolRemovedFromDepositWhitelistIterator{contract: _PoolController.contract, event: "PoolRemovedFromDepositWhitelist", logs: logs, sub: sub}, nil
}

// WatchPoolRemovedFromDepositWhitelist is a free log subscription operation binding the contract event 0x8ac71de5f0eed990ceee2d31cbfe4280db9f27a8f0bf5567c507309de33ed723.
//
// Solidity: event PoolRemovedFromDepositWhitelist(address pool)
func (_PoolController *PoolControllerFilterer) WatchPoolRemovedFromDepositWhitelist(opts *bind.WatchOpts, sink chan<- *PoolControllerPoolRemovedFromDepositWhitelist) (event.Subscription, error) {

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "PoolRemovedFromDepositWhitelist")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerPoolRemovedFromDepositWhitelist)
				if err := _PoolController.contract.UnpackLog(event, "PoolRemovedFromDepositWhitelist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoolRemovedFromDepositWhitelist is a log parse operation binding the contract event 0x8ac71de5f0eed990ceee2d31cbfe4280db9f27a8f0bf5567c507309de33ed723.
//
// Solidity: event PoolRemovedFromDepositWhitelist(address pool)
func (_PoolController *PoolControllerFilterer) ParsePoolRemovedFromDepositWhitelist(log types.Log) (*PoolControllerPoolRemovedFromDepositWhitelist, error) {
	event := new(PoolControllerPoolRemovedFromDepositWhitelist)
	if err := _PoolController.contract.UnpackLog(event, "PoolRemovedFromDepositWhitelist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerPoolWhitelisterChangedIterator is returned from FilterPoolWhitelisterChanged and is used to iterate over the raw logs and unpacked data for PoolWhitelisterChanged events raised by the PoolController contract.
type PoolControllerPoolWhitelisterChangedIterator struct {
	Event *PoolControllerPoolWhitelisterChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerPoolWhitelisterChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerPoolWhitelisterChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerPoolWhitelisterChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerPoolWhitelisterChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerPoolWhitelisterChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerPoolWhitelisterChanged represents a PoolWhitelisterChanged event raised by the PoolController contract.
type PoolControllerPoolWhitelisterChanged struct {
	PreviousAddress common.Address
	NewAddress      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPoolWhitelisterChanged is a free log retrieval operation binding the contract event 0xb10a4c4f1bee1e88074ca37b6c3ce3990495d771d4f7735a5fed00a773af424f.
//
// Solidity: event PoolWhitelisterChanged(address previousAddress, address newAddress)
func (_PoolController *PoolControllerFilterer) FilterPoolWhitelisterChanged(opts *bind.FilterOpts) (*PoolControllerPoolWhitelisterChangedIterator, error) {

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "PoolWhitelisterChanged")
	if err != nil {
		return nil, err
	}
	return &PoolControllerPoolWhitelisterChangedIterator{contract: _PoolController.contract, event: "PoolWhitelisterChanged", logs: logs, sub: sub}, nil
}

// WatchPoolWhitelisterChanged is a free log subscription operation binding the contract event 0xb10a4c4f1bee1e88074ca37b6c3ce3990495d771d4f7735a5fed00a773af424f.
//
// Solidity: event PoolWhitelisterChanged(address previousAddress, address newAddress)
func (_PoolController *PoolControllerFilterer) WatchPoolWhitelisterChanged(opts *bind.WatchOpts, sink chan<- *PoolControllerPoolWhitelisterChanged) (event.Subscription, error) {

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "PoolWhitelisterChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerPoolWhitelisterChanged)
				if err := _PoolController.contract.UnpackLog(event, "PoolWhitelisterChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoolWhitelisterChanged is a log parse operation binding the contract event 0xb10a4c4f1bee1e88074ca37b6c3ce3990495d771d4f7735a5fed00a773af424f.
//
// Solidity: event PoolWhitelisterChanged(address previousAddress, address newAddress)
func (_PoolController *PoolControllerFilterer) ParsePoolWhitelisterChanged(log types.Log) (*PoolControllerPoolWhitelisterChanged, error) {
	event := new(PoolControllerPoolWhitelisterChanged)
	if err := _PoolController.contract.UnpackLog(event, "PoolWhitelisterChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the PoolController contract.
type PoolControllerUnpausedIterator struct {
	Event *PoolControllerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerUnpaused represents a Unpaused event raised by the PoolController contract.
type PoolControllerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_PoolController *PoolControllerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*PoolControllerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &PoolControllerUnpausedIterator{contract: _PoolController.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_PoolController *PoolControllerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *PoolControllerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerUnpaused)
				if err := _PoolController.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_PoolController *PoolControllerFilterer) ParseUnpaused(log types.Log) (*PoolControllerUnpaused, error) {
	event := new(PoolControllerUnpaused)
	if err := _PoolController.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolControllerUpdatedThirdPartyTransfersForbiddenIterator is returned from FilterUpdatedThirdPartyTransfersForbidden and is used to iterate over the raw logs and unpacked data for UpdatedThirdPartyTransfersForbidden events raised by the PoolController contract.
type PoolControllerUpdatedThirdPartyTransfersForbiddenIterator struct {
	Event *PoolControllerUpdatedThirdPartyTransfersForbidden // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PoolControllerUpdatedThirdPartyTransfersForbiddenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PoolControllerUpdatedThirdPartyTransfersForbidden)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PoolControllerUpdatedThirdPartyTransfersForbidden)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PoolControllerUpdatedThirdPartyTransfersForbiddenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PoolControllerUpdatedThirdPartyTransfersForbiddenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PoolControllerUpdatedThirdPartyTransfersForbidden represents a UpdatedThirdPartyTransfersForbidden event raised by the PoolController contract.
type PoolControllerUpdatedThirdPartyTransfersForbidden struct {
	Pool  common.Address
	Value bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterUpdatedThirdPartyTransfersForbidden is a free log retrieval operation binding the contract event 0x77d930df4937793473a95024d87a98fd2ccb9e92d3c2463b3dacd65d3e6a5786.
//
// Solidity: event UpdatedThirdPartyTransfersForbidden(address pool, bool value)
func (_PoolController *PoolControllerFilterer) FilterUpdatedThirdPartyTransfersForbidden(opts *bind.FilterOpts) (*PoolControllerUpdatedThirdPartyTransfersForbiddenIterator, error) {

	logs, sub, err := _PoolController.contract.FilterLogs(opts, "UpdatedThirdPartyTransfersForbidden")
	if err != nil {
		return nil, err
	}
	return &PoolControllerUpdatedThirdPartyTransfersForbiddenIterator{contract: _PoolController.contract, event: "UpdatedThirdPartyTransfersForbidden", logs: logs, sub: sub}, nil
}

// WatchUpdatedThirdPartyTransfersForbidden is a free log subscription operation binding the contract event 0x77d930df4937793473a95024d87a98fd2ccb9e92d3c2463b3dacd65d3e6a5786.
//
// Solidity: event UpdatedThirdPartyTransfersForbidden(address pool, bool value)
func (_PoolController *PoolControllerFilterer) WatchUpdatedThirdPartyTransfersForbidden(opts *bind.WatchOpts, sink chan<- *PoolControllerUpdatedThirdPartyTransfersForbidden) (event.Subscription, error) {

	logs, sub, err := _PoolController.contract.WatchLogs(opts, "UpdatedThirdPartyTransfersForbidden")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PoolControllerUpdatedThirdPartyTransfersForbidden)
				if err := _PoolController.contract.UnpackLog(event, "UpdatedThirdPartyTransfersForbidden", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdatedThirdPartyTransfersForbidden is a log parse operation binding the contract event 0x77d930df4937793473a95024d87a98fd2ccb9e92d3c2463b3dacd65d3e6a5786.
//
// Solidity: event UpdatedThirdPartyTransfersForbidden(address pool, bool value)
func (_PoolController *PoolControllerFilterer) ParseUpdatedThirdPartyTransfersForbidden(log types.Log) (*PoolControllerUpdatedThirdPartyTransfersForbidden, error) {
	event := new(PoolControllerUpdatedThirdPartyTransfersForbidden)
	if err := _PoolController.contract.UnpackLog(event, "UpdatedThirdPartyTransfersForbidden", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
